<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModulusFE.StockChartX.SL</name>
    </assembly>
    <members>
        <member name="T:ModulusFE.LineStudies.LineStudyContextMenu">
            <summary>
            Interaction logic for LineStudyContextMenu.xaml
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudyContextMenu.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudyContextMenu.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudyContextMenu.Show(System.Windows.Point)">
            <summary>
            </summary>
            <param name="position"></param>
        </member>
        <member name="E:ModulusFE.LineStudies.LineStudyContextMenu.MenuItemClick">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.SL.Extensions">
            <summary>
             Extensions
            </summary>
        </member>
        <member name="M:ModulusFE.SL.Extensions.Inflate(System.Windows.Rect,System.Double,System.Double)">
            <summary>
             Inflates a <see cref="T:System.Windows.Rect"/> structure by the specified amount.
            </summary>
            <param name="self"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:ModulusFE.SL.Extensions.Offset(System.Windows.Point,System.Double,System.Double)">
            <summary>
             Translates the <see cref="T:System.Windows.Point"/> by the specified amount.
            </summary>
            <param name="self"></param>
            <param name="offsetX"></param>
            <param name="offsetY"></param>
        </member>
        <member name="M:ModulusFE.SL.Extensions.FindIndex``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <summary>
             Finds the position of an element using a given predicate
            </summary>
            <param name="self"></param>
            <param name="predicat"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ModulusFE.Tasdk.Index">
            <summary>
            Index type of calculations
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.MoneyFlowIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32)">
            <summary>
             Money Flow Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.MoneyFlowIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.String)">
            <summary>
             Money Flow Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.TradeVolumeIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field,System.Double)">
            <summary>
             Trade Volume Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Volume">Field Volume</param>
            <param name="MinTickValue">Minimum Tick Value</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.TradeVolumeIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field,System.Double,System.String)">
            <summary>
             Trade Volume Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Volume">Field Volume</param>
            <param name="MinTickValue">Minimum Tick Value</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.SwingIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Double)">
            <summary>
             Swing Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="LimitMoveValue">Limit Move Value</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.SwingIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Double,System.String)">
            <summary>
             Swing Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="LimitMoveValue">Limit Move Value</param>
            <param name="Alias">Alias</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.AccumulativeSwingIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Double)">
            <summary>
             Accumulative Swing Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="LimitMoveValue">Limit Move Value</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.AccumulativeSwingIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Double,System.String)">
            <summary>
             Accumulative Swing Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="LimitMoveValue">Limit Move Value</param>
            <param name="Alias">Alias</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.RelativeStrengthIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Relative Strength Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.RelativeStrengthIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Relative Strength Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.ComparativeRelativeStrength(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field)">
            <summary>
             Comparative Relative Strength
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource1">Field Source1</param>
            <param name="pSource2">Field Source2</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.ComparativeRelativeStrength(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field,System.String)">
            <summary>
             Comparative Relative Strength
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource1">Field Source1</param>
            <param name="pSource2">Field Source2</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.PriceVolumeTrend(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field)">
            <summary>
             Price Volume Trend
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Volume">Field Volume</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.PriceVolumeTrend(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field,System.String)">
            <summary>
             Price Volume Trend
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Volume">Field Volume</param>
            <param name="Alias">Alias</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.PositiveVolumeIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field)">
            <summary>
             Price Volume Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Volume">Field Volume</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.PositiveVolumeIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field,System.String)">
            <summary>
             Price Volume Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Volume">Field Volume</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.NegativeVolumeIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field)">
            <summary>
             Negative Volume Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Volume">Field Volume</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.NegativeVolumeIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field,System.String)">
            <summary>
             Negative Volume Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Volume">Field Volume</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.Performance(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field)">
            <summary>
             Performance
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.Performance(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.String)">
            <summary>
             Performance
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.OnBalanceVolume(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field)">
            <summary>
             On Balance Volume
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Volume">Field Volume</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.OnBalanceVolume(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field,System.String)">
            <summary>
             On Balance Volume
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Volume">Field Volume</param>
            <param name="Alias">Alias</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.MassIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32)">
            <summary>
             Mass Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.MassIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.String)">
            <summary>
             Mass Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.ChaikinMoneyFlow(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32)">
            <summary>
             Chaikin Money Flow
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.ChaikinMoneyFlow(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.String)">
            <summary>
             Chaikin Money Flow
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.CommodityChannelIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32)">
            <summary>
             Commodity Channel Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.CommodityChannelIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.String)">
            <summary>
             Commodity Channel Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.StochasticMomentumIndex(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.Int32,System.Int32,System.Int32,ModulusFE.IndicatorType,ModulusFE.IndicatorType)">
            <summary>
             Stochastic Momentum Index
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordser</param>
            <param name="KPeriods">K Periods</param>
            <param name="KSmooth">K Smooth</param>
            <param name="KDoubleSmooth">K Double Smooth</param>
            <param name="DPeriods">D Periods</param>
            <param name="MAType">Moving Average Type</param>
            <param name="PctD_MAType">%D Movering Average Type</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.HistoricalVolatility(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field)">
            <summary>
             Historical Volatility
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Index.HistoricalVolatility(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
             Historical Volatility
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="BarHistory">Bar History</param>
            <param name="StandardDeviations">Standard Deviations</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.PriceStyles.Style.Paint">
            <summary>
            
            </summary>
            <returns>true - if series was painted, false - otherwise</returns>
        </member>
        <member name="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.IContextAbleLineStudy.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.IContextAbleLineStudy.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.IContextAbleLineStudy.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX_LineStudiesParams">
            <summary>
            The class has information parameters for line studies used in the chart
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX_LineStudiesParams.GetLineStudyCLRType(ModulusFE.LineStudies.LineStudy.StudyTypeEnum)">
            <summary>
            Gets the CLR type by internal line study type.
            </summary>
            <param name="studyTypeEnum">Internal type</param>
            <returns>CLR Type</returns>
        </member>
        <member name="P:ModulusFE.StockChartX_LineStudiesParams.LineStudiesTypes">
            <summary>
             Gets the registered line studies
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX_LineStudiesParams.LineStudyParams">
            <summary>
             Information about a line study
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX_LineStudiesParams.LineStudyParams.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="P:ModulusFE.StockChartX_LineStudiesParams.LineStudyParams.StudyTypeEnum">
            <summary>
             Line study type
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX_LineStudiesParams.LineStudyParams.CLRType">
            <summary>
             CLR Type of line study
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX_LineStudiesParams.LineStudyParams.FriendlyName">
            <summary>
             Friendly name of the line study
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.GannFan">
            <summary>
            Gann Fan line study
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.LineStudy">
            <summary>
            Base class for all line studies used in the chart
            </summary>
        </member>
        <member name="T:ModulusFE.ChartElementProperties.IChartElementPropertyAble">
            <summary>
             Defines the interface for propertyable elements from chart
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.IChartElementPropertyAble.Title">
            <summary>
             Gets the element title
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.IChartElementPropertyAble.Properties">
            <summary>
             Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of properties for this element
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy._valuePresenter">
            <summary>
            Has a reference to <see cref="T:ModulusFE.Interfaces.IValuePresenter"/> for a <see cref="T:ModulusFE.LineStudies.LineStudy"/>
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.ShowInternal(System.Boolean)">
            <summary>
            Shows or hides a LineStudy
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.Update">
            <summary>
            Sets chart value lookup based on actual pixel position
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.ReSetLineStudyValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.UpdatePosition(System.Int32)">
            <summary>
            Called mainly by DataManager when a new record gets inserted before _x1 index value, in this case
            we must update X1 value so it will keep up with the needed record
            </summary>
            <param name="step"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.XYValuesChanged">
            <summary>
            Called after user set XYValues.
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.SetXYValues(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets programmatically the logical coordinates of a <see cref="T:ModulusFE.LineStudies.LineStudy"/>. Internally they are transformed to canvas coordinates
            every line study has its own logic for seting canvas coordinates, you must know very well what every line study does
            and what are its rules of paiting.
            </summary>
            <param name="x1Value">X1 record index</param>
            <param name="y1Value">Y1 price value</param>
            <param name="x2Value">X2 record index</param>
            <param name="y2Value">Y2 price value</param>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.GetYMinMax(System.Double@,System.Double@)">
            <summary>
             Returns the Y min &amp; max values that are needed to show the current <see cref="T:ModulusFE.LineStudies.LineStudy"/>
             It will return <see cref="F:System.Double.MinValue"/> in case <see cref="T:ModulusFE.LineStudies.LineStudy"/> doesn't support such features, such as 
             <see cref="T:ModulusFE.LineStudies.VerticalLine"/> and others.
             The values returned are price values rather than pixels.
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.GetChartElementFillProperty">
            <summary>
            Fill Propeerty
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.GetChartElementOpacityProperty">
            <summary>
            Opacity Property
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.GetChartElementStrokeTypeProperty">
            <summary>
            Stroke Property
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.GetChartElementStrokeThicknessProperty(System.String)">
            <summary>
            Stroke Thickness property
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.GetChartElementColorProperty">
            <summary>
            Color property
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.InvokePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Invokes the PropertyChanged handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.OpacityChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.SetClipingAreaInternal(System.Nullable{System.Windows.Rect})">
            <summary>
            
            </summary>
            <param name="paintableRect"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.GetClip(System.Double,System.Double,System.Nullable{System.Windows.Rect})">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="paintableRect"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.ShowPropertiesWindow">
            <summary>
             Shows the internal properties dialog
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.CanvasZIndexChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.IsCurrentlyVisible">
            <summary>
             Checks whether the lineStudy should pe painted at the current zoom level
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.EnsureVisible(ModulusFE.LineStudies.LineStudy.EnsureVisibilityPosition)">
            <summary>
             Ensures the LineStudy is visible
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.LineStudy.EnsureVisibleMultiple(ModulusFE.ChartPanel)">
            <summary>
             Makes visible all the supplied LineStudies
            </summary>
            <param name="chartPanel"></param>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.LineStudyValue">
            <summary>
             Gets or sets a reference to a <see cref="T:ModulusFE.Interfaces.IValueBridge`1"/> derived object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.ValuePresenterAlignment">
            <summary>
             Gets or sets the alignment of Value Presenter
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.Selected">
            <summary>
            Selects or diselects a line study
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.Key">
            <summary>
            Gets the unique key that is associated with current line study
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.Selectable">
            <summary>
            Gets either the line study is selectable or not
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.StudyType">
            <summary>
            Gets the study type
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.X1Value">
            <summary>
            Start record
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.Y1Value">
            <summary>
            Start price value
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.X2Value">
            <summary>
            End Record
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.Y2Value">
            <summary>
            End price value
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.Stroke">
            <summary>
            Sets the color of lineStudy, when LineStudy is a text object it will set the Foreground color
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.StrokeThickness">
            <summary>
            Sets the thicknes if lines used to paint the lineStudy. In case of a text object it sets the font size
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.StrokeType">
            <summary>
            Sets the stroke type (solid, dash, dot, ...) for lines used to paint the <see cref="T:ModulusFE.LineStudies.LineStudy"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.Opacity">
            <summary>
             Gets or sets the opacity of <see cref="T:ModulusFE.LineStudies.LineStudy"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.Panel">
            <summary>
            Gets the panel that has ownership on this <see cref="T:ModulusFE.LineStudies.LineStudy"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.IsContextMenuDisabled">
            <summary>
            Gets or sets whether the <see cref="T:ModulusFE.LineStudies.LineStudy"/> will have the default functionality for context menu.
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.ExtraArgs">
            <summary>
            extra parameters that were passed when creating the <see cref="T:ModulusFE.LineStudies.LineStudy"/>. 
            Used for Image object to set image path and for text object to set the text
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.Title">
            <summary>
             Gets <see cref="T:ModulusFE.LineStudies.LineStudy"/>'s title
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.Properties">
            <summary>
             Gets <see cref="T:ModulusFE.LineStudies.LineStudy"/>'s properties
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.BaseProperties">
            <summary>
            Gets the basic properties that are common for all LineStudies
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.LineStudy.PropertyChanged">
            <summary>
             Occurs when a property changes
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.CanvasZIndex">
            <summary>
             Gets or sets the ZIndex order on canvas. 
             Not to be used public
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.LineStudy.NeededVisibleBounds">
            <summary>
             Returns a rectangle that will ensure the underlying LineStudy will fit into.
             Left &amp; Right values have the indexes from X axes
             Top &amp; Bottom values have the prices from Y axes
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.LineStudy.StudyTypeEnum">
            <summary>
            Line Study Types
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.Rectangle">
            <summary>                        
            Rectangle
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.TrendLine">
            <summary>
            Trend Line
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.SpeedLines">
            <summary>
            Speed Lines
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.GannFan">
            <summary>
            Gann Fan
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.FibonacciArcs">
            <summary>
            Fibonacci Arcs
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.FibonacciFan">
            <summary>
            Fibonacci Fan
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.FibonacciRetracements">
            <summary>
            Fibonacci Retracements
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.FibonacciTimeZones">
            <summary>
            Fibonacci Time Zones
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.TironeLevels">
            <summary>
            Tirone Levels
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.QuadrantLines">
            <summary>
            Quadrant Lines
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.RaffRegression">
            <summary>
            Raff Regression
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.ErrorChannel">
            <summary>
            Error Channel
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.SymbolObject">
            <summary>
            used for buy, sell and exit Symbols - images
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.HorizontalLine">
            <summary>
            Horizontal line
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.VerticalLine">
            <summary>
            Vertical Line
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.ImageObject">
            <summary>
            Image Object
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.StaticText">
            <summary>
            Static Text
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.UserDefinedText">
            <summary>
            User defined text (not yet supported)
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.FrameworkElement">
            <summary>
            WPF UI Element
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.StudyTypeEnum.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.LineStudy.ValuePresenterAlignmentType">
            <summary>
             Specifies the alignment of the value presenter relative to chart
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.ValuePresenterAlignmentType.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.ValuePresenterAlignmentType.Right">
            <summary>
             Right
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.LineStudy.LSVisibility">
            <summary>
             Values that indicates the visibility of current LineStudy
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.LSVisibility.NotVisible_Above">
            <summary>
             Not visible, is located above <see cref="P:ModulusFE.ChartPanel.Max"/>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.LSVisibility.NotVisible_Below">
            <summary>
             Not visible, is located below <see cref="P:ModulusFE.ChartPanel.Min"/>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.LSVisibility.Visible">
            <summary>
             Visible
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.LSVisibility.Unknown">
            <summary>
            In case when LineStudy is not created yet, or its position is not yet defined
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.LineStudy.EnsureVisibilityPosition">
            <summary>
             Makes the LienStudy visible, by scrolling or zooming the chart to needed position
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.EnsureVisibilityPosition.Left">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.EnsureVisibilityPosition.Middle">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.LineStudy.EnsureVisibilityPosition.Right">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.LineStudy.LineStatus">
            <summary>
            for internal usage only
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.GannFan.MAX_VISIBLE">
            <summary>
             Max visible Pixels
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.GannFan.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.LineStudies.GannFan.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.GannFan.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.GannFan.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.GannFan.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.GannFan.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.GannFan.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.GannFan.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX_IndicatorsParameters">
            <summary>
            Keeps information about indicators' parameters
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX_IndicatorsParameters.GetIndicatorParameters(ModulusFE.IndicatorType)">
            <summary>
            Returns a List of of indicator parameters for a given inidcator type
            </summary>
            <param name="indicatorType">Indicator type</param>
            <returns>Indicator Parameters</returns>
        </member>
        <member name="M:ModulusFE.StockChartX_IndicatorsParameters.GetIndicatorCLRType(ModulusFE.IndicatorType)">
            <summary>
            Returns indicators CLR type by internal IndicatorType
            </summary>
            <param name="indicatorType">Indicator type</param>
            <returns>CLR Type</returns>
        </member>
        <member name="M:ModulusFE.StockChartX_IndicatorsParameters.GetIndicatorName(ModulusFE.IndicatorType)">
            <summary>
            Returns the default indicator name by its type
            </summary>
            <param name="indicatorType">Indicator type</param>
            <returns>Indicator Name</returns>
        </member>
        <member name="P:ModulusFE.StockChartX_IndicatorsParameters.Indicators">
            <summary>
            Returns information about all indicators and their parameters
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameter">
            <summary>
            Information about an indicator's parameter
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameter.ToString">
            <summary>
            Ovveride
            </summary>
            <returns>Name</returns>
        </member>
        <member name="P:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameter.Name">
            <summary>
             Gets the indicator parameter name
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameter.ParameterType">
            <summary>
             Gets the parameter type
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameter.DefaultValue">
            <summary>
            Default value
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameter.ValueType">
            <summary>
            CLR value type
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameters">
            <summary>
            Collection of indicator parameter
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameters.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameters.#ctor(System.String)">
            <summary>
            Ctor
            </summary>
            <param name="indicatorRealName"></param>
        </member>
        <member name="M:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameters.ToString">
            <summary>
            Ovveride
            </summary>
            <returns>Real Name</returns>
        </member>
        <member name="P:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameters.IndicatorRealName">
            <summary>
            Gets indicator real name
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameters.IndicatorType">
            <summary>
            Indicator type
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameters.Parameters">
            <summary>
            Indicator's parameters
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX_IndicatorsParameters.IndicatorParameters.CLRIndicatorType">
            <summary>
            CLR indicator type
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.VolumeOscillator">
            <summary>
            The Volume Oscillator shows a spread of two different moving averages of volume over a specified period of time.
            </summary>
            <remarks>The Volume Oscillator offers a clear view of whether or not volume is increasing or decreasing.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Volume</term></item>
            <item><term>int Short Term</term></item>
            <item><term>int Long Term</term></item>
            <item><term>int Points Or Percent (output scale type)</term></item>
            </list>
            </remarks>
        </member>
        <member name="T:ModulusFE.Indicators.Indicator">
            <summary>
            Base class for all indicators
            </summary>
        </member>
        <member name="T:ModulusFE.Series">
            <summary>
             Base class for all series types used in the chart
            </summary>
            <summary>
             Base class for all series types used in the chart
            </summary>
        </member>
        <member name="F:ModulusFE.Series._min">
            <summary>
            has minimum value from all visible records. Set in ChartPanel.SetMaxMin()
            </summary>
        </member>
        <member name="F:ModulusFE.Series._max">
            <summary>
            has maximum value from all visible records. Set in ChartPanel.SetMaxMin()
            </summary>  
        </member>
        <member name="F:ModulusFE.Series._seriesIndex">
            <summary>
            Keeps the index of the series in DataManager
            </summary>
        </member>
        <member name="M:ModulusFE.Series.UpdateTitle">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.Series.UnNormalize(System.Double)">
            <summary>
            Unscales a value and restores between max and min
            </summary>
            <param name="value">Value to be unnormalized</param>
            <returns>UnNormalized value</returns>
        </member>
        <member name="M:ModulusFE.Series.Normalize(System.Double)">
            <summary>
            Normalizes a value between 1 and 0
            </summary>
            <param name="value">Value to be normalized</param>
            <returns>Normalized value</returns>
        </member>
        <member name="M:ModulusFE.Series.GetY(System.Double)">
            <summary>
            Gets the Y pixel by price value
            </summary>
            <param name="seriesValue">Prive value</param>
            <returns>Y pixel</returns>
        </member>
        <member name="M:ModulusFE.Series.GetReverseY(System.Double)">
            <summary>
            Returns series value by Y pixel
            </summary>
            <param name="pixelValue">Pixel value</param>
            <returns>Price value</returns>
        </member>
        <member name="M:ModulusFE.Series.InvokePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ModulusFE.Series.ToString">
            <summary>
            Returns a string that represents this <see cref="T:ModulusFE.Series"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="E:ModulusFE.Series.EditSerieInChartPanel">
            <summary>Evento disparado quando a ação de editar a serie é executado.</summary>
        </member>
        <member name="P:ModulusFE.Series.Name">
            <summary>
             Series Name
            </summary>
        </member>
        <member name="P:ModulusFE.Series.ShareScale">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Series.ShowInHeatMap">
            <summary>
            Gets or sets whether the series will be used in heat map.
            By default only indicators are shown in heat map.
            </summary>
        </member>
        <member name="P:ModulusFE.Series.Panel">
            <summary>
            Gets the reference to the panel where series is hosted.
            </summary>
        </member>
        <member name="P:ModulusFE.Series.FullName">
            <summary>
            Includes Name + OHLCV postfix
            </summary>
        </member>
        <member name="P:ModulusFE.Series.Title">
            <summary>
             Custom title if present. Otherwise FullName
            </summary>
        </member>
        <member name="P:ModulusFE.Series.OHLCType">
            <summary>
             OHLC type of the series
            </summary>
        </member>
        <member name="P:ModulusFE.Series.SeriesType">
            <summary>
            Series Type
            </summary>
        </member>
        <member name="P:ModulusFE.Series.UpColor">
            <summary>
             Sets the chart's up-tick bar color. When the close is higher than the previous close, this color will be used to paint the bar. 
            </summary>
        </member>
        <member name="P:ModulusFE.Series.DownColor">
            <summary>
             Sets the chart's down-tick bar color. When the close is lower than the previous close, this color will be used to paint the bar. 
            </summary>
        </member>
        <member name="P:ModulusFE.Series.StrokeColor">
            <summary>
             Line color
            </summary>
        </member>
        <member name="P:ModulusFE.Series.TitleBrush">
            <summary>
             Gets or sets the foreground for series' text displayed in panel's title bar
            </summary>
        </member>
        <member name="P:ModulusFE.Series.StrokeColorBrush">
            <summary>
             Gets the line stroke brush
            </summary>
        </member>
        <member name="P:ModulusFE.Series.WickUpStroke">
            <summary>
            Gets or sets the Brush for up-trend wick
            </summary>
        </member>
        <member name="P:ModulusFE.Series.WickDownStroke">
            <summary>
            Gets or sets the Brush for down-trend wick
            </summary>
        </member>
        <member name="P:ModulusFE.Series.WickStrokeThickness">
            <summary>
             Gets or sets the stroke thickness for wick
            </summary>
        </member>
        <member name="P:ModulusFE.Series.CandleUpFill">
            <summary>
             Gets or sets the Brush used to fill the up-trend of candles
            </summary>
        </member>
        <member name="P:ModulusFE.Series.CandleDownFill">
            <summary>
             Gets or sets the Brush used to fill the down-trend of candles
            </summary>
        </member>
        <member name="P:ModulusFE.Series.CandleUpStroke">
            <summary>
             Gets or sets the stroke Brush for the up-trend of candles
            </summary>
        </member>
        <member name="P:ModulusFE.Series.CandleDownStroke">
            <summary>
             Gets or sets the stroke Brush for the down-trend of candles
            </summary>
        </member>
        <member name="P:ModulusFE.Series.CandleStrokeThickness">
            <summary>
            Gets or sets the stroke thickness for Candles
            </summary>
        </member>
        <member name="P:ModulusFE.Series.UseEnhancedColoring">
            <summary>
             Gets ir sets whether the chart needs to use the an enhanced coloring.
             When set to true the following properties will be considerd
             <seealso cref="P:ModulusFE.Series.WickUpStroke"/>
             <seealso cref="P:ModulusFE.Series.WickDownStroke"/>
             <seealso cref="P:ModulusFE.Series.WickStrokeThickness"/>
             <seealso cref="P:ModulusFE.Series.CandleUpFill"/>
             <seealso cref="P:ModulusFE.Series.CandleDownFill"/>
             <seealso cref="P:ModulusFE.Series.CandleUpStroke"/>
             <seealso cref="P:ModulusFE.Series.CandleDownStroke"/>
             <seealso cref="P:ModulusFE.Series.CandleStrokeThickness"/>
            </summary>
        </member>
        <member name="P:ModulusFE.Series.StrokeThickness">
            <summary>
             Stroke thickness of lines used. It is used as FontSize for StaticText objects
            </summary>
        </member>
        <member name="P:ModulusFE.Series.StrokePattern">
            <summary>
             Stroke pattern
            </summary>
        </member>
        <member name="P:ModulusFE.Series.Opacity">
            <summary> 
             Stroke Opacity 
            </summary> 
        </member>
        <member name="P:ModulusFE.Series.Selectable">
            <summary>
             Is series selectable or not. If not, the user won't be able to select it with the mouse
            </summary>
        </member>
        <member name="P:ModulusFE.Series.Visible">
            <summary>
             Hides or shows the series.
            </summary>
        </member>
        <member name="P:ModulusFE.Series.Min">
            <summary>
             Minimum value that series has
            </summary>
        </member>
        <member name="P:ModulusFE.Series.Max">
            <summary>
             Maximum value that series has
            </summary>
        </member>
        <member name="P:ModulusFE.Series.SeriesIndex">
            <summary>
             Series index. All series internally have an index, that is used to access their value in internal DataManager object
            </summary>
        </member>
        <member name="P:ModulusFE.Series.Selected">
            <summary>
             Is series selected by the user with mouse or not.
            </summary>
        </member>
        <member name="P:ModulusFE.Series.Item(System.Int32)">
            <summary>
            Returns a series value by index
            </summary>
            <param name="recordIndex"></param>
            <returns></returns>
        </member>
        <member name="E:ModulusFE.Series.PropertyChanged">
            <summary>
            Occurs when an internal property changes. For internal usage only
            </summary>
        </member>
        <member name="P:ModulusFE.Series.AllValues">
            <summary>
            Gets all values
            </summary>
        </member>
        <member name="P:ModulusFE.Series.SeriesValueBridge">
            <summary>
             The "bridge" used to send data from Series about last price to its tick box value presenter
            </summary>
        </member>
        <member name="P:ModulusFE.Series.TickBox">
            <summary>
             Places a tick box on one of the Y axes
            </summary>
        </member>
        <member name="T:ModulusFE.Series.EditSerieHandler">
            <summary>
            Representa o método que irá manipular o evento de edição da serie
            </summary>
            <param name="tick"></param>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.GetParameterValue(System.Int32)">
            <summary>
            Returns the value of a parameter that indicator uses internal
            </summary>
            <param name="parameterIndex">Parameter index</param>
            <returns>Parameter Value</returns>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.SetParameterValue(System.Int32,System.Object)">
            <summary>
             When adding indicator by programm use this function to set indicators' parameters
            </summary>
            <param name="parameterIndex">Parameter Index</param>
            <param name="value">Value</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.ShowParametersDialog">
            <summary>
            Forces the dialog with indicators' properties to be shown
            </summary>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.FalseAction">
            <summary>
            Functions that executes when indicator is canceled
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.PostCalculate">
            <summary>
            Method that executes after calculation on indicator is done.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.TrueAction">
            <summary>
            An overradable method used by children classes.
            </summary>
            <returns></returns>
        </member>
        <member name="F:ModulusFE.Indicators.Indicator.GetParentPanel">
            <summary>
            A custom callback method that would let use another panel where indicator will be placed.
            Usefull in case when we want to place indicator in same panel as it source indicator
            </summary>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.RecycleLinkedSeries">
            <summary>
            Mark as true the recycled flag for linked series for current indicator
            </summary>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.ParamInt(System.Int32)">
            <summary>
            returns an integer value for indicator parameter
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.ParamDbl(System.Int32)">
            <summary>
            returns an double value for indicator parameter
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.ParamStr(System.Int32)">
            <summary>
            returns an string value for indicator parameter
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.GetUserInput(ModulusFE.Indicators.Indicator,System.Func{System.Boolean}[])">
            <summary>
            Functions that takes care of user input dialog
            </summary>
            <param name="actions"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.ProcessError(System.String,ModulusFE.Indicators.Indicator.IndicatorErrorType)">
            <summary>
            Function that process the error
            </summary>
            <param name="Description"></param>
            <param name="errorType"></param>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.SetMAComboSel(System.Windows.Controls.ComboBox,ModulusFE.IndicatorType)">
            <summary>
             Sets the selection in a given ComboBox for a given IndicatorType
            </summary>
            <param name="comboBox"></param>
            <param name="paramDef"></param>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.EnumMATypes(System.Windows.Controls.ComboBox)">
            <summary>
             Fills a ComboBox with availe Moving Average types
            </summary>
            <param name="comboBox"></param>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.GetMAType(System.Windows.Controls.ComboBox)">
            <summary>
             Gets the selected Moving Average type
            </summary>
            <param name="comboBox"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.MATypeToStr(ModulusFE.IndicatorType)">
            <summary>
             Converts Moving Average type to a readable text
            </summary>
            <param name="maType"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.SetComboDefault(System.Windows.Controls.ComboBox,System.String)">
            <summary>
             Sets the select item in a ComboBox given a value
            </summary>
            <param name="comboBox"></param>
            <param name="item"></param>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.EnumSeries(System.Windows.Controls.ComboBox)">
            <summary>
             Fill ComboBox with all the series that are currently in chart
            </summary>
            <param name="comboBox"></param>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.EnumSymbols(System.Windows.Controls.ComboBox)">
            <summary>
             Fill a ComboBox with all available symbols in the chart
            </summary>
            <param name="comboBox"></param>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.GetParamDescription(ModulusFE.ParameterType)">
            <summary>
             Returns the description of a given parameter type
            </summary>
            <param name="parameterType"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Indicators.Indicator.GetParamName(ModulusFE.ParameterType)">
            <summary>
            Returns parameter name by parameter type
            </summary>
            <param name="type">Type</param>
            <returns>Parameter Name</returns>
        </member>
        <member name="E:ModulusFE.Indicators.Indicator.EditIndicatorInChartPanel">
            <summary>Evento disparado quando a ação de GetCotacaoDiaria é executada.</summary>
        </member>
        <member name="P:ModulusFE.Indicators.Indicator.UserParams">
            <summary>
            This property is set when adding the indicator. If is true then user will be asked via a dialog for parameters.
            if false, then parameters must be set via code.
            </summary>
        </member>
        <member name="P:ModulusFE.Indicators.Indicator.ForceOscilatorPaint">
            <summary>
            Force the series to be painted as an oscilator (histogram)
            </summary>
        </member>
        <member name="P:ModulusFE.Indicators.Indicator.IndicatorParams">
            <summary>
             Get supported indicator parameters
            </summary>
        </member>
        <member name="P:ModulusFE.Indicators.Indicator.ForceLinearChart">
            <summary>
             Get or sets the series to be painted as a linear chart. 
             This property is ignored when <see cref="P:ModulusFE.Indicators.Indicator.ForceOscilatorPaint"/> = true;
             If set to TRUE the negatuve values won't be considered for chart to be painted as a histogram.
             If set to FALSE any negative value present in series will make current series to be painted as a historamm.
            </summary>
        </member>
        <member name="P:ModulusFE.Indicators.Indicator.IsTwin">
            <summary>
            Gets whether current indicator is just a twin for another main one.
            </summary>
        </member>
        <member name="P:ModulusFE.Indicators.Indicator.TwinsParentIndicator">
            <summary>
            Get's the Twin's parentIndicator (if it has one)
            </summary>
        </member>
        <member name="P:ModulusFE.Indicators.Indicator.IndicatorType">
            <summary>
            Gets the indicator type
            </summary>
        </member>
        <member name="P:ModulusFE.Indicators.Indicator.Properties">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.Indicator.EditIndicatorHandler">
            <summary>
            Representa o método que irá manipular o evento de recebimento de cotação.
            </summary>
            <param name="tick"></param>
        </member>
        <member name="T:ModulusFE.Indicators.Indicator.IndicatorErrorType">
            <summary>
            Indicator error types
            </summary>
        </member>
        <member name="F:ModulusFE.Indicators.Indicator.IndicatorErrorType.CircularReference">
            <summary>
            Indicator has circular reference
            </summary>
        </member>
        <member name="F:ModulusFE.Indicators.Indicator.IndicatorErrorType.RemoveIndicator">
            <summary>
            Indicator must be removed
            </summary>
        </member>
        <member name="F:ModulusFE.Indicators.Indicator.IndicatorErrorType.ThrowError">
            <summary>
            Throw an exception
            </summary>
        </member>
        <member name="F:ModulusFE.Indicators.Indicator.IndicatorErrorType.ShowErrorMessage">
            <summary>
            Show an error message
            </summary>
        </member>
        <member name="M:ModulusFE.Indicators.VolumeOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.VolumeOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.VIDYA">
            <summary>
            VIDYA (Volatility Index Dynamic Average), developed by Chande, is a moving average derived from linear regression R2.
            </summary>
            <remarks>A Moving Average is most often used to average values for a smoother representation of the underlying price or 
            indicator. Because VIDYA is a derivative of linear regression, it quickly adapts to volatility.
            R2Scale is a double value specifying the R-Squared scale to use in the linear regression calculations. 
            Chande recommends a value between 0.5 and 0.8 (default value is 0.65).
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            <item><term>dbl R2 Scale</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.VIDYA.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.VIDYA.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.StochasticOscillator">
            <summary>
            The Stochastic Oscillator is a popular indicator that shows where a security’s price has closed in proportion to its closing price range over a specified period of time.
            </summary>
            <remarks>The Stochastic Oscillator has two components: %K and %D. %K is most often displayed as a solid line and %D is often shown as a dotted line. The most widely used method for interpreting the Stochastic Oscillator is to buy when either component rises above 80 or sell when either component falls below 20. Another way to interpret the Stochastic Oscillator is to buy when %K rises above %D, and conversely, sell when %K falls below %D.
            
            The most commonly used arguments are 9 for %K periods, 3 for %K slowing periods and 3 for %D smoothing.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int %K Periods</term></item>
            <item><term>int %K Slowing</term></item>
            <item><term>int %D Periods</term></item>
            <item><term>int Moving Average Type</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.StochasticOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.StochasticOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.DetrendedPriceOscillator">
            <summary>
            The Detrended Price Oscillator is used when long-term trends or outliers must be removed from prices or index indicators.
            </summary>
            <remarks>This indicator is often used to supplement a standard price chart. Other indicators can be plotted over the Detrended Price Oscillator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            <item><term>int Moving Average Type</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.DetrendedPriceOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.DetrendedPriceOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.AccumulativeSwingIndex">
            <summary>
            The Accumulation Swing Index (Wilder) is a cumulative total of the Swing Index.
            </summary>
            <remarks>The Accumulation Swing Index may be analyzed using technical indicators, line studies, and chart patterns, as an alternative view of price action.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>dbl Limit Move Value</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.AccumulativeSwingIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.AccumulativeSwingIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.LinePattern">
            <summary>
            Line pattern used to paint lines in the chart
            </summary>
        </member>
        <member name="F:ModulusFE.LinePattern.Solid">
            <summary>
             Solid
            </summary>
        </member>
        <member name="F:ModulusFE.LinePattern.Dash">
            <summary>
            Dash
            </summary>
        </member>
        <member name="F:ModulusFE.LinePattern.Dot">
            <summary>
            Dots
            </summary>
        </member>
        <member name="F:ModulusFE.LinePattern.DashDot">
            <summary>
            Dash with dots
            </summary>
        </member>
        <member name="F:ModulusFE.LinePattern.None">
            <summary>
            None, line is hidden
            </summary>
        </member>
        <member name="T:ModulusFE.InfoPanelPositionEnum">
            <summary>
            Info panel type of positioning
            </summary>
        </member>
        <member name="F:ModulusFE.InfoPanelPositionEnum.Hidden">
            <summary>
            info panel will not be shown
            </summary>
        </member>
        <member name="F:ModulusFE.InfoPanelPositionEnum.FixedPosition">
            <summary>
            info panel will have a fixed position
            </summary>
        </member>
        <member name="F:ModulusFE.InfoPanelPositionEnum.FollowMouse">
            <summary>
            info panel will follow the mouse when mouse is held down
            </summary>
        </member>
        <member name="T:ModulusFE.TickCompressionEnum">
            <summary>
            Compression type for tick type of the chart
            </summary>
        </member>
        <member name="F:ModulusFE.TickCompressionEnum.Time">
            <summary>
            the ticks will be compressed based on time differences
            </summary>
        </member>
        <member name="F:ModulusFE.TickCompressionEnum.Ticks">
            <summary>
            the ticks will be compressed based on number of ticks
            </summary>
        </member>
        <member name="T:ModulusFE.ChartTypeEnum">
            <summary>
            Type of the chart
            </summary>
        </member>
        <member name="F:ModulusFE.ChartTypeEnum.Tick">
            <summary>
            Tick values
            </summary>
        </member>
        <member name="F:ModulusFE.ChartTypeEnum.OHLC">
            <summary>
            OHLC
            </summary>
        </member>
        <member name="T:ModulusFE.ObjectFromCursor">
            <summary>
            Object from cursor. Used with function GetObjectFromCursor
            </summary>
        </member>
        <member name="F:ModulusFE.ObjectFromCursor.PanelLeftYAxis">
            <summary>
            Left Y axis
            </summary>
        </member>
        <member name="F:ModulusFE.ObjectFromCursor.PanelRightYAxis">
            <summary>
            Right Y axis
            </summary>
        </member>
        <member name="F:ModulusFE.ObjectFromCursor.PanelLeftNonPaintableArea">
            <summary>
            Left non paintable area
            </summary>
        </member>
        <member name="F:ModulusFE.ObjectFromCursor.PanelRightNonPaintableArea">
            <summary>
            Right non paitable area
            </summary>
        </member>
        <member name="F:ModulusFE.ObjectFromCursor.PanelPaintableArea">
            <summary>
            Panel's paintable area
            </summary>
        </member>
        <member name="F:ModulusFE.ObjectFromCursor.PanelTitleBar">
            <summary>
            Panel's title bar
            </summary>
        </member>
        <member name="F:ModulusFE.ObjectFromCursor.Calendar">
            <summary>
            Calendar
            </summary>
        </member>
        <member name="F:ModulusFE.ObjectFromCursor.PanelsBar">
            <summary>
            Minimized panel's bar
            </summary>
        </member>
        <member name="F:ModulusFE.ObjectFromCursor.NoObject">
            <summary>
            No object
            </summary>
        </member>
        <member name="T:ModulusFE.SymbolType">
            <summary>
             Symbol type
            </summary>
        </member>
        <member name="F:ModulusFE.SymbolType.Buy">
            <summary>
            Buy
            </summary>
        </member>
        <member name="F:ModulusFE.SymbolType.Sell">
            <summary>
            Sell
            </summary>
        </member>
        <member name="F:ModulusFE.SymbolType.ExitShort">
            <summary>
            Exit Short
            </summary>
        </member>
        <member name="F:ModulusFE.SymbolType.ExitLong">
            <summary>
            Exit long
            </summary>
        </member>
        <member name="F:ModulusFE.SymbolType.Signal">
            <summary>
            Signal
            </summary>
        </member>
        <member name="T:ModulusFE.ChartDataType">
            <summary>
            Chart Data Type
            </summary>
        </member>
        <member name="F:ModulusFE.ChartDataType.Points">
            <summary>
            Points
            </summary>
        </member>
        <member name="F:ModulusFE.ChartDataType.Percent">
            <summary>
             Percent
            </summary>
        </member>
        <member name="T:ModulusFE.ParameterType">
            <summary>
            Type of parameter used for indicators
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptMAType">
            <summary>
            Moving Average Type
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPctDMAType">
            <summary>
            %D Moving Average Type
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptSymbol">
            <summary>
             Symbol
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptSource">
            <summary>
            Source - symbol
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptSource1">
            <summary>
            Source1 - symbol
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptSource2">
            <summary>
            Source 2 - symbol
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptSource3">
            <summary>
            Source 3 - symbol
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptVolume">
            <summary>
            Volume
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPointsOrPercent">
            <summary>
            Points or Percent
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPeriods">
            <summary>
            Periods
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPeriods1">
            <summary>
            Periods 1
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPeriods2">
            <summary>
            Periods 2
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPeriods3">
            <summary>
            Periods 3
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptCycle1">
            <summary>
            Cycle 1
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptCycle2">
            <summary>
            Cycle 2
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptCycle3">
            <summary>
            Cycle 3
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptShortTerm">
            <summary>
            Short Term
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptLongTerm">
            <summary>
            Long Term
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptRateOfChange">
            <summary>
            Rate of Change
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPctKPeriods">
            <summary>
            %K Periods
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPctKSlowing">
            <summary>
            %K Slowing
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPctDSmooth">
            <summary>
            %D Smooth
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPctKSmooth">
            <summary>
            %K Smooth
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPctDDblSmooth">
            <summary>
            %D Double Smooth
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPctDPeriods">
            <summary>
            %D Periods
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptPctKDblSmooth">
            <summary>
            %K Double Smooth
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptShortCycle">
            <summary>
            Short Cycle
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptLongCycle">
            <summary>
            Long Cycle
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptStandardDeviations">
            <summary>
            Standard Deviations
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptR2Scale">
            <summary>
            R2 Scale
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptMinAF">
            <summary>
            Minimum AF
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptMaxAF">
            <summary>
            Maximum AF
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptShift">
            <summary>
            Shift
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptFactor">
            <summary>
            Factor
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptSignalPeriods">
            <summary>
            Signal Periods
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptLimitMoveValue">
            <summary>
            Limit Move Value
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptMinTickVal">
            <summary>
            Minimum Tick Value
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptLevels">
            <summary>
            Lvels
            </summary>
        </member>
        <member name="F:ModulusFE.ParameterType.ptBarHistory">
            <summary>
            Bar History
            </summary>
        </member>
        <member name="T:ModulusFE.IndicatorType">
            <summary>
            Supported indicators
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.SimpleMovingAverage">
            <summary>
            Simple Moving Average
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ExponentialMovingAverage">
            <summary>
            Exponential Moving Average
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.TimeSeriesMovingAverage">
            <summary>
            Time Series Moving Average
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.TriangularMovingAverage">
            <summary>
            Triangular Moving Average
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.VariableMovingAverage">
            <summary>
            Variable Moving Average
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.VIDYA">
            <summary>
            VIDYA Moving Average
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.WellesWilderSmoothing">
            <summary>
            Welles Wilder Smoothing
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.WeightedMovingAverage">
            <summary>
            Weighted Moving Average
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.WilliamsPctR">
            <summary>
            Williams R
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.WilliamsAccumulationDistribution">
            <summary>
            Williams Accumulation Dist
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.VolumeOscillator">
            <summary>
            Volume Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.VerticalHorizontalFilter">
            <summary>
            Vertical Horizontal Filter
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.UltimateOscillator">
            <summary>
            Ultimate Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.TrueRange">
            <summary>
            True Range
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.TRIX">
            <summary>
            TRIX
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.RainbowOscillator">
            <summary>
            Rainbow Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.PriceOscillator">
            <summary>
            Price Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ParabolicSAR">
            <summary>
            Parabolic SAR
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.MomentumOscillator">
            <summary>
            Momentum Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.MACD">
            <summary>
            MACD
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.EaseOfMovement">
            <summary>
            Ease Of Movement
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.DirectionalMovementSystem">
            <summary>
            Directional Movement System
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.DetrendedPriceOscillator">
            <summary>
            Detrended Price Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ChandeMomentumOscillator">
            <summary>
            Chande Momentum Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ChaikinVolatility">
            <summary>
            Chaikin Volatility
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.Aroon">
            <summary>
            AroonOscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.AroonOscillator">
            <summary>
            AroonOscillator Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.LinearRegressionRSquared">
            <summary>
            Linear Regression R-Squared
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.LinearRegressionForecast">
            <summary>
            Linear Regression Forecast
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.LinearRegressionSlope">
            <summary>
            Linear Regression Slope
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.LinearRegressionIntercept">
            <summary>
            Linear Regression Intercept
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.PriceVolumeTrend">
            <summary>
            Price Volume Trend
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.PerformanceIndex">
            <summary>
            Performance Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.CommodityChannelIndex">
            <summary>
            Commodity Channel Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ChaikinMoneyFlow">
            <summary>
            Chaikin Money Flow
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.WeightedClose">
            <summary>
            Weighted Close
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.VolumeROC">
            <summary>
            Volume ROC
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.TypicalPrice">
            <summary>
            Typical Price
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.StandardDeviation">
            <summary>
            Standard Deviation
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.PriceROC">
            <summary>
            Price ROC
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.Median">
            <summary>
            Median Price
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.HighMinusLow">
            <summary>
            High Minus Low
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.BollingerBands">
            <summary>
            Bollinger Bands
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.FractalChaosBands">
            <summary>
            Fractal Chaos Bands
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.HighLowBands">
            <summary>
            High/Low Bands
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.MovingAverageEnvelope">
            <summary>
            Moving Average Envelope
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.SwingIndex">
            <summary>
            Swing Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.AccumulativeSwingIndex">
            <summary>
            Accumulative Swing Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ComparativeRelativeStrength">
            <summary>
            Comparative RSI
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.MassIndex">
            <summary>
            Mass Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.MoneyFlowIndex">
            <summary>
            Money Flow Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.NegativeVolumeIndex">
            <summary>
            Negative Volume Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.OnBalanceVolume">
            <summary>
            On Balance Volume
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.PositiveVolumeIndex">
            <summary>
            Positive Volume Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.RelativeStrengthIndex">
            <summary>
            Relative Strength Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.TradeVolumeIndex">
            <summary>
            Trade Volume Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.StochasticOscillator">
            <summary>
            Stochastic Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.StochasticMomentumIndex">
            <summary>
            Stochastic Momentum Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.FractalChaosOscillator">
            <summary>
            Fractal Chaos Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.PrimeNumberOscillator">
            <summary>
            Prime Number Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.PrimeNumberBands">
            <summary>
            Prime Number Bands
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.HistoricalVolatility">
            <summary>
            Historical Volatility
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.MACDHistogram">
            <summary>
            MACD Histogram
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.Ichimoku">
            <summary>
            Ichimoku Kinko Hyo
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ElderRayBullPower">
            <summary>
            Elder Ray Bull Power
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ElderRayBearPower">
            <summary>
            Elder Ray Bear Power
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.EhlerFisherTransform">
            <summary>
            Ehler's Fisher Transform
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ElderForceIndex">
            <summary>
            Elder Force Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ElderThermometer">
            <summary>
            Elder Thermometer
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.KeltnerChannel">
            <summary>
            Keltner Channel
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.StollerAverageRangeChannels">
            <summary>
            Stoller Average Range Channels
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.MarketFacilitationIndex">
            <summary>
            Market Facilitation Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.SchaffTrendCycle">
            <summary>
            Schaff Trend Cycle
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.QStick">
            <summary>
            QStick
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.CenterOfGravity">
            <summary>
            Center Of Gravity
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.CoppockCurve">
            <summary>
            Coppock Curve
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.ChandeForecastOscillator">
            <summary>
            Chande Forecast Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.GopalakrishnanRangeIndex">
            <summary>
            Gopalakrishnan Range Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.IntradayMomentumIndex">
            <summary>
            Intraday Momentum Index
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.KlingerVolumeOscillator">
            <summary>
            Klinger Volume Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.PrettyGoodOscillator">
            <summary>
            Pretty Good Oscillator
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.RAVI">
            <summary>
            RAVI
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.RandomWalkIndex">
            <summary>
            RandomWalkIndex
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.TwiggsMoneyFlow">
            <summary>
            Twiggs Money Flow
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.CustomIndicator">
            <summary>
            An indicator whos values are populated by the user
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorType.HighLowActivator">
            <summary>
            Indicador de High Low Activator
            </summary>
        </member>
        <member name="T:ModulusFE.SeriesTypeEnum">
            <summary>
            Series Types
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeEnum.stLineChart">
            <summary>
            Standard Line Chart
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeEnum.stVolumeChart">
            <summary>
            Volume Bar Chart
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeEnum.stStockBarChart">
            <summary>
            Bar Chart
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeEnum.stStockBarChartHLC">
            <summary>
            HLC Bar Chart
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeEnum.stCandleChart">
            <summary>
            Candle Chart
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeEnum.stIndicator">
            <summary>
            Indicator - used only internally
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeEnum.stUnknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:ModulusFE.PriceStyleEnum">
            <summary>
            Price Style
            </summary>
        </member>
        <member name="F:ModulusFE.PriceStyleEnum.psStandard">
            <summary>
            Standard
            </summary>
        </member>
        <member name="F:ModulusFE.PriceStyleEnum.psPointAndFigure">
            <summary>
            Point and Figure
            </summary>
        </member>
        <member name="F:ModulusFE.PriceStyleEnum.psRenko">
            <summary>
            Renko
            </summary>
        </member>
        <member name="F:ModulusFE.PriceStyleEnum.psKagi">
            <summary>
            Kagi
            </summary>
        </member>
        <member name="F:ModulusFE.PriceStyleEnum.psThreeLineBreak">
            <summary>
            Three Line Break
            </summary>
        </member>
        <member name="F:ModulusFE.PriceStyleEnum.psEquiVolume">
            <summary>
            Equivolume
            </summary>
        </member>
        <member name="F:ModulusFE.PriceStyleEnum.psEquiVolumeShadow">
            <summary>
            Equivolume Shadow
            </summary>
        </member>
        <member name="F:ModulusFE.PriceStyleEnum.psCandleVolume">
            <summary>
            Candle Volume
            </summary>
        </member>
        <member name="F:ModulusFE.PriceStyleEnum.psHeikinAshi">
            <summary>
            Heikin Ashi
            xClose = (Open+High+Low+Close)/4 - Average price of the current bar
            xOpen = [xOpen(Previous Bar) + Close(Previous Bar)]/2 - Midpoint of the previous bar
            xHigh = Max(High, xOpen, xClose) - Highest value in the set
            xLow = Min(Low, xOpen, xClose) - Lowest value in the set 
            </summary>
        </member>
        <member name="F:ModulusFE.PriceStyleEnum.psUnknown">
            <summary>
             Unknown
            </summary>
        </member>
        <member name="T:ModulusFE.ScalingTypeEnum">
            <summary>
            Scaling type
            </summary>
        </member>
        <member name="F:ModulusFE.ScalingTypeEnum.Linear">
            <summary>
            Linear
            </summary>
        </member>
        <member name="F:ModulusFE.ScalingTypeEnum.Semilog">
            <summary>
            Semi log
            </summary>
        </member>
        <member name="T:ModulusFE.ScaleAlignmentTypeEnum">
            <summary>
            Y scale alignment
            </summary>
        </member>
        <member name="F:ModulusFE.ScaleAlignmentTypeEnum.Left">
            <summary>
            Left side
            </summary>
        </member>
        <member name="F:ModulusFE.ScaleAlignmentTypeEnum.Right">
            <summary>
            Right side
            </summary>
        </member>
        <member name="F:ModulusFE.ScaleAlignmentTypeEnum.Both">
            <summary>
            Both sides (not yet supported)
            </summary>
        </member>
        <member name="T:ModulusFE.TickBoxPosition">
            <summary>
            Position of the tick box on Y axis
            </summary>
        </member>
        <member name="F:ModulusFE.TickBoxPosition.Left">
            <summary>
             Position tick box on Left Y axis if is visible
            </summary>
        </member>
        <member name="F:ModulusFE.TickBoxPosition.Right">
            <summary>
             Position tick box on Right Y axis if is visible
            </summary>
        </member>
        <member name="F:ModulusFE.TickBoxPosition.None">
            <summary>
             Tick box is invisible
            </summary>
        </member>
        <member name="T:ModulusFE.SeriesTypeOHLC">
            <summary>
            OHLC type of the series
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeOHLC.Open">
            <summary>
             Open 
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeOHLC.High">
            <summary>
             High
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeOHLC.Low">
            <summary>
             Low
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeOHLC.Close">
            <summary>
             Close
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeOHLC.Volume">
            <summary>
             Volume
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTypeOHLC.Unknown">
            <summary>
            Usually refers to indicators
            </summary>
        </member>
        <member name="T:ModulusFE.YGridStepType">
            <summary>
            Type of Y Scale calculation
            </summary>
        </member>
        <member name="F:ModulusFE.YGridStepType.NiceStep">
            <summary>
            Will calculate the Y axis step that is a multiplier of 1, 1.25, 1.5, 2, 5 standard numbers.
            While the step will be correct this type of calculation might lead into havinf a big gap between max series values
            and max value from Y axis.
            </summary>
        </member>
        <member name="F:ModulusFE.YGridStepType.MinimalGap">
            <summary>
            Will calculate the smalles possible step in order to fit best series into Y axis
            </summary>
        </member>
        <member name="T:ModulusFE.CalendarVersionType">
            <summary>
            There are two ways to display the calendar. Version2 is has more functionality, but may behave oddly in some
            circumstances
            </summary>
        </member>
        <member name="F:ModulusFE.CalendarVersionType.Version1">
            <summary>
            The older version of the calendar layout
            </summary>
        </member>
        <member name="F:ModulusFE.CalendarVersionType.Version2">
            <summary>
            The newer version of the calendar layout. It has some issues that may cause issues, but it also has a lot of 
            new functionality.
            </summary>
        </member>
        <member name="T:ModulusFE.CalendarLabelBlockOutputType">
            <summary>
            When the Calendar V2 outputs it label value to the screen there is a choice about which value to display.
            Each label defines a 'block' of data. The lable can display the timestamp for beginning of the block, or the 
            timestamp of the first valid existing piece of data within the block.
            </summary>
        </member>
        <member name="F:ModulusFE.CalendarLabelBlockOutputType.Beginning">
            <summary>
            The start datetime of the block
            </summary>
        </member>
        <member name="F:ModulusFE.CalendarLabelBlockOutputType.FirstValid">
            <summary>
            The first valid data point in the block
            </summary>
        </member>
        <member name="F:ModulusFE.CalendarLabelBlockOutputType.End">
            <summary>
            The end datetime of the block
            </summary>
        </member>
        <member name="T:ModulusFE.ChartPanel">
            <summary>
            ChartPanel - container for all series and line studies.
            </summary>
            <summary>
            ChartPanel - container for all series and line studies.
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.MaximizeBoxProperty">
            <summary>
             Gets or sets a value indicating whether the Maximize button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.MinimizeBoxProperty">
            <summary>
             Gets or sets a value indicating whether the Minimize button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.CloseBoxProperty">
            <summary>
             Gets or sets a value indicating whether the Close button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.ScalingTypeChangedEventsArgs">
            <summary>
            Provides <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> for property <see cref="P:ModulusFE.ChartPanel.ScalingType"/>
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.IncludeLineStudiesInSeriesMinMaxProperty">
            <summary>
            IncludeLineStudiesInSeriesMinMax
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.OnIncludeLineStudiesInSeriesMinMaxChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.ChartPanel.IncludeLineStudiesInSeriesMinMax"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.ChartPanel.AutoResetIncludeLineStudiesMinMaxProperty">
            <summary>
            AutoResetIncludeLineStudiesMinMax
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.OnAutoResetIncludeLineStudiesMinMaxChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.ChartPanel.AutoResetIncludeLineStudiesMinMax"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.ChartPanel.TitleBarBackgroundProperty">
            <summary>
            TitleBarBackground
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.OnTitleBarBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.ChartPanel.TitleBarBackground"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.ChartPanel.TitleBarButtonForegroundChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.Normalize(System.Double)">
            <summary>
            Normalizes a value between 1 and 0
            </summary>
            <param name="value">Value to be normalized</param>
            <returns>Normalized value</returns>
        </member>
        <member name="M:ModulusFE.ChartPanel.UnNormalize(System.Double)">
            <summary>
            Unscales a value and restores between max and min
            </summary>
            <param name="value">Value to be unnormalized</param>
            <returns>UnNormalized value</returns>
        </member>
        <member name="M:ModulusFE.ChartPanel.GetY(System.Double)">
            <summary>
            Returns Y pixel value by value from a series
            </summary>
            <param name="seriesValue">Price value</param>
            <returns>Y pixel</returns>
        </member>
        <member name="M:ModulusFE.ChartPanel.GetReverseY(System.Double)">
            <summary>
            Returns series value by Y pixel
            </summary>
            <param name="pixelValue">Pixel value</param>
            <returns>Price value</returns>
        </member>
        <member name="M:ModulusFE.ChartPanel.GetOHLCSeries(ModulusFE.Series@,ModulusFE.Series@,ModulusFE.Series@,ModulusFE.Series@)">
            <summary>
            Returns OHLC group of series from current panel
            Returns false if the group does not exist
            </summary>
            <param name="open">Reference to open series</param>
            <param name="high">Reference to high series</param>
            <param name="low">Reference to low series</param>
            <param name="close">Reference to close series</param>
            <returns>true - if OHLC group exists
            false - if OHLC doesn't exists</returns>
        </member>
        <member name="M:ModulusFE.ChartPanel.ResetYScale">
            <summary>
             Resets the Y scale
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.Minimize">
            <summary>
            Minimize the panel will only work if the panel is currently in the 'Normal' state
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.Maximize">
            <summary>
            Maximise the panel will only work if the panel is currently in the 'Normal' state
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.Restore">
            <summary>
            Return a minimized or maximized panel to the normal state.
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.YAxesBackgroundProperty">
            <summary>
            Gets or sets the background of Y axis
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel._minimizedRect">
            <summary>
            remembers the minimized rectangle, used for restoring panel with animation
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel._min">
            <summary>
            Actual min of all series (visible records only)
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel._max">
            <summary>
            Actual max of all series (visible records only)
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel._minChanged">
            <summary>
            Minimum from all series if panel is not resized with mouse, otherwise keeps th given values
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel._maxChanged">
            <summary>
            Maximum from all series if panel is not resized with mouse, otherwise keeps th given values
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel._yOffset">
            <summary>
            used when moving panel up and down
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel._needRePaint">
            <summary>
            when a panel gets created and a series is added to it its Template may not be loaded
            so, set a flag in Paint method and when template is loaded RePaint the panel
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel._shareScaleSeries">
            <summary>
            will ahve references to series that owns(shares) the Y scale
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.InitPanel(ModulusFE.StockChartX,ModulusFE.ChartPanel.PositionType)">
            <summary>
            Init
            </summary>
            <param name="chartX"></param>
            <param name="positionType"></param>
        </member>
        <member name="M:ModulusFE.ChartPanel.OnApplyTemplate">
            <summary>
            Ovveride
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.GetSeriesOHLCV(ModulusFE.Series,ModulusFE.SeriesTypeOHLC)">
            <summary>
            Gind a series with same name but different OHLCV type
            </summary>
            <param name="series">A series from OHLC group.</param>
            <param name="seriesTypeOHLC">Needed OHLCV type</param>
            <returns>Reference to a series or null</returns>
        </member>
        <member name="M:ModulusFE.ChartPanel.AddSeries(ModulusFE.Series)">
            <summary>
            Adds a series to internal collection
            </summary>
            <param name="series"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.ChartPanel.DeleteSeries(ModulusFE.Series)">
            <summary>
            Deletes a series from internal collection
            </summary>
            <param name="series"></param>
        </member>
        <member name="M:ModulusFE.ChartPanel.SetMaxMin">
            <summary>
            Get the max/min for scaling
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.MoveUpDown">
            <summary>
            this method will be called from timer, when user will press in Y axes the right mouse button
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.PaintXGrid">
            <summary>
            Paint X Grid
            Mainly called fron Calendar OnPaint, after it paints itself and prepares xGridMap
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.WatchTrendLines">
            <summary>
            updates only the visual presentation of he trendline
            actual penetration check happens within Series class
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanel.MoreSeriesTopOnClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This will not show the popup menu with LineStudies, instead will show them all on click
            </summary>
            <param name="sender"></param>
            <param name="routedEventArgs"></param>
        </member>
        <member name="M:ModulusFE.ChartPanel.MoreIndicatorPanelItemSelected(System.Boolean,System.Action)">
            <summary>
            </summary>
            <param name="closePopup"></param>
            <param name="toDo"></param>
        </member>
        <member name="M:ModulusFE.ChartPanel.CalculateIndicators">
            <summary>
             Initializes indicator calculation
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.MaximizeBox">
            <summary>
             Gets or sets a value indicating whether the Maximize button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.MinimizeBox">
            <summary>
             Gets or sets a value indicating whether the Minimize button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.CloseBox">
            <summary>
             Gets or sets a value indicating whether the Close button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.ScalingType">
            <summary>
            Gets or sets the ScalingType value.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.IncludeLineStudiesInSeriesMinMax">
            <summary>
            Gets or sets whether to analize the position of <see cref="T:ModulusFE.LineStudies.LineStudy"/> when getting min &amp; max to plot the Y axis
            By default only values from <see cref="T:ModulusFE.Series"/> are taken.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.AutoResetIncludeLineStudiesMinMax">
            <summary>
            Gets os sets whether the min &amp; max values from painted LineStudies will affect 
            the Y scale paiting after user chose to show all non-visible LineStudies.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.TitleBarBackground">
            <summary>
            Gets or sets the chartpanel's title bar background
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.TitleBarButtonForeground">
            <summary>
             Gets or sets the title bar button foreground (for all 3 buttons)
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.SideVolumeDepthBars">
            <summary>
            Gets or sets the number of side volume depths bars. 
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.PaintableHeight">
            <summary>
            Gets the paitable height of the panel or zero if template was not loaded yet.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.CurrentPrice">
            <summary>
            Gets the Y value from current mouse position
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.Title">
            <summary>
            Gets the title of the panel. The title is composed from names all all series &amp; indicators
            located on current panel
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.Visible">
            <summary>
            Gets or sets the visibility of the panel
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.TitleBarHeight">
            <summary>
            Gets the height of the panel's title bar
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.IndicatorsCollection">
            <summary>
            Gets a collection of all indicators from current panel
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.SeriesCollection">
            <summary>
            Gets a collection of all series from panel
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.Index">
            <summary>
            Gets index of the panel
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.Min">
            <summary>
            Gets minimum value from all series located in current panel
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.Max">
            <summary>
            Gets maximum value from all series located in current panel
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.SLMin">
            <summary>
            Gets minimum-logarithmic value from all series located in current panel
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.SLMax">
            <summary>
            Gets maximum-logarithmic value from all series located in current panel
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.StaticYScale">
            <summary>
            Gets if panel has staic Y scale. 
            static Y scale set to true means that min &amp; max values from all series
            will be ignored, instead users' min &amp; max values will be used to paint series.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.YAxisScalePrecision">
            <summary>
             Gets or sets the number of decimal digits used to paint the Y values. If set to null then
             the number of decimals are set to 0 if panel has a volume series, or number of decimals
             is taken from <see cref="P:ModulusFE.StockChartX.ScalePrecision"/>
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.FormatYValueString">
            <summary>
            Gets formating string that will be used to format values on Y axis
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.HasOHLC">
            <summary>
            Gets if current panel has an OHLC group of series
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.IsHeatMap">
            <summary>
            Gets true if current panel is a heat-map
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.LineStudiesCollection">
            <summary>
             Gets the collection of LineStudies from current panel
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.YAxesBackground">
            <summary>
            Gets or sets the background of Y axis
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.MoreIndicatorPanel">
            <summary>
             Gets or sets the control that will show the elements when user clicks on more indicator
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.CurrentYScaleStep">
            <summary>
             Gets the current Y scale step
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.YAxisPostFix">
            <summary>
            Gets or sets the post text for each value in Y axis
            </summary>
        </member>
        <member name="E:ModulusFE.ChartPanel.PropertyChanged">
            <summary>
             Invoked when a property changes
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanel.ChartPanelLabel">
            <summary>
             A TextBlock associated with every panel on chart. Used at user's discretion
            </summary>
        </member>
        <member name="T:ModulusFE.ChartPanel.PositionType">
            <summary>
            Position type of the chart.
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.PositionType.AlwaysTop">
            <summary>
            Always top. Panel can't be moved under a panel that has no AlwaysTop type
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.PositionType.AlwaysBottom">
            <summary>
            Always bottom - usually used for Volume panels
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.PositionType.None">
            <summary>
            Arbitrary postion
            </summary>
        </member>
        <member name="T:ModulusFE.ChartPanel.StateType">
            <summary>
            The current state of the panel. Usually used for Maximized, Minimized and Normal.
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.StateType.Normal">
            <summary>
            Standard State. A panel in the chart control
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.StateType.Maximized">
            <summary>
            When the panel takes over the entire control area
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.StateType.Minimized">
            <summary>
            When the panel is minimized to the bottom bar
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.StateType.New">
            <summary>
            used when adding new panels, after this it becomes Normal
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.StateType.Resizing">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanel.StateType.Moving">
            <summary>
            Used internally
            </summary>
        </member>
        <member name="T:ModulusFE.ChartElementProperties.ComboBoxPropertyPresenter">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.ChartElementProperties.IValuePresenter">
            <summary>
             Interface for value presenters
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.IValuePresenter.Value">
            <summary>
             Gets or sets the value
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.IValuePresenter.Control">
            <summary>
             Gets the control that will show the value
            </summary>
        </member>
        <member name="M:ModulusFE.ChartElementProperties.ComboBoxPropertyPresenter.#ctor(System.Collections.IEnumerable)">
            <summary>
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.ComboBoxPropertyPresenter.Value">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.ComboBoxPropertyPresenter.Control">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.TwiggsMoneyFlow">
            <summary>
            Twiggs Money Flow by Colin Twiggs is based on the Chaikin Money Flow index. The indicator warns of breakouts and provides trend confirmations.
            The indicator is based on the observation that bullish markets are normally signaled by increased volume along with bar closes above the median of each bar.
            Likewise, bearish markets are normally signaled by increased volume along with bar closes below the median of each bar.
            </summary>
            <remarks>Twiggs Money Flow signals accumulation when above zero and distribution when below zero.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.TwiggsMoneyFlow.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.TwiggsMoneyFlow.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="M:ModulusFE.Utils.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend or Visual Studio).
            </summary>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:ModulusFE.Utils.IsInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="M:ModulusFE.Utils.Encrypt(System.String,System.String)">
            <summary> 
            Encrypt the data 
            </summary> 
            <param name="input">String to encrypt</param>
            <param name="password">Password used for encryption </param>
            <returns>Encrypted string</returns> 
        </member>
        <member name="M:ModulusFE.Utils.Decrypt(System.String,System.String)">
            <summary> 
            Decrypt a string 
            </summary> 
            <param name="input">Input string in base 64 format</param>
            <param name="password">Password for decryption</param>
            <returns>Decrypted string</returns> 
        </member>
        <member name="T:ModulusFE.PaintObjects.Types">
            <summary>
             Extra types used in library
            </summary>
        </member>
        <member name="T:ModulusFE.PaintObjects.Types.RectEx">
            <summary>
            Used instead of standard Rectangle, cause standard one has too many checks against negative Width &amp; Height
            </summary>
        </member>
        <member name="F:ModulusFE.PaintObjects.Types.RectEx.Left">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.PaintObjects.Types.RectEx.Top">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.PaintObjects.Types.RectEx.Right">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.PaintObjects.Types.RectEx.Bottom">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.PaintObjects.Types.RectEx.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Ctor
            </summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="M:ModulusFE.PaintObjects.Types.RectEx.Normalize">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.PaintObjects.Types.RectEx.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.PaintObjects.Types.RectEx.MainDiagonalPolygon(System.Double)">
            <summary>
            </summary>
            <param name="thickness"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.PaintObjects.Types.RectEx.PointOnMainDiagonal(System.Windows.Point,System.Int32)">
            <summary>
            </summary>
            <param name="p"></param>
            <param name="strokeThickness"></param>
            <returns></returns>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.Empty">
            <summary>
             Empty rectangle
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.Width">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.Height">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.IsZero">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.TopLeft">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.TopRight">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.BottomLeft">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.BottomRight">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.TopCenter">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.BottomCenter">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.MiddleLeft">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PaintObjects.Types.RectEx.MiddleRight">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.EventArgs`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ModulusFE.EventArgs`1.#ctor(`0)">
            <summary>
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:ModulusFE.EventArgs`1.Data">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.DataBindingExtensions">
            <summary>
            Provides extension methods for dealing with <see cref="T:System.Windows.Data.Binding"/> objects
            </summary>
        </member>
        <member name="M:ModulusFE.DataBindingExtensions.CreateOneWayBinding(System.ComponentModel.INotifyPropertyChanged,System.String)">
            <summary>
            Creates a new <see cref="T:System.Windows.Data.Binding"/> using <paramref name="bindingSource"/> as the <see cref="P:System.Windows.Data.Binding.Source"/>
            and <paramref name="propertyPath"/> as the <see cref="P:System.Windows.Data.Binding.Path"/>.
            </summary>
            <param name="bindingSource">The object to use as the new binding's <see cref="P:System.Windows.Data.Binding.Source"/>.</param>
            <param name="propertyPath">The property path to use as the new binding's <see cref="P:System.Windows.Data.Binding.Path"/>.</param>
            <returns>A new <see cref="T:System.Windows.Data.Binding"/> object.</returns>
        </member>
        <member name="M:ModulusFE.DataBindingExtensions.CreateOneWayBinding(System.ComponentModel.INotifyPropertyChanged,System.String,System.Windows.Data.IValueConverter)">
            <summary>
            Creates a new <see cref="T:System.Windows.Data.Binding"/> using <paramref name="bindingSource"/> as the <see cref="P:System.Windows.Data.Binding.Source"/>,
            <paramref name="propertyPath"/> as the <see cref="P:System.Windows.Data.Binding.Path"/>,
            and <paramref name="converter"/> as the <see cref="P:System.Windows.Data.Binding.Converter"/>.
            </summary>
            <param name="bindingSource">The object to use as the new binding's <see cref="P:System.Windows.Data.Binding.Source"/>.</param>
            <param name="propertyPath">The property path to use as the new binding's <see cref="P:System.Windows.Data.Binding.Path"/>.</param>
            <param name="converter">The converter to use as the new binding's <see cref="P:System.Windows.Data.Binding.Converter"/>.</param>
            <returns>A new <see cref="T:System.Windows.Data.Binding"/> object.</returns>
        </member>
        <member name="M:ModulusFE.DataBindingExtensions.CreateCopy(System.Windows.Data.Binding)">
            <summary>
            Creates a new <see cref="T:System.Windows.Data.Binding"/> object by copying all properties
            from another <see cref="T:System.Windows.Data.Binding"/> object.
            </summary>
            <param name="binding"><see cref="T:System.Windows.Data.Binding"/> from which property values will be copied</param>
            <returns>A new <see cref="T:System.Windows.Data.Binding"/> object.</returns>
        </member>
        <member name="T:ModulusFE.LineStudies.FibonacciTimeZones">
            <summary>
            Fibonacci Time Zones line study
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.FibonacciTimeZones.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciTimeZones.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciTimeZones.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciTimeZones.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciTimeZones.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciTimeZones.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciTimeZones.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciTimeZones.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.WellesWilderSmoothing">
            <summary>
            The Welles Wilder's Smoothing indicator is similar to an exponential moving average. The indicator does not use the standard exponential moving average formula. Welles Wilder described 1/14 of today's data + 13/14 of yesterday's average as a 14-day exponential moving average.
            </summary>
            <remarks>This indicator is used in a the manner that any other moving average would be used.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.WellesWilderSmoothing.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.WellesWilderSmoothing.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.TypicalPrice">
            <summary>
            A Typical Price is simply an average of one period’s high, low and close values.
            </summary>
            <remarks>A Typical Price is often used as an alternative way of viewing price action, and also as a component for calculating other indicators.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.TypicalPrice.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.TypicalPrice.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.TwinIndicator">
            <summary>
            this type of indicator is used when an indicator has more than one lines
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.LinearRegressionForecast">
            <summary>
            Linear regression is a common statistical method used to forecast values using least squares fit.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.LinearRegressionForecast.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.LinearRegressionForecast.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.HighLowActivator">
            <summary>
            The Simple Moving Average is simply an average of values over a specified period of time.
            </summary>
            <remarks>A Moving Average is most often used to average values for a smoother representation of the underlying price or indicator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.HighLowActivator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.HighLowActivator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.DataManager.AppendTickVolumeBehavior">
            <summary>
            Gets the operation for volume tick appending
            </summary>
        </member>
        <member name="F:ModulusFE.DataManager.AppendTickVolumeBehavior.Increment">
            <summary>
            With every tick volume value is incremented by the new passed value
            </summary>
        </member>
        <member name="F:ModulusFE.DataManager.AppendTickVolumeBehavior.Change">
            <summary>
            At every tick the current volume value is replaced by the new one
            </summary>
        </member>
        <member name="F:ModulusFE.DataManager.DataManager._tickValues">
            <summary>
            Contains tick values for all symbols on chart
            </summary>
        </member>
        <member name="F:ModulusFE.DataManager.DataManager._timestamps">
            <summary>
            This list will have all the timestamps involved in the chart, series will have only a list of doubles to keep their values
            </summary>
        </member>
        <member name="F:ModulusFE.DataManager.DataManager._seriesToIndex">
            <summary>
            Holds series indexes by their OHLC type and name
            </summary>
        </member>
        <member name="M:ModulusFE.DataManager.DataManager.AppendValue(System.String,ModulusFE.SeriesTypeOHLC,System.DateTime,System.Nullable{System.Double})">
            <summary>
            Appends a value to a series
            </summary>
            <param name="seriesName"></param>
            <param name="ohlcType"></param>
            <param name="timeStamp"></param>
            <param name="value"></param>
        </member>
        <member name="M:ModulusFE.DataManager.DataManager.GetTimeStampIndex(System.DateTime)">
            <summary>
            
            </summary>
            <param name="timestamp"></param>
            <returns>index of the timestamp, -1 is such a timestamp doesn't exists</returns>
        </member>
        <member name="M:ModulusFE.DataManager.DataManager.GetTimeStampIndex(System.DateTime,System.Boolean)">
            <summary>
            Returns an aproximated record index for a given timeStamp.
            Usefull when an exact timestamp is unknown
            </summary>
            <param name="timestamp"></param>
            <param name="roundUp">
            if true - returns the next recordCount that has a value greater then given timestamp
            if false - returns the previos recordCount that has a value less then given timestamp
            </param>
            <returns>Timestamp index, -1 if no such aproximate value</returns>
        </member>
        <member name="M:ModulusFE.DataManager.DataManager.GetTimeStampByIndex(System.Int32)">
            <summary>
            Returns TimeStamp by index. 
            If index is out of range it returns DateTime.MinValue
            Doesn't take care of chartX._startIndex
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.DataManager.DataManager.MinMaxFromInterval(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Int32,System.Double@,System.Double@)">
            <summary>
            Returns min &amp; max for a given interval for needed series. 
            Does not check the validity of interval!!!
            </summary>
            <param name="seriesIdxs"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:ModulusFE.DataManager.DataManager.MinMaxFromIndex(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Double@,System.Double@)">
            <summary>
            Gets the min &amp; max values from all supplied series for a given X index
            </summary>
            <param name="seriesIdx"></param>
            <param name="index"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:ModulusFE.DataManager.DataManager.OffsetTimestamps(System.TimeSpan)">
            <summary>
            Will offset all the timestamps in chart by a given offset
            </summary>
            <param name="offset"></param>
        </member>
        <member name="T:ModulusFE.Data.DataEntry">
            <summary>
            Provides information about values stored in a series
            </summary>
        </member>
        <member name="M:ModulusFE.Data.DataEntry.#ctor(System.Nullable{System.Double})">
            <summary>
             Initializes a new instance of the <seealso cref="T:ModulusFE.Data.DataEntry"/> class.
            </summary>
            <param name="value">Value</param>
        </member>
        <member name="P:ModulusFE.Data.DataEntry.Index">
            <summary>
             Gets the index of data entry
            </summary>
        </member>
        <member name="P:ModulusFE.Data.DataEntry.SeriesOwner">
            <summary>
             Gets the reference to the owener-series
            </summary>
        </member>
        <member name="P:ModulusFE.Data.DataEntry.Value">
            <summary>
             Gets or sets the value
            </summary>
        </member>
        <member name="P:ModulusFE.Data.DataEntry.TimeStamp">
            <summary>
             Gets the timestamp 
            </summary>
        </member>
        <member name="T:ModulusFE.Data.DataEntryCollection">
            <summary>
             Collection of data<seealso cref="T:ModulusFE.Data.DataEntry"/>
            </summary>
        </member>
        <member name="T:ModulusFE.Controls.ChartScrollerExHandle">
            <summary>
            Scroller handle
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerExHandle.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerExHandle.StrokeProperty">
            <summary>
            Identifies the <see cref="P:ModulusFE.Controls.ChartScrollerExHandle.Stroke"/> dependency property 
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerExHandle.StrokeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerExHandle.Stroke">
            <summary>
            Gets or sets the stroke color. This is a  dependency property.
            </summary>
        </member>
        <member name="T:ModulusFE.ChartPanelsDivider">
            <summary>
            Used to show the divider when resizing panels
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelsDivider.#ctor">
            <summary>
             ctor
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanelsDivider.ActualWidthExProperty">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelsDivider.OnActualWidthExChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:ModulusFE.ChartPanelsDivider.ActualWidthEx">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.ChartElementProperties.IChartElementProperty">
            <summary>
             Defines the interface for property for elements that implements <see cref="T:ModulusFE.ChartElementProperties.IChartElementPropertyAble"/> interface
            </summary>
        </member>
        <member name="M:ModulusFE.ChartElementProperties.IChartElementProperty.Validate(System.Text.StringBuilder)">
            <summary>
             Validates the value
            </summary>
            <param name="sb">Will have the error message if validation fails</param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.ChartElementProperties.IChartElementProperty.InvokeSetChatElementPropertyValue">
            <summary>
             Invoke the event for property vlaue changed
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.IChartElementProperty.Title">
            <summary>
             Gets the property title
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.IChartElementProperty.ValuePresenter">
            <summary>
             Gets the value presenter for this property
            </summary>
        </member>
        <member name="E:ModulusFE.ChartElementProperties.IChartElementProperty.SetChartElementPropertyValue">
            <summary>
             Event raised when a property value has been changed
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX">
            <summary>
            Represents the chart. It works as a container for all panels.
            </summary>
            <summary>
            Represents the chart. It works as a container for all panels.
            </summary>
            <summary>
            Defines methods that handle scrolling and zoomming
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.Save">
            <summary>
            Save's the chart into a binary data
            </summary>
            <returns>The byte array of data to be saves as the user wishes</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.SaveFile(ModulusFE.StockChartX.SerializationTypeEnum)">
            <summary>
             Save's the chart into a binary data
            </summary>
            <param name="serializationType">Type of serialization to use.</param>
             <returns>The byte array of data to be saves as the user wishes</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.LoadFile(System.Byte[])">
            <summary>
            Deserialize a chart from binary data
            </summary>
            <param name="data"></param>
            <returns>
            0 - no errors
            -1 - root element is null
            -2 - wrong serialization type
            -3 - un-supported serialization type
            -4 - un-supported version of file
            -5 - unknown exception
            </returns>
        </member>
        <member name="M:ModulusFE.StockChartX.LoadFile(System.Byte[],ModulusFE.StockChartX.SerializationTypeEnum)">
            <summary>
            Deserialize a chart from binary data
            </summary>
            <param name="data"></param>
            <param name="serializationType">Serialization type</param>
            <returns>
            0 - no errors
            -1 - root element is null
            -2 - wrong serialization type
            -3 - un-supported serialization type
            -4 - un-supported version of file
            -5 - unknown exception
            </returns>
        </member>
        <member name="F:ModulusFE.StockChartX.ParamsWithSeriesName">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ThreeDStyleChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ScalingTypeChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.UpColorChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.DownColorChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.LeftChartSpaceChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.RightChartSpaceChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.RealTimeXLabelsChangedEventsArgs">
            <summary>
            when true X axis will display data suitable for real-time mode
            NOTE: Only valid for Calendar Version 1
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ScalePrecisionChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.KeepZoomLevelChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.VolumeDivisorChangedEventsArgs">
            <summary>
             Gets or sets the divider for Volume values
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.HorizontalLineValuePresenterTemplateProperty">
            <summary>
            HorizontalLineValuePresenterTemplate
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnHorizontalLineValuePresenterControlTemplateChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.SeriesTickBoxValuePresenterTemplateProperty">
            <summary>
            SeriesTickBoxValuePresenterTemplate
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnSeriesTickBoxValuePresenterTemplateChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartPanelMoreIndicatorTemplateProperty">
            <summary>
            ChartPanelMoreIndicatorTemplate
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnChartPanelMoreIndicatorTemplateChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.AddHolderProperty">
            <summary>
            AddHolder
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnAddHolderChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.AddHolderTemplateProperty">
            <summary>
            AddHolderTemplate
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnAddHolderTemplateChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.AddHolderMarginProperty">
            <summary>
            AddHolderMargin
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnAddHolderMarginChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX._isBeta">
            <summary>
            will be turned off when release
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX._xGridMap">
            <summary>
            it will hold the X coordinate value for any visible record on screen. 
            used to paint x Grid
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX._barBrushes">
            <summary>
            Series name, candle index - Brush
            if series name not passe, take from string.empty
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX._textLabelTitle">
            <summary>
            used to show an arbitraty text in any position of the chart
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.#ctor">
            <summary>
             Initializes a new instance of the <seealso cref="T:ModulusFE.StockChartX"/> class.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnApplyTemplate">
            <summary>
            Ovveride
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.GetReverseXInternal(System.Double)">
            <summary>
            Gets record by pixel value
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetBarBrush(System.String,System.Int32,System.Windows.Media.Brush)">
            <summary>
            returns a brush for a specified by index candle. this function is used toghether with BarColor public function.
            </summary>
            <param name="seriesName"></param>
            <param name="barIndex"></param>
            <param name="defaultBrush"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetBytes(ModulusFE.StockChartX.ImageExportType)">
            <summary>
            Returns a raw byte array of image
            </summary>
            <param name="exportType"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.StockChartX.SaveToFile(ModulusFE.StockChartX.ImageExportType)">
            <summary>
            Save image to a local filename
            </summary>
            <param name="exportType"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetBytesAsExportType(ModulusFE.StockChartX.ImageExportType)">
            <summary>
            Save image to a local filename
            </summary>
            <param name="exportType"></param>
            <returns></returns>
        </member>
        <member name="F:ModulusFE.StockChartX.ShowAnimationsProperty">
            <summary>
            Gets os sets the value indicating whether the animations will be shown or not. 
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.YGridProperty">
            <summary>
            Gets or sets the visibility of Y grid
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.XGridProperty">
            <summary>
            Gets or sets the visibility of X grid
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.GridStrokeProperty">
            <summary>
             Gets or sets the <seealso cref="T:System.Windows.Media.Brush"/> that specifies how grid lines are painted
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.HorizontalGridLinePatternProperty">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.VerticalGridLinePatternProperty">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ScaleAlignmentProperty">
            <summary>
             Gets or sets the value that deermines what Y axis is shown
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.CrossHairsProperty">
            <summary>
             Gets or sets the visibility of crosshairs lines
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.CrossHairsStrokeProperty">
            <summary>
            Gets or sets the color of crosshairs lines
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.CrossHairsPositionProperty">
            <summary>
            Gets or sets the location of crosshairs lines
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.DisplayTitlesProperty">
            <summary>
             Gets or sets the value indicator whether to display panels titles or not.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.PanelMinHeightProperty">
            <summary>
             Gets or sets the minimum height of the chart panels
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.IndicatorDialogBackgroundProperty">
            <summary>
             Gets or sets the <seealso cref="T:System.Windows.Media.Brush"/> used as background for indicators dialog.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.IndicatorDialogLabelForegroundProperty">
            <summary>
            IndicatorDialogLabelForeground
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnIndicatorDialogLabelForegroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.IndicatorDialogLabelFontSizeProperty">
            <summary>
            IndicatorDialogLabelFontSize
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnIndicatorDialogLabelFontSizeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.IndicatorTwinTitleVisibilityProperty">
            <summary>
            Property variable for <see cref="P:ModulusFE.StockChartX.IndicatorTwinTitleVisibility"/>
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.VolumePostfixLetterProperty">
            <summary>
            Gets or sets the postfix letter used on to display volume in millions (e.g. you want to show 5,200,000 as "5.2 M" in the Y scale). 
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.InfoPanelLabelsBackgroundProperty">
            <summary>
             Gets or sets the background <seealso cref="T:System.Windows.Media.Brush"/> of infopanel's labels.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.InfoPanelLabelsForegroundProperty">
            <summary>
             Gets or sets the foreground <seealso cref="T:System.Windows.Media.Brush"/> of infopanel's labels.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.InfoPanelValuesBackgroundProperty">
            <summary>
             Gets or sets the background <seealso cref="T:System.Windows.Media.Brush"/> of infopanel's values.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.InfoPanelValuesForegroundProperty">
            <summary>
             Gets or sets the foreground <seealso cref="T:System.Windows.Media.Brush"/> of infopanel's values.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.InfoPanelFontFamilyProperty">
            <summary>
             Gets or sets the preferred top-level font family for the textblock used in info panel.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.InfoPanelFontSizeProperty">
            <summary>
             Gets or sets the preferred top-level font size for the textblock used in info panel.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.InfoPanelPositionProperty">
            <summary>
             Gets or sets the positioning type of info panel.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.HeatPanelLabelsForegroundProperty">
            <summary>
             Gets or sets the <seealso cref="T:System.Windows.Media.Brush"/> to apply to labels in heat panel.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.HeatPanelLabelsBackgroundProperty">
            <summary>
             Gets or sets the <seealso cref="T:System.Windows.Media.Brush"/> to apply to labels background
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.HeatPanelLabelsFontSizeProperty">
            <summary>
             Gets or sets the font-size for labels used in heat-panel
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartScrollerVisibleProperty">
            <summary>
            IsChartScrollerVisible
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnChartScrollerVisibleChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartScrollerTrackBackgroundProperty">
            <summary>
            ChartScrollerTrackBackground
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnChartScrollerTrackBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartScrollerTrackButtonsBackgroundProperty">
            <summary>
            ChartScrollerTrackButtonsBackground
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnChartScrollerTrackButtonsBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartScrollerThumbButtonBackgroundProperty">
            <summary>
            ChartScrollerThumbButtonBackground
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnChartScrollerThumbButtonBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartScrollerPropertiesProperty">
            <summary>
            Identifies the <see cref="P:ModulusFE.StockChartX.ChartScrollerProperties"/> dependency property 
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.AppendTickVolumeBehaviorProperty">
            <summary>
            AppendTickVolumeBehavior
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnAppendTickVolumeBehaviorChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.StockChartX.LineStudyPropertyDialogBackgroundProperty">
            <summary>
             Gets or sets the background for the dialog properties if LineStudy objects
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.MaxVisibleRecordsProperty">
            <summary>
            MaxVisibleRecords
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnMaxVisibleRecordsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.StockChartX.MaxVisibleRecords"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.StockChartX.CalendarBackgroundProperty">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ShowSecondsProperty">
            <summary>
            ShowSeconds
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnShowSecondsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.StockChartX.ShowSeconds"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.StockChartX.CalendarVersionProperty">
            <summary>
            CalendarVersion
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnCalendarVersionChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.StockChartX.CalendarVersion"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.StockChartX.CalendarV2LabelGapProperty">
            <summary>
            CalendarV2LabelGap
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnCalendarV2LabelGapChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.StockChartX.CalendarVersion"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.StockChartX.CalendarV2CalendarLabelBlockOutputProperty">
            <summary>
            CalendarV2CalendarLabelBlockOutput
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnCalendarV2CalendarLabelBlockOutputChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.StockChartX.CalendarVersion"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.StockChartX.CalendarV2CurrentTimeStampProperty">
            <summary>
            CalendarV2CurrentTimeStamp
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.OnCalendarV2CurrentTimeStampChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.StockChartX.CalendarV2CurrentTimeStamp"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.StockChartX.URILicenseKeyProperty">
            <summary>
            Identifies the <see cref="P:ModulusFE.StockChartX.URILicenseKey"/> dependency property 
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.Freeze">
            <summary>
             Makes chart do not update itself when changing public visual properties, such as FirstVisibleRecord
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.Melt">
            <summary>
             Makes chart to update itself
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.Update">
            <summary>
            Forces to invalidate the chart
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.AddIndicator(ModulusFE.IndicatorType,System.String,ModulusFE.ChartPanel,System.Boolean)">
            <summary>
            Adds an indicator to a specified panel
            </summary>
            <param name="indicatorType">Indicator type</param>
            <param name="key">An unique key for indicator</param>
            <param name="chartPanel">a valid reference to a panel</param>
            <param name="userParams">true - the indicator parameters will be set by code
            false - indicator will show a dialog where user will choose its parameters</param>
            <returns>a reference to an indicator object</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddIndicator(ModulusFE.IndicatorType,System.String,ModulusFE.ChartPanel,System.Boolean,System.Boolean)">
            <summary>
            Adds an indicator to a specified panel
            </summary>
            <param name="indicatorType">Indicator type</param>
            <param name="key">An unique key for indicator</param>
            <param name="chartPanel">a valid reference to a panel</param>
            <param name="userParams">true - the indicator parameters will be set by code
            false - indicator will show a dialog where user will choose its parameters</param>
            <param name="ignoreErrors"></param>
            <returns>a reference to an indicator object</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.IsOverlayIndicator(ModulusFE.IndicatorType)">
            <summary>
             By indicator name suggests eother to create a new panel or not. Some indicators have values way different then series and it's recomended to create different panels for them.
            </summary>
            <param name="indicatorType">Indicator type</param>
            <returns>true - it is recomended to create a new panel for indicator.</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddLineStudy(ModulusFE.LineStudies.LineStudy.StudyTypeEnum,System.String,System.Windows.Media.Brush,System.Int32,System.Object[])">
            <summary>
            Initiates a line study painted by code
            </summary>
            <param name="studyTypeEnum">Study type</param>
            <param name="key">Unique key</param>
            <param name="stroke">Brush used to paint the lines</param>
            <param name="panelIndex">Panel index where to place line study</param>
            <param name="args">mainly used for ImageObject when setting image path</param>
            <returns>Reference to newly created line study</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddLineStudy(ModulusFE.LineStudies.LineStudy.StudyTypeEnum,System.String,System.Windows.Media.Brush,System.Object[])">
            <summary>
            Initiates a line study painted by user
            </summary>
            <param name="studyTypeEnum">Study type</param>
            <param name="key">Unique key</param>
            <param name="stroke">Brush used to paint the lines</param>
            <param name="args">mainly used for ImageObject when setting image path</param>
            <returns>Reference to newly created line study</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddStaticText(System.String,System.String,System.Windows.Media.Brush,System.Double,System.Int32)">
            <summary>
            Adds a static text and lets user position it at needed position
            </summary>
            <param name="staticText">A user defined text</param>
            <param name="key">Unique key</param>
            <param name="foreground">Foreground Brush</param>
            <param name="fontSize">Font size</param>
            <param name="panelIndex">Panel index where to place the text</param>
            <returns>Reference to <seealso cref="T:ModulusFE.LineStudies.StaticText"/> object</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddSymbolObject(ModulusFE.SymbolType,System.String,System.Int32)">
            <summary>
            Initiates a symbol object placed by user by  user
            </summary>
            <param name="symbolType">Symbol type</param>
            <param name="key">Unique key</param>
            <param name="panelIndex">Panel index where to place the symbol object</param>
        </member>
        <member name="M:ModulusFE.StockChartX.AddSymbolObject(ModulusFE.SymbolType,System.String)">
            <summary>
             Initiates a symbol object placed by user by  user
            </summary>
             <param name="symbolType">Symbol type</param>
             <param name="key">Unique key</param>
        </member>
        <member name="M:ModulusFE.StockChartX.CreateLineStudy(ModulusFE.LineStudies.LineStudy.StudyTypeEnum,System.String,System.Windows.Media.Brush,System.Int32)">
            <summary>
            Adds a line study programmatically
            </summary>
            <param name="stroke">Brush used to paint line study</param>
            <param name="studyTypeEnum">Study type</param>
            <param name="key">Unique key</param>
            <param name="panelIndex">Panel index where to place line study</param>
            <returns>A reference to the line study created</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.CreateLineStudy(ModulusFE.LineStudies.LineStudy.StudyTypeEnum,System.String,System.Windows.Media.Brush,System.Int32,System.Object[])">
            <summary>
            Adds a line study programmatically
            </summary>
            <param name="stroke">Brush used to paint line study</param>
            <param name="studyTypeEnum">Study type</param>
            <param name="key">Unique key</param>
            <param name="panelIndex">Panel index where to place line study</param>
            <param name="args">Optional parameters to be passed to LineStudy</param>
            <returns>A reference to the line study created</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.CreateSymbolObject(ModulusFE.SymbolType,System.String,System.Int32,System.Windows.Size)">
            <summary>
            Adds a symbol object programmatically
            </summary>
            <param name="symbolType">Symbol type</param>
            <param name="key">Unique key</param>
            <param name="panelIndex">Panel index where to place symbol object</param>
            <param name="size"></param>
            <returns>Reference to symbol object created.</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetTextWidth(System.String)">
            <summary>
            Gets the width of a text including white spaces using current font properties
            </summary>
            <param name="text">Text</param>
            <returns>Width</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetTextHeight(System.String)">
            <summary>
            Gets the height of a text using current font properties
            </summary>
            <param name="text">Text</param>
            <returns>Height</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetSeriesOHLCV(ModulusFE.Series,ModulusFE.SeriesTypeOHLC)">
            <summary>
             Gets a series from an OHLC group by a given OHLC type and another series from this group.
            </summary>
            <param name="series">Series base</param>
            <param name="seriesTypeOHLC">OHLC type</param>
            <returns>Reference to needed series or null</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetMaxValue(ModulusFE.Series)">
            <summary>
            Gets maximum value for a series
            </summary>
            <param name="series">Reference to <seealso cref="T:ModulusFE.Series"/></param>
            <returns>Maximum value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetMaxValue(System.String)">
            <summary>
            Gets maximum value for a series
            </summary>
            <param name="seriesName">Series name</param>
            <returns>Maximum value or null if series doesn't exists</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetVisibleMaxValue(ModulusFE.Series)">
            <summary>
            Gets the maximum visible value for a series
            </summary>
            <param name="series">Reference to <seealso cref="T:ModulusFE.Series"/></param>
            <returns>Maximum value from visible records</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetVisibleMaxValue(System.String)">
            <summary>
            Gets the maximum visible value for a series
            </summary>
            <param name="seriesName">Series name</param>
            <returns>Maximum value from visible records></returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetMinValue(ModulusFE.Series)">
            <summary>
            Gets minimum value for a series
            </summary>
            <param name="series">Reference to <seealso cref="T:ModulusFE.Series"/></param>
            <returns>Miniumu value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetMinValue(System.String)">
            <summary>
            Gets minimum value for a series
            </summary>
            <param name="seriesName">Series name</param>
            <returns>Minimum value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetVisibleMinValue(ModulusFE.Series)">
            <summary>
            Gets the minimum visible value for a series
            </summary>
            <param name="series">Reference to <seealso cref="T:ModulusFE.Series"/></param>
            <returns>Minimum value from visible records</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetVisibleMinValue(System.String)">
            <summary>
            Gets the minimum visible value for a series
            </summary>
            <param name="seriesName">Series name</param>
            <returns>Minimum value from visible records</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddChartPanel">
            <summary>
             Adds a new chart panel and Gets a reference to it. Position type is None
            </summary>
            <returns>Reference to the newly created chart panel</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddChartPanel(ModulusFE.ChartPanel.PositionType)">
            <summary>
             Adds a chart panel with a specified type of positioning
            </summary>
            <param name="position">Position type</param>
            <returns>Reference to the newly created chart panel</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddHeatMapPanel">
            <summary>
             Adds a panel that will show the heat map panel. Such a panel can't hold any series or line studies.
             Only one instance of heat map can exists
            </summary>
            <returns>Reference to the newly created chart panel</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.DeleteHeatMap">
            <summary>
             Destroys the heap map panel
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.GetSeriesByName(System.String)">
            <summary>
             Gets a reference to a series by its name or null if such series doesn't exists
            </summary>
            <param name="seriesName">Series name</param>
             <example>
             <code>
             Series seriesOpen = _stockChartX.GetSeriesByName(_stockChartX.Symbol + ".open");
             </code>
             </example>
            <returns>Reference to series</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetPanelByIndex(System.Int32)">
            <summary>
            Gets a panel by its index. ignores panels that have heat map
            </summary>
            <param name="index">Panel Index</param>
            <returns>Reference to ChartPanel</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetIndicatorCountByType(ModulusFE.IndicatorType)">
            <summary>
            Gets the total number of indicator of a specified type
            </summary>
            <param name="indicatorType">Indicator type</param>
            <returns>Number of indicator that matches given indicator type</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetLineStudyCountByType(ModulusFE.LineStudies.LineStudy.StudyTypeEnum)">
            <summary>
            Gets the total number of line studies from the chart by its type
            </summary>
            <param name="studyTypeEnum">Study type</param>
            <returns>Number of line studies that matches the given study type</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.SetPriceStyleParam(System.Int32,System.Double)">
            <summary>
             Sets the parameter for a price style.
            </summary>
            <param name="index">Index of parameter</param>
            <param name="value">New value</param>
             <example>
             <code>
             _stockChartX.SetPriceStyleParam(0, 0); //Reversal size
             _stockChartX.SetPriceStyleParam(1, (double)StockChartX.ChartDataType.Points);
             </code>
             </example>
        </member>
        <member name="M:ModulusFE.StockChartX.GetPriceStyleParam(System.Int32)">
            <summary>
            Gets the value of a parameter for current price style
            </summary>
            <param name="index">Parameter index</param>
            <returns>Parameter's value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GerPriceStyleValue1(System.Int32)">
            <summary>
             Return price style value 1 by record index
            </summary>
            <param name="recordIndex">Record index</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GerPriceStyleValue1(System.DateTime)">
            <summary>
             Return price style value 1 by time stamp
            </summary>
            <param name="timeStamp">Timestamp</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GerPriceStyleValue2(System.Int32)">
            <summary>
             Return price style value 2 by record index
            </summary>
            <param name="recordIndex">Record Index</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GerPriceStyleValue2(System.DateTime)">
            <summary>
             Return price style value 2 by time stamp
            </summary>
            <param name="timeStamp">TimeStamp</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GerPriceStyleValue3(System.Int32)">
            <summary>
             Return price style value 3 by record index
            </summary>
            <param name="recordIndex">Record index</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GerPriceStyleValue3(System.DateTime)">
            <summary>
             Return price style value 3 by time stamp
            </summary>
            <param name="timeStamp">Time stamp</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetObjectFromCursor(System.Object@)">
            <summary>
             Gets an object type from current mouse position
            </summary>
            <param name="o">Reference to an object or null</param>
            <returns>Object's type</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.ClearAll">
            <summary>
            deletes all panels and everyting related to them
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.AddOHLCSeries(System.String,System.Int32)">
            <summary>
            Adds an OHLC group of series to the chart
            </summary>
            <param name="groupName">Group name</param>
            <param name="panelIndex">Panel index where to place OHLC group of series</param>
            <returns>An array with length = 4 that containes references to newly create series</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddHLCSeries(System.String,System.Int32)">
            <summary>
            Adds an HLC group of series to the chart
            </summary>
            <param name="groupName">Group Name</param>
            <param name="panelIndex">Panel index where to place</param>
            <returns>An array with length = 3 that has references to all 3 series</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddVolumeSeries(System.String,System.Int32)">
            <summary>
            Adds volume type of series to the chart
            </summary>
            <param name="groupName">Group name</param>
            <param name="panelIndex">Panel index where to place</param>
            <returns>Reference to volume series</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddLineSeries(System.String,System.Int32,ModulusFE.SeriesTypeOHLC)">
            <summary>
            Adds a line type of series to the chart
            </summary>
            <param name="symbolName">Symbol name. Series name get's created from symbol name and SeriesOHLCType</param>
            <param name="panelIndex">Panel index where to place</param>
            <param name="ohlcType">OHLC type</param>
            <returns>Reference to the newly created series</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AddSeries(System.String,System.Int32)">
            <summary>
             Adds a linear type of series with an arbitrary series name, not binded to the chart's symbol
            </summary>
            <param name="seriesName">Series name</param>
            <param name="panelIndex">Panel index where to place</param>
            <returns>Reference to the newly created series</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:ModulusFE.StockChartX.AppendOHLCValues(System.String,System.DateTime,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
             Appends values for an OHLC group
            </summary>
            <param name="symbolName">Symbol name. Usually main symbol</param>
            <param name="timeStamp">Value's timestamp</param>
            <param name="open">Open value</param>
            <param name="high">High value</param>
            <param name="low">Low value</param>
            <param name="close">Close value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.AppendHLCValues(System.String,System.DateTime,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
             Appends values for an HLC group
            </summary>
            <param name="groupName">Group name. Usually main symbol</param>
            <param name="timeStamp">Value's timestamp</param>
            <param name="high">High value</param>
            <param name="low">Low value</param>
            <param name="close">Close value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.AppendVolumeValue(System.String,System.DateTime,System.Nullable{System.Double})">
            <summary>
             Appends Volume value to the chart
            </summary>
            <param name="groupName">Group name. Usually main symbol</param>
            <param name="timeStamp">Value's timestamp</param>
            <param name="volume">Volume value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.AppendValue(System.String,ModulusFE.SeriesTypeOHLC,System.DateTime,System.Nullable{System.Double})">
            <summary>
            Appends value for linear type of series. 
            </summary>
            <param name="symbolName">Symbol name. Series name gets created from symbol name and SeriesTypeOHLC</param>
            <param name="ohlcType">OHLC type</param>
            <param name="timeStamp">Time stamp</param>
            <param name="value">Value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.AppendValue(System.String,System.DateTime,System.Nullable{System.Double})">
            <summary>
            Appends value 
            </summary>
            <param name="seriesName">Full series name</param>
            <param name="timeStamp">Time stamp</param>
            <param name="value">Value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.AppendTickValue(System.String,System.DateTime,System.Double,System.Double)">
            <summary>
             Adds a tick value to the chart. Make sure chart has Tick type
            </summary>
            <param name="symbolName">Symbol name</param>
            <param name="timeStamp">Time stamp</param>
            <param name="lastPrice">Last price value</param>
            <param name="lastVolume">Last Volume value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.EditValue(System.String,System.DateTime,System.Nullable{System.Double})">
            <summary>
             Edit a value for a given series at a specified position
            </summary>
            <param name="seriesName">Series name</param>
            <param name="timeStamp">Time stamp where to edit</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.EditValue(ModulusFE.Series,System.DateTime,System.Nullable{System.Double})">
            <summary>
             Edit a value for a given series at a specified position
            </summary>
            <param name="series">Reference to a series</param>
            <param name="timeStamp">Time stamp where to edit</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.EditValueByRecord(System.String,System.Int32,System.Nullable{System.Double})">
            <summary>
             Edit a value for a given series at a specified by index position
            </summary>
            <param name="seriesName">Series name</param>
            <param name="valueIndex">Value index</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.EditValueByRecord(ModulusFE.Series,System.Int32,System.Nullable{System.Double})">
            <summary>
             Edit a value for a given series at a specified by index position
            </summary>
            <param name="series">Reference to a series</param>
            <param name="valueIndex">Value index</param>
            <param name="newValue">New value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.GetValue(System.String,System.Int32)">
            <summary>
             Gets a value from a series by index
            </summary>
            <param name="seriesName">Series name</param>
            <param name="valueIndex">Record index</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetValue(ModulusFE.Series,System.Int32)">
            <summary>
             Gets a value from a series by index
            </summary>
            <param name="series">Reference to a series</param>
            <param name="valueIndex">Record index</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetValue(System.String,System.DateTime)">
            <summary>
             Gets a value from a series by time stamp
            </summary>
            <param name="seriesName">Series name</param>
            <param name="timeStamp">Time stamp</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetValue(ModulusFE.Series,System.DateTime)">
            <summary>
             Gets a value from a series by time stamp
            </summary>
            <param name="series">Reference to a series</param>
            <param name="timeStamp">Time stamp</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetTimeStampIndex(System.DateTime)">
            <summary>
             Gets the index of a given timeStamp
            </summary>
            <param name="timeStamp">Time stamp to check</param>
            <returns>Index (0-based)</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.RecalculateIndicators">
            <summary>
             Forces to recalculate indicators and their repainting
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.CompressTicks">
            <summary>
            Compress internally stored ticks, by taking into consideration the properties <see cref="P:ModulusFE.StockChartX.TickPeriodicity"/> and <see cref="P:ModulusFE.StockChartX.TickCompressionType"/>
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.RemoveSeries(ModulusFE.Series)">
            <summary>
            Removes a series object from the chart.
            </summary>
            <param name="series">Reference to a series to remove</param>
        </member>
        <member name="M:ModulusFE.StockChartX.RemoveObject(ModulusFE.LineStudies.LineStudy)">
            <summary>
            Removes an object from the chart
            </summary>
            <param name="lineStudy">Reference to linestudy to remove</param>
        </member>
        <member name="M:ModulusFE.StockChartX.RemoveObject(System.String)">
            <summary>
            Removes an object from the chart with the specified object type and Key.
            </summary>
            <param name="objectKey">Object key</param>
        </member>
        <member name="M:ModulusFE.StockChartX.SetYScale(System.Int32,System.Double,System.Double)">
            <summary>
            Sets the min and max values for the panel. this values will be ussed instead of min &amp; max
            of series from this panel
            </summary>
            <param name="panelIndex">Panel index</param>
            <param name="max">Max Y price value</param>
            <param name="min">Min Y price value</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ResetYScale(System.Int32)">
            <summary>
            Resets the min &amp; max values. 
            </summary>
            <param name="panelIndex">Panel idnex</param>
        </member>
        <member name="M:ModulusFE.StockChartX.SetPanelHeight(System.Int32,System.Double)">
            <summary>
            Sets the height of a given panel.
             </summary>
            <param name="panelIndex">0 based index of the panel</param>
            <param name="newHeight">New height</param>
        </member>
        <member name="M:ModulusFE.StockChartX.SetPanelHeight(System.Collections.Generic.List{ModulusFE.ChartPanel},System.Collections.Generic.List{System.Double})">
            <summary>
            Metodo criado por Felipe para fazer o resize via codigo de uma coleção de paineis
            </summary>
            <param name="PanelCollection"></param>
            <param name="NewSizeCollection"></param>
        </member>
        <member name="M:ModulusFE.StockChartX.MoveSeries(System.String,System.Int32)">
            <summary>
            Move series from its current location to a new panel
            if series is a part of OHLC or HLC group entire group will be moved
            </summary>
            <param name="seriesName">Series na,e</param>
            <param name="toPanelIndex">New panel index</param>
        </member>
        <member name="M:ModulusFE.StockChartX.GetXPixel(System.Double)">
            <summary>
            Gets x-pixel coordinate by record index
            </summary>
            <param name="index">Record index</param>
            <returns>X pixel</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetYPixel(System.Double)">
            <summary>
            Gets the pixel location of a price at the specified record. Pixel will be located in panel with index 0
            </summary>
            <param name="priceValue">Price value</param>
            <returns>Record index</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetYPixel(System.Double,System.Int32)">
            <summary>
            Gets the pixel location of a price at the specified record. 
            </summary>
            <param name="priceValue">Price value</param>
            <param name="panelIndex">Panel Index</param>
            <returns>Pixel value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.RemoveSeries(System.String)">
            <summary>
            Removes a series object from the chart
            </summary>
            <param name="seriesName">Series name</param>
        </member>
        <member name="M:ModulusFE.StockChartX.GetPanelBySeriesName(System.String)">
            <summary>
            This method Gets the panel reference that contains the specified series. This method is useful 
            because users may drag series from one chart panel to another, or delete the series entirely.
            </summary>
            <param name="seriesName">Series name</param>
            <returns>Reference to a series</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.ScrollLeft(System.Int32)">
            <summary>
            Scrolls the chart to the left by the specified amount of Records. 
            If the chart is already scrolled to the maximum level, this method will have no effect. 
            </summary>
            <param name="records">Number of records</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ScrollRight(System.Int32)">
            <summary>
            Scrolls the chart to the right by the specified amount of Records. 
            If the chart is already scrolled to the maximum level, this method will have no effect.
            </summary>
            <param name="records">Number of records</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ClearValues(System.String)">
            <summary>
            Clears all values for the series object specified by the Name argument. E.g. if you have a series named 
            "my series" and have previously inserted data into that series you can erase all data in that series and 
            start over by calling ClearValues. This is easier than calling RemoveSeries and AddSeries again, or RemoveAllSeries. 
            You can also clear ALL series values via the ClearAllSeries function.
            </summary>
            <param name="seriesName">Series name</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ClearValues(ModulusFE.Series)">
            <summary>
            Clears all values for the series object specified by the Name argument. E.g. if you have a series named 
            "my series" and have previously inserted data into that series you can erase all data in that series and 
            start over by calling ClearValues. This is easier than calling RemoveSeries and AddSeries again, or ClearAll(). 
            You can also clear ALL series values via the ClearAllSeries function.
            </summary>
            <param name="series">Reference to a series</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ClearAllSeries">
            <summary>
            Clears all values from all series on the chart. To clear values from one series only, use the 
            ClearValues function instead. To remove series, use the ClearAll() function.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.GetLineStudy(System.String)">
            <summary>
            Gets a reference to a lineStudy (that also includes buy, sell, ... symbols)
            </summary>
            <param name="objectKey">Object key</param>
            <returns>Reference to a line study</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetObjectStartRecord(System.String)">
            <summary>
            Gets a symbol (bmp) object, line object, or text object's start record number.
            </summary>
            <param name="objectKey">Object key</param>
            <returns>Start records</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetObjectEndRecord(System.String)">
            <summary>
            Gets a symbol (bitmap) object, line object, or text object's end record number.
            </summary>
            <param name="objectKey">Object key</param>
            <returns>End Record</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetObjectStartValue(System.String)">
            <summary>
            Gets a symbol (bmp) object, line object, or text object's start price value.
            </summary>
            <param name="objectKey">Object key</param>
            <returns>Start value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetObjectEndValue(System.String)">
            <summary>
            Gets a symbol (bmp) object, line object, or text object's end price value.
            </summary>
            <param name="objectKey">Object key</param>
            <returns>End value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.SetObjectPosition(System.String,System.Int32,System.Double,System.Int32,System.Double)">
            <summary>
            Sets a symbol (bmp) object, line object, or text ojbect's start record, end record, start value, and end value. 
            </summary>
            <param name="objectKey">Object key</param>
            <param name="startRecord">Start record</param>
            <param name="startValue">Start value</param>
            <param name="endRecord">End Record</param>
            <param name="endValue">End Value</param>
            <returns>Reference to a line study</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetObjectCount(ModulusFE.LineStudies.LineStudy.StudyTypeEnum)">
            <summary>
            Gets the total number of objects on the chart that match the specified type. 
            </summary>
            <param name="studyTypeEnum">Study type</param>
            <returns>Number</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.BarBrush(System.Int32,System.Windows.Media.Brush)">
            <summary>
            sets a custom background brush for a specified by index bar
            </summary>
            <param name="barIndex">Bar index</param>
            <param name="customBrush">A new background brush</param>
        </member>
        <member name="M:ModulusFE.StockChartX.BarBrush(System.String,System.Int32,System.Windows.Media.Brush)">
            <summary>
            sets a custom background brush for a specified by index bar
            </summary>
            <param name="seriesName"></param>
            <param name="barIndex">Bar index</param>
            <param name="customBrush">A new background brush</param>
        </member>
        <member name="M:ModulusFE.StockChartX.BarBrush(System.Int32)">
            <summary>
            Gets the bar brush or null if bar has no user-defined brush
            </summary>
            <param name="barIndex">Bar index</param>
            <returns>Brush used</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.BarBrush(System.String,System.Int32)">
            <summary>
            Gets the bar brush or null if bar has no user-defined brush
            </summary>
            <param name="seriesName"></param>
            <param name="barIndex">Bar index</param>
            <returns>Brush used</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.SeriesColor(System.String,System.Windows.Media.Color)">
            <summary>
            Sets the line color for the series as specified by the Name argument. This property may not apply to certain price styles. 
            </summary>
            <param name="seriesName">Series name</param>
            <param name="seriesColor">Series color</param>
        </member>
        <member name="M:ModulusFE.StockChartX.SeriesColor(System.String)">
            <summary>
            Sets the line color for the series as specified by the Name argument
            </summary>
            <param name="seriesName">Series name</param>
            <returns>Color used, or null if such series doesn't exist</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.ObjectColor(System.String,System.Windows.Media.Color)">
            <summary>
            sets the stroke color for a given object 
            </summary>
            <param name="objectKey">Object key</param>
            <param name="newColor">New color</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ObjectColor(System.String)">
            <summary>
            Retrieves the object color 
            </summary>
            <param name="objectKey">Object key</param>
            <returns>Color or null if such object doesn't exist</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.ObjectSelectable(System.String,System.Boolean)">
            <summary>
            If this property is set to False, the user will not be able to select the object with the mouse. The object may be of any object type. 
            </summary>
            <param name="objectKey">Object key</param>
            <param name="selectAble">true - selectable, false - otherwise</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ObjectSelectable(System.String)">
            <summary>
            A property that Gets says if an object is selectable, or null if such an object doesn't exists
            </summary>
            <param name="objectKey">Object key</param>
            <returns>true or false if object is selectable or not, or null if such objects doesn't exists</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.ObjectStyle(System.String,ModulusFE.LinePattern)">
            <summary>
            Sets the pen style of the specified object. 
            </summary>
            <param name="objectKey">Object key</param>
            <param name="objectStyle">Line pattern</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ObjectStyle(System.String)">
            <summary>
            Gets the pen style of the specified object. 
            </summary>
            <param name="objectKey">Object key</param>
            <returns>Line pattern used, or null if such object doesn't exists</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.ObjectWeight(System.String,System.Double)">
            <summary>
            Sets the line weight of the object as specified by the object Name argument. 
            </summary>
            <param name="objectKey">Object key</param>
            <param name="objectWeight">New line thickness</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ObjectWeight(System.String)">
            <summary>
            Gets the line weight of the object as specified by the object Name argument. 
            </summary>
            <param name="objectKey">Object key</param>
            <returns>Line thickness used, or null if such object doesn't exists</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.ObjectText(System.String,System.String)">
            <summary>
            Sets the Text value of the object specified by object Name. Works only for StaticText type of objects
            </summary>
            <param name="objectKey">Object key</param>
            <param name="objectText">New text</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ObjectText(System.String)">
            <summary>
            Gets the Text value of the object specified by object Name. Works only for StaticText type of objects
            </summary>
            <param name="objectKey">Object key</param>
            <returns>Object's text or null if such object doesn't exists</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.TextAreaFontName(System.String,System.String)">
            <summary>
            Gets the fontname for a StaticText object
            </summary>
            <param name="objectKey">Object key</param>
            <param name="fontName">New font name</param>
        </member>
        <member name="M:ModulusFE.StockChartX.TextAreaFontName(System.String)">
            <summary>
            Gets the fontname for a StaticText object
            </summary>
            <param name="objectKey">Object key</param>
            <returns>Font name used</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetIndicatorType(System.String)">
            <summary>
            This function Gets the Indicator type for any indicator series added via the AddIndicator method.
            </summary>
            <param name="indicatorKey">Indicator's unique key</param>
            <returns>Indicator type</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.ZoomIn(System.Int32)">
            <summary>
            Zooms the chart in by the specified amount of Records. If the chart is zoomed in all the way (meaning only one bar is visible), this method will have no effect. 
            </summary>
            <param name="records">Records to zoom in</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ZoomOut(System.Int32)">
            <summary>
            Zooms the chart out by the specified amount of Records. This method will have no effect if the chart is zoomed out all the way.
            </summary>
            <param name="records">Records to zoom out</param>
        </member>
        <member name="M:ModulusFE.StockChartX.ResetZoom">
            <summary>
            Resets FirstVisibleRecord to 0 and LastVisibleRecord to RecordCount - 1, making the first and last bars visible on the chart. 
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.GetTimestampByIndex(System.Int32)">
            <summary>
            Returns the Timestamp by its index value
            </summary>
            <param name="index">Record index for which timestamp is needed. Index is 0 based.</param>
            <returns>Timestamp if index value is ok, or null</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetReverseX(System.Double)">
            <summary>
            Gets record by pixel value
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.StockChartX.GetReverseX(System.DateTime,System.Boolean)">
            <summary>
            Returns an aproximated record index for a given timeStamp.
            Usefull when an exact timestamp is unknown
            </summary>
            <param name="timestamp"></param>
            <param name="roundUp">
            if true - returns the next recordCount that has a value greater then given timestamp
            if false - returns the previos recordCount that has a value less then given timestamp
            </param>
            <returns>Timestamp index, -1 if no such aproximate value</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.AppendOHLCVValues(System.String,System.DateTime,System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Boolean)">
            <summary>
            Appends OHLC values and updates/replaces the last bar on new ticks.
            </summary>
            <param name="symbolName"></param>
            <param name="timeStamp"></param>
            <param name="open"></param>
            <param name="high"></param>
            <param name="low"></param>
            <param name="close"></param>
            <param name="volume"></param>
            <param name="isPartial"></param>
        </member>
        <member name="M:ModulusFE.StockChartX.OffsetTimeStamps(System.TimeSpan)">
            <summary>
            Offsets all the timestamp entries in the chart by a given offset.
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:ModulusFE.StockChartX.DeleteTimestamps(System.Collections.Generic.IEnumerable{System.DateTime})">
            <summary>
            Delete all the bars from the chart whose timestamp is contained in the given array of timestamps.
            </summary>
            <param name="timestamps">Array of timestamps</param>
            <returns>Number found and deleted records.</returns>
        </member>
        <member name="M:ModulusFE.StockChartX.InvokePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:ModulusFE.StockChartX.ThreeDStyle">
            <summary>
             Gets or sets the value indicating whether to have 2D or 3D  candles
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ScalingType">
            <summary>
             Gets or sets the scaling type, linear or semilog
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.UpColor">
            <summary>
             Gets or sets the <seealso cref="T:System.Windows.Media.Color"/> used to paint up-tick bars.When the close is higher than the previous close, this color will be used to paint the bar.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.DownColor">
            <summary>
             Gets or sets the <seealso cref="T:System.Windows.Media.Color"/> used to paint down-tick bars. When the close is lower than the previous close, this color will be used to paint the bar. 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.LeftChartSpace">
            <summary>
             Gets or sets the left non-paitable chart area.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.RightChartSpace">
            <summary>
             Gets or sets the right side non-paitable chart area.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.RealTimeXLabels">
            <summary>
            when true X axis will display data suitable for real-time mode
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ScalePrecision">
            <summary>
             Gets or sets the precision used to paint values on Y axes
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.KeepZoomLevel">
            <summary>
            Get or sets the value that indicates if chart must keep current user's zoom level. 
            </summary>
            <value>
            true - anytime a new bar is added the chart will be scrolled to the left, this way last bar always will be seen, and the number of visible bars will be kept.
            false - when a new bar is added the chart will be compressed to show last bar.
            </value>
        </member>
        <member name="P:ModulusFE.StockChartX.VolumeDivisor">
            <summary>
             Gets or sets the divider for Volume values
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.HorizontalLineValuePresenterTemplate">
            <summary>
            HorizontalLineValuePresenterTemplate summary
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.SeriesTickBoxValuePresenterTemplate">
            <summary>
            Template for the tick box that are shown on Y axis for any series
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMoreIndicatorTemplate">
            <summary>
            ChartPanelMoreIndicatorTemplate summary
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.AddHolder">
            <summary>
            AddHolder summary
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.AddHolderTemplate">
            <summary>
            AddHolderTemplate summary
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.AddHolderMargin">
            <summary>
            AddHolderMargin summary
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.WorkAreaLeft">
            <summary>
            Gets the left position of work area, Does not include Y axis if any
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.RevisionInfo">
            <summary>
            The internal SVN source control value from ModulusFE source control.
            Used to be able to reference exaclty which version of code is being used.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ShowAnimations">
            <summary>
             Gets os sets the value indicating whether the animations will be shown or not. 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.YGrid">
            <summary>
             Gets or sets the visibility of Y grid
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.XGrid">
            <summary>
             Gets or sets the visibility of X grid
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.GridStroke">
            <summary>
             Gets or sets the <seealso cref="T:System.Windows.Media.Brush"/> that specifies how grid lines are painted
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.HorizontalGridLinePattern">
            <summary>
             Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that is used to outline shapes
             for horizontal grid lines.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.VerticalGridLinePattern">
            <summary>
             Gets or sets a collection of Double values that indicate the pattern of dashes and gaps that is used to outline shapes
             for vertical grid lines.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ScaleAlignment">
            <summary>
             Gets or sets the value that deermines what Y axis is shown
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CrossHairs">
            <summary>
             Gets or sets the visibility of crosshairs lines
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CrossHairsStroke">
            <summary>
            Gets or sets the color of crosshairs lines
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CrossHairsPosition">
            <summary>
            Gets or sets the location of crosshairs lines
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.DisplayTitles">
            <summary>
             Gets or sets the value indicator whether to display panels titles or not.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.PanelMinHeight">
            <summary>
             Gets or sets the minimum height of the chart panels. Used so that panels do not dissapear.
             Useful to set to 0 when you actually want a panel to be hidden.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.IndicatorDialogBackground">
            <summary>
             Gets or sets the <seealso cref="T:System.Windows.Media.Brush"/> used as background for indicators dialog.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.IndicatorDialogLabelForeground">
            <summary>
            IndicatorDialogLabelForeground summary
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.IndicatorDialogLabelFontSize">
            <summary>
            IndicatorDialogLabelFontSize summary
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.IndicatorTwinTitleVisibility">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Visibility"/> state on the titles of twin indicators. Twin indicators are indicators that have 
            more than one line.
            If a user does not want all of the lines to have titles at the top of the panel this value should be set to collapsed in which
            case only the main series will have a title in the panel's title bar.
            NOTE: This property is NOT dynamic, which is to say that changing this property while twin titles are already on the screen
            will not remove them nor add them if they are currently collapsed. It is simply a flag that will affect any newly added
            indicators. Though there is an event <see cref="E:ModulusFE.StockChartX.IndicatorTwinTitleVisibilityChanged"/> that will be fired if there is anything 
            else that needs to be done.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.IndicatorTwinTitleVisibilityChanged">
            <summary>
            Event that is fired when <see cref="P:ModulusFE.StockChartX.IndicatorTwinTitleVisibility"/> is changed.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.VolumePostfixLetter">
            <summary>
            Gets or sets the postfix letter used on to display volume in millions (e.g. you want to show 5,200,000 as "5.2 M" in the Y scale). 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.InfoPanelLabelsBackground">
            <summary>
             Gets or sets the background <seealso cref="T:System.Windows.Media.Brush"/> of infopanel's labels.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.InfoPanelLabelsForeground">
            <summary>
             Gets or sets the foreground <seealso cref="T:System.Windows.Media.Brush"/> of infopanel's labels.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.InfoPanelValuesBackground">
            <summary>
             Gets or sets the background <seealso cref="T:System.Windows.Media.Brush"/> of infopanel's values.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.InfoPanelValuesForeground">
            <summary>
             Gets or sets the foreground <seealso cref="T:System.Windows.Media.Brush"/> of infopanel's values.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.InfoPanelFontFamily">
            <summary>
             Gets or sets the preferred top-level font family for the textblock used in info panel.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.InfoPanelFontSize">
            <summary>
             Gets or sets the preferred top-level font size for the textblock used in info panel.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.InfoPanelPosition">
            <summary>
             Gets or sets the positioning type of info panel.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.HeatPanelLabelsForeground">
            <summary>
             Gets or sets the <seealso cref="T:System.Windows.Media.Brush"/> to apply to labels in heat panel.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.HeatPanelLabelsBackground">
            <summary>
             Gets or sets the <seealso cref="T:System.Windows.Media.Brush"/> to apply to labels background
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.HeatPanelLabelsFontSize">
            <summary>
             Gets or sets the font-size for labels used in heat-panel
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.IsChartScrollerVisible">
            <summary>
            A description of the IsChartScrollerVisible.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartScrollerTrackBackground">
            <summary>
            A description of the ChartScrollerTrackBackground.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartScrollerTrackButtonsBackground">
            <summary>
            A description of the ChartScrollerTrackButtonsBackground.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartScrollerThumbButtonBackground">
            <summary>
            A description of the ChartScrollerThumbButtonBackground.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartScrollerProperties">
            <summary>
            Gets or sets chart scroller properties. This is a dependency property.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.AppendTickVolumeBehavior">
            <summary>
            A description of the AppendTickVolumeBehavior.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.LineStudyPropertyDialogBackground">
            <summary>
             /// Gets or sets the background for the dialog properties if LineStudy objects
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.MaxVisibleRecords">
            <summary>
            Gets or sets the maximum visible records in the chart.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CalendarBackground">
            <summary>
             Gets or sets the calendar background
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ShowSeconds">
            <summary>
            Gets or sets whether to show the seconds in calendar panel. Does not have effect when 
            <see cref="P:ModulusFE.StockChartX.RealTimeXLabels"/>=false
            NOTE: Only valid for Calendar Version 1
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CalendarVersion">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CalendarV2LabelGap">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CalendarV2CalendarLabelBlockOutput">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CalendarV2CurrentTimeStamp">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.URILicenseKey">
            <summary>
            <para>Gets or sets chart URI License key.</para>
            <para>Users that have the Source code can choose not to use this propert and instead edit the <see cref="M:ModulusFE.StockChartX.CheckRegistration"/> method.
            Otherwise, users should get a URI/URL license from ModulusFE for the specific hostname that the 
            control is going to be running on.</para>
            <para>Go to http://www.modulusfe.com/support/getlicense.asp to get your license.</para>
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.Symbol">
            <summary>
            Gets or sets the main symbol that is used in the chart. i.e. MSFT, DELL, ...
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.FontFace">
            <summary>
             Gets font name used to paint Y grid, calendar text
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.FontSize">
            <summary>
             Gets font size used to paint Y grid, calendar text
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.FontForeground">
            <summary>
             Gets font foreground used to paint Y grid, calendar text
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.VisibleRecordCount">
            <summary>
             Gets or sets the maximum visible record count that are currently visible in the chart
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.RecordCount">
            <summary>
             Gets record count that are currently stored in the chart
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.PaintableWidth">
            <summary>
             Gets paintable width of panel that is used to paint series. 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.PaintableLeft">
            <summary>
            Gets the left paintable side
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.PaintableRight">
            <summary>
            Gets the right paintable side
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.PriceStyle">
            <summary>
             Gets or sets price style that is currently used in the chart
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.YGridStepType">
            <summary>
            Gets or sets the YGrid step type calculation
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.DarvasBoxes">
            <summary>
             Show or hide the Darvas boxes
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.DarvasStopPercent">
            <summary>
             Gets or sets darvas boxes stop percent
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.PanelsCount">
            <summary>
             Gets panels count used in the chart
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.MaximizedPanel">
            <summary>
             Gets reference to panel that is currently maximized, or null if there isn't such a panel
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.IndicatorsCollection">
            <summary>
             Gets the collection of all indicators from all panels
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.SeriesCollection">
            <summary>
            Get the collection of all series from all panels 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.LineStudiesCollection">
            <summary>
             Gets the collection of all LineStudies from all panels
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.UseablePanelsCount">
            <summary>
            Gets the number of panels ignoring panels with HeatMap on them
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartType">
            <summary>
             Gets or sets chart type
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.BarWidth">
            <summary>
             Gets or sets bar width used ti paint the wick of candles
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.DisableZoomArea">
            <summary>
            Gets or sets whether user can create a zoom area using mouse
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.UseLineSeriesUpDownColors">
            <summary>
             When UseLineSeriesUpDownColors is set to True, StockChartX will display the UpColor for values of oscillators that are above 0, and DownColor for values of oscillators that are below 0. 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.UseVolumeUpDownColors">
            <summary>
             When UseVolumeUpDownColors is set to True, StockChartX will display the UpColor of the symbol's up candle color, and DownColor for symbol's down candle color. The volume series must be named as part of a symbol group (e.g "MSFT.volume").
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CandleUpOutlineColor">
            <summary>
             Gets or sets the candle outline color (for hollow 2D candles). When the close is lower than the previous close, this color will be used to paint the bar outline. 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CandleDownOutlineColor">
            <summary>
             Gets or sets the candle outline color (for hollow 2D candles). When the close is lower than the previous close, this color will be used to paint the bar outline.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CandleUpWickMatchesOutlineColor">
            <summary>
             Works with the <see cref="P:ModulusFE.StockChartX.CandleUpOutlineColor"/> to set which color is used for the 'up' wick (very useful when using hollow candles). Default is to use the fill color, but the outline can be used too.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CandleDownWickMatchesOutlineColor">
            <summary>
             Works with the <see cref="P:ModulusFE.StockChartX.CandleDownOutlineColor"/> to set which color is used for the 'down' wick (very useful when using hollow candles). Default is to use the fill color, but the outline can be used too.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.FirstVisibleRecord">
            <summary>
            Gets the record number of the first visible record on the chart. This value may change as the chart is zoomed or scrolled.
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.LineStudySelectedCount">
            <summary>
            Gets the number of selected LineStudies on all panels from chart
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.LastVisibleRecord">
            <summary>
            Gets the record number of the last visible record on the chart. This value may change as the chart is zoomed or scrolled. 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.SelectedObjectsCollection">
            <summary>
            Gets the selected objects from all panels
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.PanelsCollection">
            <summary>
             Gets the collection of panels from the chart
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.LabelTitle">
            <summary>
             
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.Item(ModulusFE.SeriesTypeOHLC)">
            <summary>
             Returns a series from OHLC group. Series name is formed from <see cref="P:ModulusFE.StockChartX.Symbol"/> + series type
            </summary>
            <param name="ohlc"></param>
        </member>
        <member name="P:ModulusFE.StockChartX.Item(System.Int32)">
            <summary>
             Gets a reference to a <see cref="T:ModulusFE.ChartPanel"/> by its index
            </summary>
            <param name="panelIndex"></param>
        </member>
        <member name="P:ModulusFE.StockChartX.OptimizePainting">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CurrentPanel">
            <summary>
            Gets the <see cref="T:ModulusFE.ChartPanel"/> that is currently under mouse cursor
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CalendarV2CalendarScaleDataList">
            <summary>
            The list of different scales that are able to be used as labels in the calendar (x axis)
            The user can play with which scales are available, and they can play with the string output
            formats that are used to display the timeStamps. 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.TickPeriodicity">
            <summary>
            Represents the periodicity used to compress tick data
            it is either value in 
            1. number of ticks - when compression type is ticks
            2. number of seconds - when compression type is time
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.TickCompressionType">
            <summary>
            type of compression used to compress ticks.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.DialogShown">
            <summary>
            Occurs when indicator's dialog with parameters is shown
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.DeleteSeries">
            <summary>
            Occurs when a series or indicator is removed from chart. No user interaction is possibly here
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.TrendLinePenetration">
            <summary>
            Occurs when a value from a series crosses a watchable trendline
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ChartReseted">
            <summary>
            Occurs when entire chart was recreated
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.SeriesRightClick">
            <summary>
            Occurs when a right click occurs on a series
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.LineStudyRightClick">
            <summary>
            Occurs when a LineStudy was right-clicked
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.LineStudyDoubleClick">
            <summary>
            Occurs when a LineStudy is double clicked
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.LineStudyLeftClick">
            <summary>
            Occurs when a mouse click a line study
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ChartPanelMouseMove">
            <summary>
            Occurs when mouse is moving above a <see cref="T:ModulusFE.ChartPanel"/>
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.LineStudyBeforeDelete">
            <summary>
            Occurs before a LineStudy is deleted. Here user may cancel LineStudy deletition
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.IndicatorDoubleClick">
            <summary>
            Occusr when a series-indicator is double clicked. Here user can cancel indicator's properties dialog.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.SeriesDoubleClick">
            <summary>
            Occurs when a Series is double clicked
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.SeriesBeforeDelete">
            <summary>
            Occurs before a Series is deleted. Here user can cancel Series deletition
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.SeriesMoved">
            <summary>
            Occurs whenever the user has moved a series or indicator from one panel to another panel. 
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ChartPanelBeforeClose">
            <summary>
            Occurs before a panel is closed. Here user can cancel panel closing.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.CustomIndicatorNeedsData">
            <summary>
            Occurs whenever StockChartX updates with a new tick, new bar, or anything changes and the indicator needs to be re-calculated, you will be informed of this via the CustomIndicatorNeedData event. 
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ChartPanelPaint">
            <summary>
            Occurs each time a panel is repainted.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ChartScroll">
            <summary>
            Occurs when chart is scrolled with the mouse wheel or programmatically.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.UserDrawingComplete">
            <summary>
            Occurs after the user has completed drawing a line study or trend line.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ShowInfoPanel">
            <summary>
            Occurs when the info panel is displayed.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ChartZoom">
            <summary>
            Occurs anytime the chart is zoomed
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ChartLoaded">
            <summary>
            internal usage
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.IndicatorAddComplete">
            <summary>
            Occurs after an attempt to add an indicator.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.LineStudyContextMenu">
            <summary>
            Occurs when user clicks a <see cref="T:ModulusFE.LineStudies.LineStudy"/> context-menu line
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.DragDropStarted">
            <summary>
            Occurs when user initiated DD operation
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.DragDropMoving">
            <summary>
            Occurs when user is moving a LineStudy
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.DragDropEnded">
            <summary>
            Occurs when DD has been ended
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ChartPanelMouseLeftClick">
            <summary>
            Occurs when user makes a left-click on the chart panel.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.LineStudyCreated">
            <summary>
            Occurs when a LineStudy was fully created
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ChartPanelStatusChanged">
            <summary>
            Occurs when the status of a panel was changed.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.ChartUpdated">
            <summary>
            Occurs when charts is actually update after <see cref="M:ModulusFE.StockChartX.Update"/> method was called.
            The way chart is done, the call of <see cref="M:ModulusFE.StockChartX.Update"/>  method does not make chart update
            immediatly. Instead a timer is set that after a short period of time will update the chart.
            </summary>
        </member>
        <member name="E:ModulusFE.StockChartX.BeforeZoom">
            <summary>
            Occurs before chart is going to be zoomed
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.SerializationTypeEnum">
            <summary>
            Serialization type
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.SerializationTypeEnum.All">
            <summary>
            Entire chart is saved
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.SerializationTypeEnum.General">
            <summary>
            Chart's styles and indicators are saved
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.SerializationTypeEnum.Objects">
            <summary>
            All lines studies are saved
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.SerializationTypeEnum.Indicators">
            <summary>
            Save only indicators
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.ChartStatus">
            <summary>
            Chart Status
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartStatus.Building">
            <summary>
            Building
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartStatus.ResizingPanels">
            <summary>
            Resizing Panels
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartStatus.Ready">
            <summary>
            Ready for action
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartStatus.MovingSelection">
            <summary>
            Moving a selected object
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartStatus.LineStudyPaintReady">
            <summary>
            Line Study has been painted
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartStatus.LineStudyPainting">
            <summary>
            Line Study is painting
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartStatus.LineStudyMoving">
            <summary>
            User is moving a LineStudy
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartStatus.ZoomStart">
            <summary>
            A zoom process has been started
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartStatus.ZoomPaintingRect">
            <summary>
            A zoom rectangle is being painted
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartStatus.InfoPanelMoving">
            <summary>
            When info panel is moving 
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.ImageExportType">
            <summary>
             Defines the types of image to be exported from chart
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ImageExportType.Png">
            <summary>
             Portable network graphic (PNG)
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.DeleteSeriesEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.DeleteSeries"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.DeleteSeriesEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.DeleteSeriesEventArgs"/> class.
            </summary>
            <param name="seriesName">Name of the series being removed</param>
        </member>
        <member name="P:ModulusFE.StockChartX.DeleteSeriesEventArgs.RemovedSeries">
            <summary>
            Name of the series being removed
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.TrendLinePenetrationEnum">
            <summary>
            Penetration type of a linestudy
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.TrendLinePenetrationEnum.Above">
            <summary>
            penetration was above LineStudy
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.TrendLinePenetrationEnum.Below">
            <summary>
            penetration was below LineStudy
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.TrendLinePenetrationArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.TrendLinePenetration"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.TrendLinePenetrationArgs.#ctor(ModulusFE.LineStudies.TrendLine,ModulusFE.StockChartX.TrendLinePenetrationEnum,ModulusFE.Series)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.TrendLinePenetrationArgs"/> class.
            </summary>
            <param name="trendLine">Reference to trendline being penetrated</param>
            <param name="trendLinePenetrationEnum">Penetration type</param>
            <param name="series">Reference to the Series that penetrated the trendline</param>
        </member>
        <member name="P:ModulusFE.StockChartX.TrendLinePenetrationArgs.TrendLine">
            <summary>
            reference to the LineStudy that was penetrated
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.TrendLinePenetrationArgs.TrendLinePenetrationType">
            <summary>
            penetration type
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.TrendLinePenetrationArgs.Series">
            <summary>
            reference to the Series that penetrated the LineStudy
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.SeriesRightClickEventArgs">
            <summary>
             Provides data for the <see cref="E:ModulusFE.StockChartX.SeriesRightClick"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.SeriesRightClickEventArgs.#ctor(ModulusFE.Series,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.SeriesRightClickEventArgs"/> class.
            </summary>
            <param name="series">Reference to series</param>
            <param name="position">Mouse position</param>
        </member>
        <member name="P:ModulusFE.StockChartX.SeriesRightClickEventArgs.Series">
            <summary>
            reference to series being clicked
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.SeriesRightClickEventArgs.Position">
            <summary>
            mouse position relative to ChartPanel where the Series is located
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.LineStudiesRightClickEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.LineStudyRightClick"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.LineStudiesRightClickEventArgs.#ctor(ModulusFE.LineStudies.LineStudy,System.Windows.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.LineStudiesRightClickEventArgs"/> class.
            </summary>
            <param name="lineStudy">Reference to line study</param>
            <param name="position">Mouse position</param>
        </member>
        <member name="P:ModulusFE.StockChartX.LineStudiesRightClickEventArgs.LineStudy">
            <summary>
            reference to a line study being clicked
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.LineStudiesRightClickEventArgs.Position">
            <summary>
            position of the mouse relative the ChartPanel where the LineStudy is located
            </summary>                            
        </member>
        <member name="T:ModulusFE.StockChartX.LineStudyMouseEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.LineStudyDoubleClick"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.LineStudyMouseEventArgs.#ctor(ModulusFE.LineStudies.LineStudy)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.LineStudyMouseEventArgs"/> class.
            </summary>
            <param name="lineStudy">Reference to line study</param>
        </member>
        <member name="P:ModulusFE.StockChartX.LineStudyMouseEventArgs.LineStudy">
            <summary>
            reference to the linestudies
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.ChartPanelMouseMoveArgs">
            <summary>
            Provides data for the <see cref="T:ModulusFE.StockChartX.ChartPanelMouseMoveArgs"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.ChartPanelMouseMoveArgs.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="panelIndex"></param>
            <param name="mouseY"></param>
            <param name="mouseX"></param>
            <param name="y"></param>
            <param name="record"></param>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMouseMoveArgs.PanelIndex">
            <summary>
            Gets the panel index where mouse is moving. 0-based
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMouseMoveArgs.MouseY">
            <summary>
            Gets the mouse Y coordinate relative to the panel
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMouseMoveArgs.MouseX">
            <summary>
            Gets the mouse X coordinate relative to the panel
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMouseMoveArgs.Y">
            <summary>
            Gets the Y value from current mouse position
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMouseMoveArgs.Record">
            <summary>
            Gets the record number from current mouse position. It has the visible index of the bar,
            to get the actual index add <see cref="P:ModulusFE.StockChartX.FirstVisibleRecord"/> to it.
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.LineStudyBeforeDeleteEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.LineStudyBeforeDelete"/> event.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.LineStudyBeforeDeleteEventArgs.LineStudy">
            <summary>
            reference to LineStudy that is going to be deleted
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.LineStudyBeforeDeleteEventArgs.CancelDelete">
            <summary>
            set to [true] to cancel LineStudies deleting
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.LineStudyBeforeDeleteEventArgs.#ctor(ModulusFE.LineStudies.LineStudy)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.LineStudyBeforeDeleteEventArgs"/> class.
            </summary>
            <param name="lineStudy">Reference to a line study</param>
        </member>
        <member name="T:ModulusFE.StockChartX.IndicatorDoubleClickEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.IndicatorDoubleClick"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.IndicatorDoubleClickEventArgs.#ctor(ModulusFE.Indicators.Indicator)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.IndicatorDoubleClickEventArgs"/> class.
            </summary>
            <param name="indicator">Reference to the indicator being double-clicked</param>
        </member>
        <member name="P:ModulusFE.StockChartX.IndicatorDoubleClickEventArgs.Indicator">
            <summary>
            a reference to the indicator being clicked
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.IndicatorDoubleClickEventArgs.CancelPropertiesDialog">
            <summary>
            if set to true the double click won't show the indicator properties dialog
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.SeriesDoubleClickEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.SeriesDoubleClick"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.SeriesDoubleClickEventArgs.#ctor(ModulusFE.Series)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.SeriesDoubleClickEventArgs"/> class.
            </summary>
            <param name="series">Reference to series</param>
        </member>
        <member name="P:ModulusFE.StockChartX.SeriesDoubleClickEventArgs.Series">
            <summary>
            reference to the series being double-clicked
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.SeriesBeforeDeleteEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.SeriesBeforeDelete"/> event.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.SeriesBeforeDeleteEventArgs.Series">
            <summary>
            reference to the series that is going to be deleted
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.SeriesBeforeDeleteEventArgs.CancelDelete">
            <summary>
            set to [true] to cancel series deleting
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.SeriesBeforeDeleteEventArgs.#ctor(ModulusFE.Series)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.SeriesBeforeDeleteEventArgs"/> class.
            </summary>
            <param name="series">Reference to series</param>
        </member>
        <member name="T:ModulusFE.StockChartX.SeriesMovedEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.SeriesMoved"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.SeriesMovedEventArgs.#ctor(ModulusFE.Series,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.SeriesMovedEventArgs"/> class.
            </summary>
            <param name="series">Referemce to series</param>
            <param name="chartPanelFrom">Index of panel from where series is moved</param>
            <param name="chartPanelTo">Index of panel where series is moved.</param>
        </member>
        <member name="P:ModulusFE.StockChartX.SeriesMovedEventArgs.Series">
            <summary>
            a reference to a series that was moved
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.SeriesMovedEventArgs.ChartPanelFrom">
            <summary>
            panel index where series was located. -1 if panel will be deleted after series move
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.SeriesMovedEventArgs.ChartPanelTo">
            <summary>
            panel index where series is being moved. 
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.ChartPanelBeforeCloseEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.ChartPanelBeforeClose"/> event.
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.ChartPanelBeforeCloseEventArgs.CancelClose">
            <summary>
            set to [true] to cancel panel closing
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.ChartPanelBeforeCloseEventArgs.#ctor(ModulusFE.ChartPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.ChartPanelBeforeCloseEventArgs"/> class.
            </summary>
            <param name="chartPanel">Reference to chart panel</param>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelBeforeCloseEventArgs.ChartPanel">
            <summary>
            reference to the panel that is going to be closed
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.CustomIndicatorNeedsDataEventArgs">
            <summary>
             Provides data for the <see cref="E:ModulusFE.StockChartX.CustomIndicatorNeedsData"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.CustomIndicatorNeedsDataEventArgs.#ctor(ModulusFE.Indicators.CustomIndicator,System.Nullable{System.Double}[])">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.CustomIndicatorNeedsDataEventArgs"/> class.
            </summary>
            <param name="indicator">Reference to the custom indicaror that needs data.</param>
            <param name="values">Values passed to user</param>
        </member>
        <member name="P:ModulusFE.StockChartX.CustomIndicatorNeedsDataEventArgs.Indicator">
            <summary>
            A reference to the custom indicator that needs data
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.CustomIndicatorNeedsDataEventArgs.Values">
            <summary>
            A reference to an array of values that must be filled by user.
            The length of this array can't be bigger than RecordCount, all those values will be ignored 
            When the event is fired this array will have the existing values, that can be overwritten
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.ChartPanelPaintEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.ChartPanelPaint"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.ChartPanelPaintEventArgs.#ctor(ModulusFE.ChartPanel)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.ChartPanelPaintEventArgs"/> class.
            </summary>
            <param name="chartPanel">Reference to chart panel</param>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelPaintEventArgs.ChartPanel">
            <summary>
            Reference to chart panel that was painted
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.UserDrawingCompleteEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.UserDrawingComplete"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.UserDrawingCompleteEventArgs.#ctor(ModulusFE.LineStudies.LineStudy.StudyTypeEnum,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.UserDrawingCompleteEventArgs"/> class.
            </summary>
            <param name="studyTypeEnum">Study type that was painted</param>
            <param name="key">Unique associated with line study</param>
        </member>
        <member name="P:ModulusFE.StockChartX.UserDrawingCompleteEventArgs.StudyType">
            <summary>
            StudyType of the line study being drawn
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.UserDrawingCompleteEventArgs.Key">
            <summary>
            The unique key of line study
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.ShowInfoPanelEventArgs">
            <summary>
            Provides data for the <see cref="E:ModulusFE.StockChartX.ShowInfoPanel"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.ShowInfoPanelEventArgs.#ctor(System.Collections.Generic.List{ModulusFE.Tuple{System.String,System.String}})">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.ShowInfoPanelEventArgs"/> class.
            </summary>
            <param name="entries">Reference to a series that are present in info panel.</param>
        </member>
        <member name="P:ModulusFE.StockChartX.ShowInfoPanelEventArgs.Entries">
            <summary>
            Has entries shown on info panel
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.IndicatorAddCompletedEventArgs">
            <summary>
            Provides data for <see cref="E:ModulusFE.StockChartX.IndicatorAddComplete"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.IndicatorAddCompletedEventArgs.#ctor(System.Int32,System.String,System.Boolean)">
            <summary>
             Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.IndicatorAddCompletedEventArgs"/> class.
            </summary>
            <param name="panelIndex">Panel index</param>
            <param name="indicatorName">Indicator name</param>
            <param name="canceledByUser">Was operation canceled by user or not</param>
        </member>
        <member name="P:ModulusFE.StockChartX.IndicatorAddCompletedEventArgs.PanelIndex">
            <summary>
            Panel index where indicator was/is required to be
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.IndicatorAddCompletedEventArgs.IndicatorName">
            <summary>
            Indicator name
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.IndicatorAddCompletedEventArgs.CanceledByUser">
            <summary>
            Gets the value indicating if action was canceled by user or not. 
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.LineStudyContextMenuEventArgs">
            <summary>
            Provides data for <see cref="E:ModulusFE.StockChartX.LineStudyContextMenu"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.LineStudyContextMenuEventArgs.#ctor(ModulusFE.LineStudies.LineStudy)">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.StockChartX.LineStudyContextMenuEventArgs"/> class.
            </summary>
            <param name="lineStudy"></param>
        </member>
        <member name="P:ModulusFE.StockChartX.LineStudyContextMenuEventArgs.LineStudy">
            <summary>
            Gets the reference who needs a context menu
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.LineStudyContextMenuEventArgs.Cancel">
            <summary>
            Gets or sets whether built-in context menu will be shown
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.DragDropLineStudyEventArgs">
            <summary>
             Provider data for Drag &amp; Drop operations on LineStudies
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.DragDropLineStudyEventArgs.#ctor(ModulusFE.LineStudies.LineStudy,ModulusFE.StockChartX.DragDropLineStudyEventArgs.DragDropActionType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="lineStudy"></param>
            <param name="actionType"></param>
            <param name="canCancelAction"></param>
        </member>
        <member name="P:ModulusFE.StockChartX.DragDropLineStudyEventArgs.LineStudy">
            <summary>
             Reference to a <see cref="P:ModulusFE.StockChartX.DragDropLineStudyEventArgs.LineStudy"/> that is being drag &amp; droped
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.DragDropLineStudyEventArgs.ActionType">
            <summary>
            Gets the current DD action type
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.DragDropLineStudyEventArgs.CanCancelAction">
            <summary>
            Gets whether LineStudy supports DD cancelation
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.DragDropLineStudyEventArgs.CancelAction">
            <summary>
            Gets or sets DD action
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.DragDropLineStudyEventArgs.DragDropActionType">
            <summary>
             Determines the type of current DD operation
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.DragDropLineStudyEventArgs.DragDropActionType.Started">
            <summary>
             Operations just started
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.DragDropLineStudyEventArgs.DragDropActionType.Moving">
            <summary>
             LineStudy is being moved
            </summary>
        </member>
        <member name="F:ModulusFE.StockChartX.DragDropLineStudyEventArgs.DragDropActionType.Ended">
            <summary>
             DD Operation has ended
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.ChartPanelMouseLeftClickEventArgs">
            <summary>
            Provides data for <see cref="E:ModulusFE.StockChartX.ChartPanelMouseLeftClick"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.ChartPanelMouseLeftClickEventArgs.#ctor(ModulusFE.ChartPanel,System.Double,System.Double,System.Double,System.Nullable{System.DateTime})">
            <summary>
             Ctor  
            </summary>
            <param name="panel"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="price"></param>
            <param name="timestamp"></param>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMouseLeftClickEventArgs.Panel">
            <summary>
            Gets the reference to the panel where mouse was clicked
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMouseLeftClickEventArgs.X">
            <summary>
            Gets the mouse X coordinate
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMouseLeftClickEventArgs.Y">
            <summary>
            Gets the mouse Y coordinate. 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMouseLeftClickEventArgs.Price">
            <summary>
            Gets the Y-axis price value that corresponds to mouse position. 
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelMouseLeftClickEventArgs.Timestamp">
            <summary>
            Gets the X-axis Timestamp value that corresponds to mouse position
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.LineStudyCreatedEventArgs">
            <summary>
            A class that provides data for <see cref="E:ModulusFE.StockChartX.LineStudyCreated"/> event.
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.LineStudyCreatedEventArgs.#ctor(ModulusFE.LineStudies.LineStudy)">
            <summary>
            Constructor
            </summary>
            <param name="lineStudy"></param>
        </member>
        <member name="P:ModulusFE.StockChartX.LineStudyCreatedEventArgs.LineStudy">
            <summary>
            A reference to LineStudy
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.ChartPanelStatusChangedEventArgs">
            <summary>
            A class that provides data for <see cref="E:ModulusFE.StockChartX.ChartPanelStatusChanged"/> event
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.ChartPanelStatusChangedEventArgs.#ctor(ModulusFE.ChartPanel,ModulusFE.StockChartX.ChartStatus,ModulusFE.StockChartX.ChartStatus)">
            <summary>
            Constructor
            </summary>
            <param name="chartPanel"></param>
            <param name="oldStatus"></param>
            <param name="newStatus"></param>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelStatusChangedEventArgs.OldStatus">
            <summary>
            Old status
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelStatusChangedEventArgs.NewStatus">
            <summary>
            New status
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.ChartPanelStatusChangedEventArgs.ChartPanel">
            <summary>
            A reference to ChartPanel
            </summary>
        </member>
        <member name="T:ModulusFE.StockChartX.BeforeZoomEventArgs">
            <summary>
            A class that provides data for <see cref="E:ModulusFE.StockChartX.BeforeZoom"/> event
            </summary>
        </member>
        <member name="M:ModulusFE.StockChartX.BeforeZoomEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            ctor
            </summary>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
        </member>
        <member name="P:ModulusFE.StockChartX.BeforeZoomEventArgs.StartIndex">
            <summary>
            Gets the zoom area start index
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.BeforeZoomEventArgs.EndIndex">
            <summary>
            Gets the zoom area end index
            </summary>
        </member>
        <member name="P:ModulusFE.StockChartX.BeforeZoomEventArgs.Cancel">
            <summary>
            Gets or sets whether the zoom operation needs to be canceled
            </summary>
        </member>
        <member name="T:ModulusFE.Tasdk.LinearRegression">
            <summary>
             Linear Regression type of calculations
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.LinearRegression.Regression(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Regression
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.LinearRegression.TimeSeriesForecast(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Time Series Forecast
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.LinearRegression.TimeSeriesForecast(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Time Series Forecast
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="T:ModulusFE.LineStudies.VerticalLine">
            <summary>
             Vertical line
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.VerticalLine.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.LineStudies.VerticalLine.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.VerticalLine.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.VerticalLine.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.VerticalLine.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.VerticalLine.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.VerticalLine.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.VerticalLine.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.HighMinusLow">
            <summary>
            Returns the high price minus the low price.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.HighMinusLow.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.HighMinusLow.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Controls.ColorSpace">
            <summary>
            Contains helper methods for use by the ColorPicker control.
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ColorSpace.ConvertHsvToRgb(System.Double,System.Double,System.Double)">
            <summary>
            Converts from Hue/Sat/Val (HSV) color space to Red/Green/Blue color space.
            Algorithm ported from: http://www.colorjack.com/software/dhtml+color+picker.html
            </summary>
            <param name="h">The Hue value.</param>
            <param name="s">The Saturation value.</param>
            <param name="v">The Value value.</param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Controls.ColorSpace.ConvertRgbToHsv(System.Windows.Media.Color)">
            <summary>
            Converts from the Red/Green/Blue color space to the Hue/Sat/Val (HSV) color space.
            Algorithm ported from: http://www.codeproject.com/KB/recipes/colorspace1.aspx
            </summary>
            <param name="c">The color to convert.</param>
            <returns></returns>
        </member>
        <member name="T:ModulusFE.ChartPanelTitleBar">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanelTitleBar.DefaultBrush">
            <summary>
             Default 3D brush for panel title bar
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelTitleBar.#ctor">
            <summary>
             Ctor
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelTitleBar.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanelTitleBar.MaximizeBoxProperty">
            <summary>
             Gets or sets a value indicating whether the Maximize button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanelTitleBar.MinimizeBoxProperty">
            <summary>
             Gets or sets a value indicating whether the Minimize button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanelTitleBar.CloseBoxProperty">
            <summary>
             Gets or sets a value indicating whether the Close button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelTitleBar.MaximizeBox">
            <summary>
             Gets or sets a value indicating whether the Maximize button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelTitleBar.MinimizeBox">
            <summary>
             Gets or sets a value indicating whether the Minimize button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelTitleBar.CloseBox">
            <summary>
             Gets or sets a value indicating whether the Close button is displayed in the caption bar of the panel.
            </summary>
        </member>
        <member name="T:SilverlightContrib.Xaml.XamlWriterSettings">
            <summary>
            Specifies the features for the XAML writer.
            </summary>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriterSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SilverlightContrib.Xaml.XamlWriterSettings"/> class.
            </summary>
        </member>
        <member name="P:SilverlightContrib.Xaml.XamlWriterSettings.WriteDefaultValues">
            <summary>
            Gets or sets a value indicating whether to write default values.
            </summary>
            <value><c>true</c> if write default values; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:SilverlightContrib.Xaml.XamlWriterSettings.MaxUIElements">
            <summary>
            Gets or sets the maximum number of UI elements to write.
            </summary>
            <value>The max UI elements.</value>
        </member>
        <member name="T:ModulusFE.Indicators.ElderRayBearPower">
            <summary>
            The Elder Ray indicator, developed in 1989 by Dr. Elder, measures bullish and bearish "power" by comparing the daily high and low to a moving average.
            </summary>
            <remarks>A buy signal occurs when Bear Power is negative but moving upward and Bull Power has recently increased. Conversely, a sell signal occurs when Bull Power is positive but moving downward and Bear Power has recently decreased.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            <item><term>int Moving Average Type </term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ElderRayBearPower.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ElderRayBearPower.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.EhlerFisherTransform">
            <summary>
            Ehler's Fisher Transform is an oscillator that is based on the principle that security prices do not have a Gaussian probability distribution function.
            
            The Fisher Transform makes the probability distribution function nearly Gaussian, creating turning points that are sharply peaked for easier identification of trend changes.
            </summary>
            <remarks>A trigger line is typically plotted with Ehler's Fisher Transform. Buy and sell signals occur when the trigger line crosses over or under the indicator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.EhlerFisherTransform.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.EhlerFisherTransform.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.CoppockCurve">
            <summary>
            The Coppock Curve, developed by Edwin Coppock and published in Barron's Magazine in 1962, is based on a 14-month and 11-month rate of change, smoothed by a 10-period weighted moving average.
            </summary>
            <remarks>The Coppock Curve generates buy signals when the value falls below zero and turns upwards from a low point.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.CoppockCurve.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.CoppockCurve.TrueAction">
            <summary>
            Action to be executed for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Tasdk.Recordset">
            <summary>
            Recorset class, keeps multiple Fields inside
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.AddField(ModulusFE.Tasdk.Field)">
            <summary>
             Adds a new field
            </summary>
            <param name="newField">new field</param>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.GetIndex(System.String)">
            <summary>
             Returns the index of a field
            </summary>
            <param name="FieldName">Field Name</param>
            <returns>Field index</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.RenameField(System.String,System.String)">
            <summary>
             Renames a field
            </summary>
            <param name="OldFieldName">Old name</param>
            <param name="NewFieldName">New name</param>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.RemoveField(System.String)">
            <summary>
             Removes a field from field list
            </summary>
            <param name="FieldName">Field name</param>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.Value(System.String,System.Int32)">
            <summary>
             Returns a value from a field by record index
            </summary>
            <param name="FieldName">Field name</param>
            <param name="RecordIndex">Record Index</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.ValueEx(System.String,System.Int32)">
            <summary>
             Returna a value from field by record index or 0.0 if such a field doesn't exists
            </summary>
            <param name="FieldName">Field name</param>
            <param name="RecordIndex">Record index</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.Value(System.String,System.Int32,System.Double)">
            <summary>
             Sets field's value at a specified record index
            </summary>
            <param name="FieldName">Field name</param>
            <param name="RowIndex">Record index</param>
            <param name="Value">New value</param>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.GetField(System.String)">
            <summary>
             Returns a field by its name
            </summary>
            <param name="FieldName">Field name</param>
            <returns>Reference to a Field object</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.CopyField(ModulusFE.Tasdk.Field,System.String)">
            <summary>
             Copies value into given Field from a Field given by its name
            </summary>
            <param name="FieldDestination">Field to copy values to.</param>
            <param name="SourceFieldName">Field name from copy values from</param>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.GetName(System.Int32)">
            <summary>
             Retuns field name by its index
            </summary>
            <param name="FieldIndex">Field index</param>
            <returns>Field name</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Recordset.IsFieldValid(System.String)">
            <summary>
             Checks is a field with given name exists
            </summary>
            <param name="FieldName">Needed name</param>
            <returns>true if such a name exists, false otherwise</returns>
        </member>
        <member name="P:ModulusFE.Tasdk.Recordset.Navigator_">
            <summary>
            Reference to the Navigator
            </summary>
        </member>
        <member name="P:ModulusFE.Tasdk.Recordset.FieldCount">
            <summary>
             Gets the number of fields currently in recordset
            </summary>
        </member>
        <member name="T:ModulusFE.Tasdk.Oscillator">
            <summary>
             Oscillator type of calcualtions
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.ChandeMomentumOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Chande Momentum Oscillator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.ChandeMomentumOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Chande Momentum Oscillator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.Momentum(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Momentum
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.Momentum(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Momentum
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.TRIX(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             TRIX
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.TRIX(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             TRIX
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.UltimateOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.Int32,System.Int32)">
            <summary>
             Ultimate Oscilator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="Cycle1">Cycle 1</param>
            <param name="Cycle2">Cycle 2</param>
            <param name="Cycle3">Cycle 3</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.UltimateOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
             Ultimate Oscilator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="Cycle1">Cycle 1</param>
            <param name="Cycle2">Cycle 2</param>
            <param name="Cycle3">Cycle 3</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.VerticalHorizontalFilter(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Vertical Horizontal Filter
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.VerticalHorizontalFilter(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Vertical Horizontal Filter
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.WilliamsPctR(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32)">
            <summary>
             William %R
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.WilliamsPctR(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.String)">
            <summary>
             William %R
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.WilliamsAccumulationDistribution(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset)">
            <summary>
             Williams Acumulation Distribution
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.WilliamsAccumulationDistribution(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.String)">
            <summary>
             Williams Acumulation Distribution
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.VolumeOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.Int32,System.Int32)">
            <summary>
             Volume Oscilator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="Volume">Field Volume</param>
            <param name="ShortTerm">Shor tTerm</param>
            <param name="LongTerm">Long Term</param>
            <param name="PointsOrPercent">Point or Percent, 0 - Point, 1 - Percent</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.VolumeOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
             Volume Oscilator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="Volume">Field Volume</param>
            <param name="ShortTerm">Shor tTerm</param>
            <param name="LongTerm">Long Term</param>
            <param name="PointsOrPercent">Point or Percent, 0 - Point, 1 - Percent</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.ChaikinVolatility(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.Int32,ModulusFE.IndicatorType)">
            <summary>
             Chaikin Volatility
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <param name="ROC">ROC</param>
            <param name="MAType">Moving Averager Type</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.ChaikinVolatility(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.Int32,ModulusFE.IndicatorType,System.String)">
            <summary>
             Chaikin Volatility
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <param name="ROC">ROC</param>
            <param name="MAType">Moving Averager Type</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.StochasticOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.Int32,System.Int32,ModulusFE.IndicatorType)">
            <summary>
             Stochastic Oscilator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="KPeriods">K Periods</param>
            <param name="KSlowingPeriods">K Slowing Periods</param>
            <param name="DPeriods">D Periods</param>
            <param name="MAType">Moving Average Type</param>
            <returns>Recordset</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.PriceOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.Int32,ModulusFE.IndicatorType)">
            <summary>
             Price Oscillator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="LongCycle">Long Cycle</param>
            <param name="ShortCycle">Short Cycle</param>
            <param name="MAType">Moving Average Type</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.PriceOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.Int32,ModulusFE.IndicatorType,System.String)">
            <summary>
             Price Oscillator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="LongCycle">Long Cycle</param>
            <param name="ShortCycle">Short Cycle</param>
            <param name="MAType">Moving Average Type</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.MACD(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.Int32,System.Int32)">
            <summary>
             MACD
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="SignalPeriods">Signal Periods</param>
            <param name="LongCycle">Long Cycle</param>
            <param name="ShortCycle">Short Cycle</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.MACD(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
             MACD
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="SignalPeriods">Signal Periods</param>
            <param name="LongCycle">Long Cycle</param>
            <param name="ShortCycle">Short Cycle</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.MACDHistogram(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.Int32,System.Int32)">
            <summary>
             MACD Histogram
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="SignalPeriods">Signal Periods</param>
            <param name="LongCycle">Long Cycle</param>
            <param name="ShortCycle">Short Cycle</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.MACDHistogram(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
             MACD Histogram
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="SignalPeriods">Signal Periods</param>
            <param name="LongCycle">Long Cycle</param>
            <param name="ShortCycle">Short Cycle</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.EaseOfMovement(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,ModulusFE.IndicatorType)">
            <summary>
             Easy Of Movement
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <param name="MAType">Moving Average Type</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.EaseOfMovement(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,ModulusFE.IndicatorType,System.String)">
            <summary>
             Easy Of Movement
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <param name="MAType">Moving Average Type</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.DetrendedPriceOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,ModulusFE.IndicatorType)">
            <summary>
             Detrended Price Oscilator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="MAType">Moving Average Type</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.DetrendedPriceOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,ModulusFE.IndicatorType,System.String)">
            <summary>
             Detrended Price Oscilator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="MAType">Moving Average Type</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.ParabolicSAR(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field)">
            <summary>
             Parabolic SAR
            </summary>
            <param name="pNav">Navigator</param>
            <param name="HighPrice">High Price</param>
            <param name="LowPrice">Low Price</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.ParabolicSAR(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field,System.Double,System.Double,System.String)">
            <summary>
             Parabolic SAR
            </summary>
            <param name="pNav">Navigator</param>
            <param name="HighPrice">High Price</param>
            <param name="LowPrice">Low Price</param>
            <param name="MinAF">Min AF</param>
            <param name="MaxAF">MAX AF</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.DirectionalMovementSystem(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32)">
            <summary>
             Directional Movement System
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.TrueRange(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset)">
            <summary>
             True Range
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.TrueRange(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.String)">
            <summary>
             True Range
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.Aroon(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32)">
            <summary>
             Arron
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.RainbowOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,ModulusFE.IndicatorType)">
            <summary>
             Rainbow Oscillator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Levels">Levels</param>
            <param name="MAType">Moving Average Type</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.RainbowOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,ModulusFE.IndicatorType,System.String)">
            <summary>
             Rainbow Oscillator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Levels">Levels</param>
            <param name="MAType">Moving Average Type</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.FractalChaosOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32)">
            <summary>
             Fractal Chaos Oscillator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.FractalChaosOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32,System.String)">
            <summary>
             Fractal Chaos Oscillator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.PrimeNumberOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field)">
            <summary>
             Prime Number Oscilator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Oscillator.PrimeNumberOscillator(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.String)">
            <summary>
             Prime Number Oscilator
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="T:ModulusFE.PriceStyles.Models.PriceStyleStandardModel">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.PaintObjects.IPaintObject.SetArgs(System.Object[])">
            <summary>
            This method gets called before adding paint object to canvas
            Here we can setup different objects style that will get added
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:ModulusFE.PaintObjects.IPaintObject.AddTo(System.Windows.Controls.Canvas)">
            <summary>
            After the object created and initialized it will be added to Canvas
            </summary>
            <param name="canvas"></param>
        </member>
        <member name="T:ModulusFE.LineStudies.ImageObject">
            <summary>
            Image type line study. It can show external image, image from resource
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.IMouseAble">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.IMouseAble.MouseDown">
            <summary>
             Occurs when any mouse button is pressed while the pointer is over this element.
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.IMouseAble.MouseEnter">
            <summary>
             Occurs when the mouse pointer enters the bounds of this element.
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.IMouseAble.MouseLeave">
            <summary>
             Occurs when the mouse pointer leaves the bounds of this element.
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.IMouseAble.MouseMove">
            <summary>
             Occurs when the mouse pointer moves while over this element.
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.IMouseAble.MouseUp">
            <summary>
             Occurs when any mouse button is released over this element.
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.ImageObject.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.CanvasLeftChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.CanvasTopChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.TooltipChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.Align">
            <summary>
             Gets or sets image' hot spot position
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.ImageObject.MouseDown">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.ImageObject.MouseEnter">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.ImageObject.MouseLeave">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.ImageObject.MouseMove">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.ImageObject.MouseUp">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.CanvasLeft">
            <summary>
             Gets or sets the Left position of image
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.CanvasTop">
            <summary>
            Gets or sets the top position of image
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ImageObject.Tooltip">
            <summary>
             Gets or sets the tooltip for this image object
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.ImageObject.ImageAlign">
            <summary>
             Specifies where the image hotspot (current X &amp; Y coordinates) is located
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.ImageAlign.TopLeft">
            <summary>
             Top Left
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.ImageAlign.TopMiddle">
            <summary>
             Top Middle
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.ImageAlign.TopRight">
            <summary>
             Top Right
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.ImageAlign.BottomLeft">
            <summary>
             Bottom Left
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.ImageAlign.BottomMiddle">
            <summary>
             Bottom Middle
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.ImageAlign.BottomRight">
            <summary>
             Bottom Right
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.ImageAlign.LeftMiddle">
            <summary>
             Left Middle
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.ImageAlign.RightMiddle">
            <summary>
             Right Middle
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.ImageObject.ImageAlign.Center">
            <summary>
             Image center
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.TrueRange">
            <summary>
            The Average True Range (Wilder) measures market volatility.
            </summary>
            <remarks>High ATR values may signal market bottoms, and low ATR values may signal neutral markets.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.TrueRange.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.TrueRange.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.TRIX">
            <summary>
            TRIX is a momentum oscillator that shows the rate of change of an exponentially averaged closing price.
            </summary>
            <remarks>The most common interpretation of the TRIX oscillator is to buy when the oscillator rises and sell when the oscillator falls. 3, 8 and 14 period moving averages are often used to smooth the TRIX oscillator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.TRIX.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.TRIX.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.StochasticMomentumIndex">
            <summary>
            The Stochastic Momentum Index, developed by William Blau, first appeared in the January 1993 issue of Stocks &amp; Commodities magazine. This indicator plots the closeness relative to the midpoint of the recent high/low range.
            </summary>
            <remarks>The Stochastic Momentum Index has two components: %K and %D. %K is most often displayed as a solid line and %D is often shown as a dotted line. 
            The most widely used method for interpreting the Stochastic Momentum Index is to buy when either component rises above 40 or sell 
            when either component falls below 40. Another way to interpret the Stochastic Momentum Index is to buy when %K rises above %D, 
            and conversely, sell when %K falls below %D.
            The most commonly used arguments are 13 for %K periods, 25 for %K smoothing, 2 for %K double smoothing, and 9 for %D periods.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int %K Periods</term></item>
            <item><term>int %K Smoothing</term></item>
            <item><term>int %K Double Smoothing</term></item>
            <item><term>int %D Periods</term></item>
            <item><term>int Moving Average Type</term></item>
            <item><term>int %D Moving Average Type</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.StochasticMomentumIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.StochasticMomentumIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.NegativeVolumeIndex">
            <summary>
            The Negative Volume Index shows focus on periods when volume decreases from the previous period.
            </summary>
            <remarks>The interpretation of the Negative Volume Index is that well-informed investors are buying when the index falls and uninformed investors are buying when the index rises.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>str Volume</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.NegativeVolumeIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.NegativeVolumeIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.CenterOfGravity">
            <summary>
            The Center Of Gravity oscillator, by John Ehlers, shows a comparison of recent prices versus older prices within a sliding window.
            The prices can be thought of as being placed on two ends of a beam that is supported in the center. The oscillator represents the balance point or center of gravity on the beam.
            </summary>
            <remarks>The Center of Gravity oscillator decreases when prices rise and increases when prices fall.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.CenterOfGravity.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.CenterOfGravity.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Tasdk.TASDK">
            <summary>
             Common functions for the TA-SDK library
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.TASDK.max``1(``0,``0,``0)">
            <summary>
             Returns maximum from 2 given numbers. If they are equal returns defaultValue
            </summary>
            <param name="Value1">Value1</param>
            <param name="Value2">Value2</param>
            <param name="defValue">Default value in case values are equal</param>
            <typeparam name="T">Parameter type</typeparam>
            <returns>Maximum or default value</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.TASDK.min``1(``0,``0,``0)">
            <summary>
             Returns minimum from 2 given numbers. If they are equal returns defaultValue
            </summary>
            <param name="Value1">Value1</param>
            <param name="Value2">Value2</param>
            <param name="defValue">Default value in case values are equal</param>
            <typeparam name="T">Parameter type</typeparam>
            <returns>Minimum or default value</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.TASDK.Normalize(System.Double,System.Double,System.Double)">
            <summary>
             Returns a normalized value, between 0..1
            </summary>
            <param name="MaxValue">Max Value</param>
            <param name="MinValue">Min Value</param>
            <param name="ValueToBeNormalized">Value to be normalized</param>
            <returns>Normalized value</returns>
        </member>
        <member name="T:ModulusFE.Tasdk.Field">
            <summary>
             Field class used to store values that are used in calculations
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.Field.#ctor(System.Int32,System.String)">
            <summary>
             Constructor
            </summary>
            <param name="iRecordCount">Record count that will be stored</param>
            <param name="sName">Field Name</param>
        </member>
        <member name="M:ModulusFE.Tasdk.Field.Value(System.Int32)">
            <summary>
             Returns a value by index
            </summary>
            <param name="iIndex">Index</param>
            <returns>Value</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Field.ValueEx(System.Int32)">
            <summary>
             Returns a value by index or 0.0 if the value is null
            </summary>
            <param name="iIndex">Index</param>
            <returns>Value or 0.0</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Field.Value(System.Int32,System.Nullable{System.Double})">
            <summary>
             Sets the value at a given index
            </summary>
            <param name="iIndex">Index</param>
            <param name="dValue">New Value</param>
        </member>
        <member name="M:ModulusFE.Tasdk.Field.ValueStr(System.Int32)">
            <summary>
             Gets a string value from a specified index
            </summary>
            <param name="iIndex">Index</param>
            <returns>String value</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Field.ValueStr(System.Int32,System.String)">
            <summary>
             Sets a string value at a specified index
            </summary>
            <param name="iIndex">Index</param>
            <param name="sValue">New string value</param>
        </member>
        <member name="P:ModulusFE.Tasdk.Field.Note_">
            <summary>
             A note about this field
            </summary>
        </member>
        <member name="P:ModulusFE.Tasdk.Field.RecordCount">
            <summary>
             Gets RecordCount currently stored
            </summary>
        </member>
        <member name="P:ModulusFE.Tasdk.Field.Name">
            <summary>
             Field Name
            </summary>
        </member>
        <member name="T:ModulusFE.SeriesTitleLabel">
            <summary>
            internal usage
            </summary>
        </member>
        <member name="M:ModulusFE.SeriesTitleLabel.#ctor(ModulusFE.Series)">
            <summary>
            internal usage
            </summary>
        </member>
        <member name="F:ModulusFE.SeriesTitleLabel.TitleProperty">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.SeriesTitleLabel.TitleChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Title Changed event
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:ModulusFE.SeriesTitleLabel.SeriesStrokeProperty">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.SeriesTitleLabel.Title">
            <summary>
             Gets the title displayed
            </summary>
        </member>
        <member name="P:ModulusFE.SeriesTitleLabel.SeriesStroke">
            <summary>
             Gets the series stroke brush
            </summary>
        </member>
        <member name="P:ModulusFE.SeriesTitleLabel.ShowFrame">
            <summary>
             Gets whether to show the frame arround title
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.QuadrantLines">
            <summary>
            Quandrant lines line study
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.QuadrantLines.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.LineStudies.QuadrantLines.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.QuadrantLines.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.QuadrantLines.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.QuadrantLines.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.QuadrantLines.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.QuadrantLines.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.QuadrantLines.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.Ellipse">
            <summary>
            Ellipse line study
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.IShapeAble">
            <summary>
             An interface that specifies that an object is able to have different properties specified to a shape
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.IShapeAble.Fill">
            <summary>
             Gets or sets the Brush that specifies how the shape's interior is filled
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.Ellipse.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="M:ModulusFE.LineStudies.Ellipse.SetClipingAreaInternal(System.Nullable{System.Windows.Rect})">
            <summary>
            
            </summary>
            <param name="paintableRect"></param>
        </member>
        <member name="P:ModulusFE.LineStudies.Ellipse.Fill">
            <summary>
            Gets or sets the background the object's background
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.Ellipse.MouseDown">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.Ellipse.MouseEnter">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.Ellipse.MouseLeave">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.Ellipse.MouseMove">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.Ellipse.MouseUp">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Ellipse.Element">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Ellipse.Segment">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Ellipse.Parent">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Ellipse.IsSelected">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Ellipse.ZIndex">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Ellipse.Chart">
            <summary>
            
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Ellipse.LineStudy">
            <summary>
            
            </summary>
        </member>
        <member name="T:ModulusFE.Interfaces.IValuePresenter">
            <summary>
             Basic interface for various value presenter for LineStudies, Series Tick Boxes and other chart elements
            </summary>
        </member>
        <member name="M:ModulusFE.Interfaces.IValuePresenter.Show(System.Boolean)">
            <summary>
             Show <see cref="P:ModulusFE.Interfaces.IValuePresenter.ValuePresenter"/>
            </summary>
            <param name="show"></param>
        </member>
        <member name="P:ModulusFE.Interfaces.IValuePresenter.ValuePresenter">
            <summary>
             Reference to a control that will present the values
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.PriceOscillator">
            <summary>
            The Price Oscillator shows a spread of two moving averages.
            </summary>
            <remarks>The Price Oscillator is basically a moving average spread. Buying usually occurs when the oscillator rises, and conversely, selling usually occurs when the oscillator falls.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Long Cycle</term></item>
            <item><term>int Short Cycle</term></item>
            <item><term>int Moving Average Type</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.PriceOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.PriceOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.ParabolicSAR">
            <summary>
            The Parabolic SAR was  developed by Welles Wilder. This indicator is always in the market (whenever a position is closed, an opposing position is taken).  The Parabolic SAR indicator is most often used to set trailing price stops. A stop and reversal (SAR) occurs when the price penetrates a  Parabolic SAR level.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>dbl Min AF (accumulation factor)</term></item>
            <item><term>dbl Max AF (accumulation factor)</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ParabolicSAR.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ParabolicSAR.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.LinearRegressionRSquared">
            <summary>
            Linear regression is a common statistical method used to forecast values using least squares fit.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.LinearRegressionRSquared.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.LinearRegressionRSquared.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.CommodityChannelIndex">
            <summary>
            The CCI was developed by Donald Lambert. The purpose of this indicator is to identify cyclical turns in commodities. 
            </summary>
            <remarks>This indicator oscillates between an overbought and oversold condition and works best in a sideways market.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.CommodityChannelIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.CommodityChannelIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.ChandeMomentumOscillator">
            <summary>
            The Chande Momentum Oscillator (Chande) is an advanced momentum oscillator derived from linear regression.
            </summary>
            <remarks>Increasingly high values of CMO may indicate that prices are trending strongly upwards. Conversely, increasingly low values of CMO may indicate that prices are trending strongly downwards. CMO is related to MACD and Price Rate of Change (ROC).
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ChandeMomentumOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ChandeMomentumOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.AroonOscillator">
            <summary>
            Aroon Oscillator
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.AroonOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.AroonOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Controls.HSV">
            <summary>
            Data structure that represents a HSV value.
            </summary>
        </member>
        <member name="T:ModulusFE.YAxisCanvas">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.YAxisCanvas.#ctor">
            <summary>
             Constructor
            </summary>
        </member>
        <member name="T:ModulusFE.InfoPanelItem">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.InfoPanelItem.Caption">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.InfoPanelItem.Value">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.InfoPanelItem.ValueEx">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.ChartPanelTitleCaptionEntry">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelTitleCaptionEntry.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelTitleCaptionEntry.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="T:ModulusFE.IndicatorDialogInternal">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.IndicatorDialogInternal.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ModulusFE.IndicatorDialogInternal.#ctor">
            <summary>
             Ctor
            </summary>
        </member>
        <member name="F:ModulusFE.IndicatorDialogInternal.LabelFontSizeProperty">
            <summary>
            LabelFontSize
            </summary>
        </member>
        <member name="M:ModulusFE.IndicatorDialogInternal.OnLabelFontSizeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.IndicatorDialogInternal.LabelFontForegroundProperty">
            <summary>
            LabelForeground
            </summary>
        </member>
        <member name="M:ModulusFE.IndicatorDialogInternal.OnLabelFontForegroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.IndicatorDialogInternal.DialogBackgroundProperty">
            <summary>
            DialogBackground
            </summary>
        </member>
        <member name="M:ModulusFE.IndicatorDialogInternal.OnDialogBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:ModulusFE.IndicatorDialogInternal.LabelFontSize">
            <summary>
            LabelFontSize summary
            </summary>
        </member>
        <member name="P:ModulusFE.IndicatorDialogInternal.LabelForeground">
            <summary>
            LabelForeground summary
            </summary>
        </member>
        <member name="P:ModulusFE.IndicatorDialogInternal.DialogBackground">
            <summary>
            DialogBackground summary
            </summary>
        </member>
        <member name="T:ModulusFE.ChartElementProperties.ColorPropertyPresenter">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartElementProperties.ColorPropertyPresenter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ModulusFE.ChartElementProperties.ColorPropertyPresenter.#ctor">
            <summary>
             ctor
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.ColorPropertyPresenter.Value">
            <summary>
             
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.ColorPropertyPresenter.Control">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.PopupSL">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.PopupSL.#ctor(System.Windows.Controls.Primitives.Popup)">
            <summary>
             Ctor
            </summary>
            <param name="popup"></param>
        </member>
        <member name="P:ModulusFE.PopupSL.PlacementTarget">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PopupSL.Placement">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.PopupSL.IsOpen">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.KlingerVolumeOscillator">
            <summary>
            The Klinger Volume Oscillator by Stephen J. Klinger is based on cumulative volume. The security's volume is added or subtracted based on the direction of the Typical Price.
            </summary>
            <remarks>It is considered bullish when KVO rises above zero if prices are falling. Likewise, it is considered bearish when KVO falls below zero if prices are rising.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Short Cycle</term></item>
            <item><term>int Long Cycle</term></item>
            <item><term>int Signal Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.KlingerVolumeOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.KlingerVolumeOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.LineStudies.StaticText">
            <summary>
             Static Text
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.StaticText.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="F:ModulusFE.LineStudies.StaticText.TextChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.StaticText.FontFamilyChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.StaticText.FontSizeChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.StaticText.ForegroundChangedEventArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.StaticText.CanvasLeftChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.StaticText.CanvasTopChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.Text">
            <summary>
             Text that is shown 
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.FontFamily">
            <summary>
             Gets or sets the FontFamily for text
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.FontSize">
            <summary>
             Gets or sets the FontSize for text
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.FontName">
            <summary>
            Font name used to show the text
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.Foreground">
            <summary>
             Gets or sets the foreground
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.StaticText.MouseDown">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.StaticText.MouseEnter">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.StaticText.MouseLeave">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.StaticText.MouseMove">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.StaticText.MouseUp">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.BaseProperties">
            <summary>
            Basic properties
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.CanvasLeft">
            <summary>
             Gets or sets the left position of text object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.StaticText.CanvasTop">
            <summary>
             Gets or sets the top position of text object
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.HighLowBands">
            <summary>
            High Low Bands consist of triangular moving averages calculated from the underling price, shifted up and down by a fixed percentage, and include a median value.
            </summary>
            <remarks>When prices rise above the upper band or fall below the lower band, a change in direction may occur when the price penetrates the band after a small reversal from the opposite direction.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.HighLowBands.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.HighLowBands.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.EaseOfMovement">
            <summary>
            The Ease of Movement oscillator shows a unique relationship between price change and volume.
            </summary>
            <remarks>The Ease of Movement oscillator rises when prices are trending upwards under low volume, and likewise, the Ease of Movement oscillator falls when prices are trending downwards under low volume.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>str Volume</term></item>
            <item><term>int Periods</term></item>
            <item><term>int Moving Average Type</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.EaseOfMovement.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.EaseOfMovement.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.PanelsContainer">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.PanelsContainer._panelsToBeRepainted">
            <summary>
            List used to remember panels that need to be repainted. It is used in case
            when PriceStyle != psStandard, in this case panel with OHLC series must first be calculated
            this will ensure correct values in xMap that will be used to paint the rest of chart
            </summary>
        </member>
        <member name="M:ModulusFE.PanelsContainer.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.PanelsContainer.ResetPanels">
            <summary>
            repaints and deletes empty panels
            </summary>
        </member>
        <member name="M:ModulusFE.PanelsContainer.MaxMinPanel(ModulusFE.ChartPanel)">
            <summary>
            maximize and restores a panel
            </summary>
            <param name="panel"></param>
        </member>
        <member name="M:ModulusFE.PanelsContainer.CanMovePanel(System.Double,System.Double)">
            <summary>
            A panel can be moved only along the panels with same style
            </summary>
            <returns></returns>
        </member>
        <member name="F:ModulusFE.PanelsContainer.ResizeType.PanelMinimized">
            <summary>
            when minimizing the panel give its height to all other visible panels
            </summary>
        </member>
        <member name="F:ModulusFE.PanelsContainer.ResizeType.NewPanel">
            <summary>
            when adding a new panel it will take the half of above or below panel
            </summary>
        </member>
        <member name="F:ModulusFE.PanelsContainer.ResizeType.InsertExisting">
            <summary>
            used when inserting back a minimized panel. it is used its saved percentage of height
            </summary>
        </member>
        <member name="F:ModulusFE.PanelsContainer.ResizeType.Reposition">
            <summary>
            mostly used after rearranging panels. just reposition, not resize
            </summary>
        </member>
        <member name="F:ModulusFE.PanelsContainer.ResizeType.DeletePanel">
            <summary>
            Used to reverse the NewPanel method
            </summary>
        </member>
        <member name="T:ModulusFE.PanelsBarContainer">
            <summary>
            The bar that keeps the buttons for minimized panels.
            </summary>
        </member>
        <member name="M:ModulusFE.PanelsBarContainer.#ctor">
            <summary>
             Ctor
            </summary>
        </member>
        <member name="M:ModulusFE.PanelsBarContainer.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="E:ModulusFE.PanelsBarContainer.OnButtonClicked">
            <summary>
            
            </summary>
        </member>
        <member name="T:ModulusFE.PanelsBarContainer.PanelsBarButtonClick">
            <summary>
            Event click
            </summary>
        </member>
        <member name="M:ModulusFE.PanelsBarContainer.PanelsBarButtonClick.#ctor(ModulusFE.ChartPanel)">
            <summary>
            ctor
            </summary>
            <param name="chartPanel"></param>
        </member>
        <member name="T:SilverlightContrib.Xaml.Formatter">
            <summary>
            Provides XAML formatting functions.
            </summary>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Boolean)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Int16)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Int32)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Double)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Enum)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.Point)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.Rect)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.Size)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.Thickness)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.CornerRadius)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.GridLength)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.Input.Cursor)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.Media.Color)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Uri)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.Media.FontFamily)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.FontStretch)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.FontStyle)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.FontWeight)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.TextDecorationCollection)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.Media.DoubleCollection)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.Formatter.Format(System.Windows.Media.PointCollection)">
            <summary>
            Formats the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:ModulusFE.Indicators.ChandeForecastOscillator">
            <summary>
            The Chande Forecast Oscillator calculates the deviation between the current bar's price and an n-bar linear regression forecast value.
            </summary>
            <remarks>The market is said to be trending when the Chande Forecast Oscillator remains either above or below the zero line for an extended time.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ChandeForecastOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ChandeForecastOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.WeightedClose">
            <summary>
            Weighted Close is an average of each day’s open, high, low, and close, where more weight is placed on the close.
            </summary>
            <remarks>The Weighted Close indicator is a simple method that offers a simplistic view of market prices.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.WeightedClose.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.WeightedClose.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.UltimateOscillator">
            <summary>
            The Ultimate Oscillator compares prices with three oscillators, using three different periods for calculations.
            </summary>
            <remarks>The most popular interpretation of the Ultimate Oscillator is price/indicator divergence.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Cycle 1</term></item>
            <item><term>int Cycle 2</term></item>
            <item><term>int Cycle 3</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.UltimateOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.UltimateOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.TradeVolumeIndex">
            <summary>
            The Trade Volume index shows whether a security is being accumulated or distribute (similar to the Accumulation/Distribution index).
            </summary>
            <remarks>When the indicator is rising, the security is said to be accumulating. Conversely, when the indicator is falling, the security is said to being distributing. Prices may reverse when the indicator converges with price.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>str Volume</term></item>
            <item><term>dbl Minimum Tick Value</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.TradeVolumeIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.TradeVolumeIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.PerformanceIndex">
            <summary>
            The Performance indicator calculates price performance as a normalized value or percentage.
            </summary>
            <remarks>A Performance indicator shows the price of a security as a normalized value. If the Performance indicator shows 50, then the price of the underlying security has increased 50% since the start of the Performance indicator calculations. Conversely, if the indictor shows –50, then the price of the underlying security has decreased 50% since the start of the Performance indicator calculations.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.PerformanceIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.PerformanceIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.ExponentialMovingAverage">
            <summary>
            An Exponential Moving Average is similar to a Simple Moving Average. An EMA is calculated by applying a small percentage of the current value to the previous value. An EMA applies more weight to recent values.
            </summary>
            <remarks>A Moving Average is most often used to average values for a smoother representation of the underlying price or indicator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ExponentialMovingAverage.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ExponentialMovingAverage.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.ChartPanelMoreIndicator">
            <summary>
             Button used in various places of ChartPanel to create the ability to show
             more information about specific items from underlying panel
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelMoreIndicator.#ctor">
            <summary>
             ctor
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelMoreIndicator.Position">
            <summary>
             Gets the position of indicator. Set by internal code only
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelMoreIndicator.Visible">
            <summary>
             Gets or sets the visibility of control
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelMoreIndicator.Left">
            <summary>
             Gets or sets the left position
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelMoreIndicator.Top">
            <summary>
             Gets or sets the Top position
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.SchaffTrendCycle">
            <summary>
            The Schaff Trend Cycle, by Doug Schaff, combines both Slow Stochastics and the Moving Average Convergence/Divergence (MACD).
            </summary>
            <remarks>Schaff Trend Cycle is interpreted similar to MACD. Buy and sell signals are generated whenever the indicator crosses a signal line, the zero mark line or when the indicator diverges from price.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            <item><term>int Short Cycle</term></item>
            <item><term>int Long Cycle</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.SchaffTrendCycle.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.SchaffTrendCycle.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Segment">
            <summary>
             Segment
            </summary>
        </member>
        <member name="M:ModulusFE.Segment.#ctor">
            <summary>
             Creates an empty segment
            </summary>
        </member>
        <member name="M:ModulusFE.Segment.#ctor(System.Windows.Point,System.Windows.Point)">
            <summary>
             
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:ModulusFE.Segment.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:ModulusFE.Segment.#ctor(System.Windows.Point,System.Double,System.Double)">
            <summary>
             Ctor
            </summary>
            <param name="origin"></param>
            <param name="length"></param>
            <param name="angle"></param>
        </member>
        <member name="M:ModulusFE.Segment.InvokePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.Segment.X1ChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.Segment.Y1ChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.Segment.X2ChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.Segment.Y2ChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.Segment.BindToLine(System.Windows.Shapes.Line)">
            <summary>
            </summary>
            <param name="line"></param>
        </member>
        <member name="M:ModulusFE.Segment.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:ModulusFE.Segment.Set(System.Windows.Point,System.Windows.Point)">
            <summary>
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="M:ModulusFE.Segment.Set(System.Double,System.Double,System.Double,System.Windows.Rect)">
            <summary>
             Postion segment with start in X1, Y1 and end that is border of bounding rectangle
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="angle"></param>
            <param name="boundRectangle"></param>
        </member>
        <member name="M:ModulusFE.Segment.SetThroughPoint(System.Double,System.Double,System.Double,System.Double,System.Windows.Rect)">
            <summary>
            </summary>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="boundRectangle"></param>
        </member>
        <member name="M:ModulusFE.Segment.SetEndThroughPoint(System.Double,System.Double,System.Windows.Rect)">
            <summary>
            </summary>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="boundRectangle"></param>
        </member>
        <member name="M:ModulusFE.Segment.SetEndThroughPoint(System.Windows.Point,System.Windows.Rect)">
            <summary>
            </summary>
            <param name="end"></param>
            <param name="boundRectangle"></param>
        </member>
        <member name="M:ModulusFE.Segment.SetEnd(System.Double,System.Windows.Rect)">
            <summary>
            </summary>
            <param name="angle"></param>
            <param name="boundRectangle"></param>
        </member>
        <member name="M:ModulusFE.Segment.HasPoint(System.Windows.Point,System.Int16)">
            <summary>
            </summary>
            <param name="p"></param>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Segment.SurroundRectangle(System.Double)">
            <summary>
             Returns a polygon that surrounds the given segment
            </summary>
            <param name="thickness"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Segment.Inflate(System.Double)">
            <summary>
             Inflates the current segment
            </summary>
            <param name="pct"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Segment.Normal">
            <summary>
             Returns a point that will be used to draw a normal-line to current segment
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Segment.DistanceToPoint(System.Windows.Point)">
            <summary>
             Gets the distance between current segment and the specified point
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Segment.Normalize">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.Segment.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="E:ModulusFE.Segment.PropertyChanged">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Segment.X1">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Segment.Y1">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Segment.X2">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Segment.Y2">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Segment.Start">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Segment.End">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Segment.Angle">
            <summary>
             Gets segment's angle
            </summary>
        </member>
        <member name="P:ModulusFE.Segment.Length">
            <summary>
             Gets the segment length
            </summary>
        </member>
        <member name="P:ModulusFE.Segment.Slope">
            <summary>
             Gets the slope of segment
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.WeightedMovingAverage">
            <summary>
            A Weighted Moving Average places more weight on recent values and less weight on older values.
            </summary>
            <remarks>A Moving Average is most often used to average values for a smoother representation of the underlying price or indicator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.WeightedMovingAverage.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.WeightedMovingAverage.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.RainbowOscillator">
            <summary>
            The rainbow oscillator is based upon multiple time frames of a moving average. 
            </summary>
            <remarks>When values stay above 80 or below 20, the trend may reverse suddenly.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Levels</term></item>
            <item><term>int Moving Average Type</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.RainbowOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.RainbowOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.PriceVolumeTrend">
            <summary>
            The Price and Volume Trend index is closely related to the On Balance Volume index.
            </summary>
            <remarks>The Price and Volume Trend index generally precedes actual price movements. The premise is that well-informed investors are buying when the index rises and uninformed investors are buying when the index falls.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>str Volume</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.PriceVolumeTrend.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.PriceVolumeTrend.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.LinearRegressionIntercept">
            <summary>
            Linear regression is a common statistical method used to forecast values using least squares fit.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.LinearRegressionIntercept.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.LinearRegressionIntercept.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.ChaikinVolatility">
            <summary>
            The Chaikin Volatility Oscillator is a moving average derivative of the Accumulation/Distribution index.
            </summary>
            <remarks>The Chaikin Volatility Oscillator adjusts with respect to volatility, independent of long-term price action.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            <item><term>int Rate Of Change</term></item>
            <item><term>int Moving Average Type</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ChaikinVolatility.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ChaikinVolatility.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.ChartPanelMovePlaceholder">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelMovePlaceholder.#ctor">
            <summary>
             ctor
            </summary>
        </member>
        <member name="T:SilverlightContrib.Xaml.XamlWriter">
            <summary>
            Provides XAML serialization for Silverlight runtime objects.
            </summary>
        </member>
        <member name="F:SilverlightContrib.Xaml.XamlWriter.NamespaceClient">
            <summary>
            The XAML client namespace
            </summary>
        </member>
        <member name="F:SilverlightContrib.Xaml.XamlWriter.NamespaceXaml">
            <summary>
            The XAML namespace
            </summary>
        </member>
        <member name="F:SilverlightContrib.Xaml.XamlWriter.PrefixXaml">
            <summary>
            The XAML prefix
            </summary>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.#ctor(System.Xml.XmlWriter,SilverlightContrib.Xaml.XamlWriterSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:SilverlightContrib.Xaml.XamlWriter"/> class.
            </summary>
            <param name="writer">The writer.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.Finalize">
            <summary>
            Finalizes this XamlWriter instance.
            </summary>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.Dispose(System.Boolean)">
            <summary>
            Disposes this instance.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteStartElement(System.String)">
            <summary>
            Writes the start element in the XAML client namespace.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteEndElement">
            <summary>
            Writes the end element.
            </summary>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteStartElement(System.Windows.DependencyObject)">
            <summary>
            Writes the start element of given object.
            </summary>
            <param name="o">The o.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteElement(System.Object)">
            <summary>
            Writes the XAML of specified UI element.
            </summary>
            <param name="el">The element.</param>
            <returns>A value indicating whether the elements has been written</returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteContent(System.Windows.FrameworkElement)">
            <summary>
            Writes the content of specified element.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteElement(System.Windows.Media.Transform)">
            <summary>
            Writes the specified transform element.
            </summary>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteInnerElement(System.Windows.Controls.Control,System.String)">
            <summary>
            Writes the inner element of a control.
            </summary>
            <param name="control">The control.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.String)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.String,System.String)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.String,System.String,System.String)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="name">The name.</param>
            <param name="ns">The ns.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Double,System.Double)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.Media.DoubleCollection)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Enum,System.Enum)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="defaultValue">if set to <c>true</c> [default value].</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.Point,System.Windows.Point)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.Media.PointCollection)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.Size,System.Windows.Size)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.Thickness,System.Windows.Thickness)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.CornerRadius,System.Windows.CornerRadius)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.GridLength,System.Windows.GridLength)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.Input.Cursor,System.Windows.Input.Cursor)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.Media.FontFamily,System.String)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.FontStretch,System.Windows.FontStretch)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.FontStyle,System.Windows.FontStyle)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.FontWeight,System.Windows.FontWeight)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.TextDecorationCollection)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="defaultValue">The default value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.WriteAttribute(System.String,System.Uri)">
            <summary>
            Writes the attribute.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.Save(System.Object)">
            <summary>
            Saves the specified element using the default settings.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.Save(System.Object,SilverlightContrib.Xaml.XamlWriterSettings)">
            <summary>
            Gets the XAML of specified framework element.
            </summary>
            <param name="element">The element.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="M:SilverlightContrib.Xaml.XamlWriter.CreateWriter(System.Text.StringBuilder,System.Boolean,SilverlightContrib.Xaml.XamlWriterSettings)">
            <summary>
            Creates a XAML writer for given output and settings.
            </summary>
            <param name="output">The output.</param>
            <param name="newLineOnAttributes">whether to write attributes on a new line.</param>
            <param name="settings">The settings.</param>
            <returns></returns>
        </member>
        <member name="P:SilverlightContrib.Xaml.XamlWriter.IsXamlComplete">
            <summary>
            Gets a value indicating whether the generated XAML is complete.
            </summary>
        </member>
        <member name="P:SilverlightContrib.Xaml.XamlWriter.IsXamlTruncated">
            <summary>
            Gets a value indicating whether the generated XAML is truncated.
            </summary>
        </member>
        <member name="P:SilverlightContrib.Xaml.XamlWriter.ElementCount">
            <summary>
            Gets the number of written UI elements.
            </summary>
            <value>The element count.</value>
        </member>
        <member name="P:SilverlightContrib.Xaml.XamlWriter.Settings">
            <summary>
            Gets the settings.
            </summary>
            <value>The settings.</value>
        </member>
        <member name="T:ModulusFE.Indicators.IntradayMomentumIndex">
            <summary>
            The Intraday Momentum Index by Tushar Chande is very similar to the RSI except it is based on the relationship between a single bar's open and close prices instead of referencing the previous bar's prices.
            </summary>
            <remarks>Values over 70 indicate an overbought condition while values below 30 indicator an oversold condition.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.IntradayMomentumIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.IntradayMomentumIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.ElderRayBullPower">
            <summary>
            The Elder Ray indicator, developed in 1989 by Dr. Elder, measures bullish and bearish "power" by comparing the daily high and low to a moving average.
            </summary>
            <remarks>A buy signal occurs when Bear Power is negative but moving upward and Bull Power has recently increased. Conversely, a sell signal occurs when Bull Power is positive but moving downward and Bear Power has recently decreased.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            <item><term>int Moving Average Type </term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ElderRayBullPower.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ElderRayBullPower.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Controls.ColorDialogInternal">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ColorDialogInternal.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ColorDialogInternal.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ColorDialogInternal.SelectedColor">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.Controls.ColorDialog">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ColorDialog.#ctor">
            <summary>
             Ctor
            </summary>
        </member>
        <member name="E:ModulusFE.Controls.ColorDialog.OnOK">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ColorDialog.CurrentColor">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.Geometry">
            <summary>
            A help class that deails with Geometry math
            </summary>
        </member>
        <member name="F:ModulusFE.Geometry.ZeroPoint">
            <summary>
            Represents a <see cref="T:System.Windows.Point"/> with 0 coordinates
            </summary>
        </member>
        <member name="F:ModulusFE.Geometry.AngleToRadK">
            <summary>
            Represents the multiplier used to transform degrees to radians
            </summary>
        </member>
        <member name="F:ModulusFE.Geometry.RadToAngleK">
            <summary>
            Represents the multiplier used to transform radians to degrees
            </summary>
        </member>
        <member name="M:ModulusFE.Geometry.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Calculates distance between 2 <see cref="T:System.Windows.Point"/>s
            </summary>
            <param name="self"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Geometry.FindPoint(System.Double,System.Double,System.Windows.Point)">
            <summary>
            Gets a point located at distance from center placed 
            at angle
            </summary>
            <param name="angle"></param>
            <param name="distance"></param>
            <param name="center"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Geometry.FindPoint(System.Windows.Point,System.Double,System.Windows.Rect)">
            <summary>
            Gets a point located at intersection of line starting from center at given angle
            and one of the edges of given rectangle
            </summary>
            <param name="center"></param>
            <param name="angle"></param>
            <param name="rectangle"></param>
            <returns>Coordinates of point or <see cref="F:ModulusFE.Geometry.ZeroPoint"/> in case when center
            is outside of given rectangle
            </returns>
        </member>
        <member name="M:ModulusFE.Geometry.Intersects(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Boolean@)">
            <summary>
            Verifies if 2 segments have an intersection point
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="p3"></param>
            <param name="p4"></param>
            <param name="ok"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Geometry.Intersects(ModulusFE.Segment,ModulusFE.Segment)">
            <summary>
            Verifies if 2 segments have an intersection point
            </summary>
            <param name="AB"></param>
            <param name="CD"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Geometry.DistanceFromLine(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Calculates the distance between a line and a point
            </summary>
            <param name="cx">Point - X</param>
            <param name="cy">Point - Y</param>
            <param name="ax"></param>
            <param name="ay"></param>
            <param name="bx"></param>
            <param name="by"></param>
            <param name="distanceSegment"></param>
            <param name="distanceLine"></param>
        </member>
        <member name="T:ModulusFE.LineStudies.HorizontalLine">
            <summary>
            Horizontal line
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLine.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLine.ReSetLineStudyValue">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLine.XYValuesChanged">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLine.IsCurrentlyVisible">
            <summary>
            Gets whether the underlying <see cref="P:ModulusFE.LineStudies.HorizontalLine.LineStudy"/> is visible.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLine.GetYMinMax(System.Double@,System.Double@)">
            <summary>
            
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLine.EnsureVisible(ModulusFE.LineStudies.LineStudy.EnsureVisibilityPosition)">
            <summary>
             Ensure this lineStudy is visible
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLine.ShowInternal(System.Boolean)">
            <summary>
            Shows the LineStudy
            </summary>
            <param name="show"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLine.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLine.NeededVisibleBounds">
            <summary>
            Gets the boundaries that are needed for a LineStudy to become visible
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLine.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLine.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLine.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLine.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLine.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLine.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLine.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.HorizontalLine.MouseDown">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.HorizontalLine.MouseEnter">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.HorizontalLine.MouseLeave">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.HorizontalLine.MouseMove">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.HorizontalLine.MouseUp">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.HorizontalLineDefStudyValue">
            <summary>
             Default class for value representation of HorizontalLineStudy
            </summary>
        </member>
        <member name="T:ModulusFE.Interfaces.IValueBridge`1">
            <summary>
             Represents a "bridge" between various chart objects, such as LineStudies, Indicators, ... and 
             their extra value presentation.
             In most of the cases instances of objects derived from this interface will server as
             DataContext source for ContentPresenter
            </summary>
        </member>
        <member name="M:ModulusFE.Interfaces.IValueBridge`1.AttachDataSupplier(`0,System.Type[])">
            <summary>
             Method called by the data provider that let's bind the data provider reference to 
             its extended value presenter. In most of the cases you just hold the reference in an interval field
            </summary>
            <param name="objectDataSupplier">A reference to data provider object(LineStudy, Indicator, ...)</param>
            <param name="parametersType">An array of parameter types that will be send to <see cref="M:ModulusFE.Interfaces.IValueBridge`1.NotifyDataChanged(System.Object[])"/> method</param>
        </member>
        <member name="M:ModulusFE.Interfaces.IValueBridge`1.NotifyDataChanged(System.Object[])">
            <summary>
             Method called by the data provider informing that its interval values have been changed.
             Every data provider has its own number nad types of values
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLineDefStudyValue.AttachDataSupplier(ModulusFE.LineStudies.LineStudy,System.Type[])">
            <summary>
            Attaches data supplier
            </summary>
            <param name="lineStudy"></param>
            <param name="parameterTypes"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLineDefStudyValue.NotifyDataChanged(System.Object[])">
            <summary>
            Notifies that internal data was changed
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLineDefStudyValue.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLineDefStudyValue.Value">
            <summary>
             Value
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLineDefStudyValue.Foreground">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLineDefStudyValue.FontSize">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLineDefStudyValue.FontFamily">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.HorizontalLineDefStudyValue.PropertyChanged">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.FrameworkElement">
            <summary>
             WPF UI Element
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.FrameworkElement.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="stroke"></param>
            <param name="chartPanel"></param>
        </member>
        <member name="F:ModulusFE.LineStudies.FrameworkElement.CanvasLeftChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.FrameworkElement.CanvasTopChangedEventsArgs">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.FrameworkElement.ElementWidthChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.FrameworkElement.ElementHeightChangedEventsArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FrameworkElement.Element">
            <summary>
             Returns a reference to the internal <see cref="T:System.Windows.FrameworkElement"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FrameworkElement.CanvasLeft">
            <summary>
             Gets or sets the left position of text object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FrameworkElement.CanvasTop">
            <summary>
             Gets or sets the top position of text object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FrameworkElement.ElementWidth">
            <summary>
            Gets or sets the element width
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FrameworkElement.ElementHeight">
            <summary>
            Gets or sets the element height
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.PositiveVolumeIndex">
            <summary>
            The Positive Volume Index shows focus on periods when volume increases from the previous period.
            </summary>
            <remarks>The interpretation of the Positive Volume Index is that many investors are buying when the index rises, and selling when the index falls.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>str Volume</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.PositiveVolumeIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.PositiveVolumeIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.MovingAverageEnvelope">
             <summary>
             Moving Average Envelopes consist of moving averages calculated from the underling price, shifted up and down by a fixed percentage.
             </summary>
             <remarks>Moving Average Envelopes (or trading bands) can be imposed over an actual price or another indicator.
            When prices rise above the upper band or fall below the lower band, a change in direction may occur when the price penetrates the band after a small reversal from the opposite direction.
            
             Shift is a double value specifying the percentage of shift for each moving average from the actual values.
             <list type="table">
             <listheader>
             <term>Parameters</term>
             </listheader>
             <item><term>str Source</term></item>
             <item><term>int Periods</term></item>
             <item><term>int Moving Average Type</term></item>
             <item><term>dbl Shift</term></item>
             </list>
             </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.MovingAverageEnvelope.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.MovingAverageEnvelope.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Tuple`2">
            <summary>
             Tuple
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="M:ModulusFE.Tuple`2.#ctor(`0,`1)">
            <summary>
             Ctor
            </summary>
            <param name="first"></param>
            <param name="second"></param>
        </member>
        <member name="P:ModulusFE.Tuple`2.First">
            <summary>
             First Value
            </summary>
        </member>
        <member name="P:ModulusFE.Tuple`2.Second">
            <summary>
             Second Value
            </summary>
        </member>
        <member name="T:ModulusFE.InfoPanel">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.InfoPanel.GetReverseX">
            <summary>
            A special version of this function for InfoPanel. The standard version rounds to candle start,
            this version will round to the middle of candle
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.InfoPanel.#ctor(ModulusFE.StockChartX)">
            <summary>
            </summary>
            <param name="chartX"></param>
        </member>
        <member name="P:ModulusFE.InfoPanel.PanelOwnerIndex">
            <summary>
            values from which panel to display
            </summary>
        </member>
        <member name="T:ModulusFE.ChartScroller">
            <summary>
            Defines the scroller part for the chart
            </summary>
        </member>
        <member name="M:ModulusFE.ChartScroller.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModulusFE.ChartScroller"/> class. 
            </summary>
        </member>
        <member name="F:ModulusFE.ChartScroller.MinValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.ChartScroller.OnMinValueChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.ChartScroller.MaxValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.ChartScroller.OnMaxValueChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.ChartScroller.LeftValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.ChartScroller.OnLeftValueChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.ChartScroller.RightValueProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.ChartScroller.OnRightValueChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.ChartScroller.TrackBackgroundProperty">
            <summary>
            TrackBackground
            </summary>
        </member>
        <member name="M:ModulusFE.ChartScroller.OnTrackBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.ChartScroller.TrackButtonsBackgroundProperty">
            <summary>
            TrackButtonsBackground
            </summary>
        </member>
        <member name="M:ModulusFE.ChartScroller.OnTrackButtonsBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.ChartScroller.ThumbButtonBackgroundProperty">
            <summary>
            ThumbButtonBackground
            </summary>
        </member>
        <member name="M:ModulusFE.ChartScroller.OnThumbButtonBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ModulusFE.ChartScroller.OnApplyTemplate">
            <summary>
            
            </summary>
        </member>
        <member name="P:ModulusFE.ChartScroller.Chart">
            <summary>
             Gets or sets a reference to chart object
            </summary>
        </member>
        <member name="E:ModulusFE.ChartScroller.OnPositionChanged">
            <summary>
            Event fired when position changes
            </summary>
        </member>
        <member name="P:ModulusFE.ChartScroller.PositionType">
            <summary>
            Gets the mouse position type
            </summary>
        </member>
        <member name="P:ModulusFE.ChartScroller.MinValue">
            <summary>
            Gets or sets the minimum value
            </summary>
        </member>
        <member name="P:ModulusFE.ChartScroller.MaxValue">
            <summary>
            A description of the property.
            </summary>
        </member>
        <member name="P:ModulusFE.ChartScroller.LeftValue">
            <summary>
            Gets or sets the left value
            </summary>
        </member>
        <member name="P:ModulusFE.ChartScroller.RightValue">
            <summary>
            Gets or sets the right values
            </summary>
        </member>
        <member name="P:ModulusFE.ChartScroller.TrackBackground">
            <summary>
            Gets or sets the Background
            </summary>
        </member>
        <member name="P:ModulusFE.ChartScroller.TrackButtonsBackground">
            <summary>
            Gets or sets the Track Buttons Background
            </summary>
        </member>
        <member name="P:ModulusFE.ChartScroller.ThumbButtonBackground">
            <summary>
            Gets or sets the thumb button background
            </summary>
        </member>
        <member name="T:ModulusFE.ChartScroller.OnPositionChangedHandler">
            <summary>
            Defines a delegate for <see cref="E:ModulusFE.ChartScroller.OnPositionChanged"/> event
            </summary>
            <param name="sender">Object sender</param>
            <param name="newLeft">New left position</param>
            <param name="newRight">New right position</param>
            <param name="cancel">Cancel event or not</param>
        </member>
        <member name="T:ModulusFE.ChartScroller.MouseDownPositionType">
            <summary>
            Specifies where mouse is located
            </summary>
        </member>
        <member name="F:ModulusFE.ChartScroller.MouseDownPositionType.Left">
            <summary>
            On left edge of scroller (zoom)
            </summary>
        </member>
        <member name="F:ModulusFE.ChartScroller.MouseDownPositionType.Right">
            <summary>
            On right edge of scroller (zoom)
            </summary>
        </member>
        <member name="F:ModulusFE.ChartScroller.MouseDownPositionType.All">
            <summary>
            On the body of the scroller (scroll)
            </summary>
        </member>
        <member name="F:ModulusFE.ChartScroller.MouseDownPositionType.None">
            <summary>
            None, mouse outside of control 
            </summary>
        </member>
        <member name="T:ModulusFE.ChartPanelTitleBarButton">
            <summary>
             Represent the button from title bar
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelTitleBarButton.#ctor">
            <summary>
             Ctor
            </summary>
        </member>
        <member name="T:ModulusFE.ChartPanelTitleBarButtonClose">
            <summary>
             Represent the button from title bar
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelTitleBarButtonClose.#ctor">
            <summary>
             ctor
            </summary>
        </member>
        <member name="T:ModulusFE.SL.Brushes">
            <summary>
             Set of Brushes that are missing from standard .NET runtime
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.Transparent">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.Navy">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.SkyBlue">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.Silver">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.White">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.Black">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.Yellow">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.Red">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.Blue">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.DarkRed">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.LightBlue">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Brushes.Green">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.SL.ColorsEx">
            <summary>
             Set or Colors that are missing from .NET standard library
            </summary>
        </member>
        <member name="F:ModulusFE.SL.ColorsEx.Gray">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.ColorsEx.Navy">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.ColorsEx.SkyBlue">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.ColorsEx.Silver">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.ColorsEx.Lime">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.ColorsEx.LightBlue">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.ColorsEx.LightSteelBlue">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.ColorsEx.DarkRed">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.ColorsEx.MidnightBlue">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.GopalakrishnanRangeIndex">
            <summary>
            The Gopalakrishnan Range Index (GAPO) by Jayanthi Gopalakrishnan quantifies the variability of price data based on the log of the price range over an n-bar period.
            </summary>
            <remarks>GAPO helps to identify erratic and smooth markets.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.GopalakrishnanRangeIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.GopalakrishnanRangeIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.ElderThermometer">
            <summary>
            The Elder Force Index is calculated by the change in price from the previous to the current day, multiplied by volume.
            </summary>
            <remarks>Buy signals are generated when the two-day EMA of the Elder Force Index is negative and sell signals are generated when it is positive.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ElderThermometer.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ElderThermometer.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Tasdk.MovingAverage">
            <summary>
            Moving Averages
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.SimpleMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Simple Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.SimpleMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Simple Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.ExponentialMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Exponential Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.ExponentialMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Exponential Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.TimeSeriesMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Time Series Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.TimeSeriesMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Time Series Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.VariableMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Variable Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.VariableMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Variable Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.TriangularMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Triangular Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.TriangularMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Triangular Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.WeightedMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Weighted Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.WeightedMovingAverage(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Weighted Moving Average
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.VIDYA(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.Double)">
            <summary>
             VIDYA
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="R2Scale">R2 Scale</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.VIDYA(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.Double,System.String)">
            <summary>
             VIDYA
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="R2Scale">R2 Scale</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.WellesWilderSmoothing(ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Welles Wilder Smoothing
            </summary>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.MovingAverage.WellesWilderSmoothing(ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Welles Wilder Smoothing
            </summary>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="T:ModulusFE.LineStudies.ErrorChannel">
            <summary>
            Error channel line study
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.ErrorChannel.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.LineStudies.ErrorChannel.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ErrorChannel.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ErrorChannel.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ErrorChannel.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ErrorChannel.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ErrorChannel.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.ErrorChannel.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.VolumeROC">
            <summary>
            The Volume Rate of Change indicator shows clearly whether or not volume is trending in one direction or another.
            </summary>
            <remarks>Sharp Volume ROC increases may signal price breakouts.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Volume</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.VolumeROC.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.VolumeROC.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.PrimeNumberOscillator">
            <summary>
            The prime numbers oscillator was developed by Modulus Financial Engineering, Inc. This indicator finds the nearest prime number from either the top or bottom of the series, and plots the difference between that prime number and the series itself.
            </summary>
            <remarks>This indicator can be used to spot market turning points. When the oscillator remains at the same high point for two consecutive periods in the positive range, consider selling. Conversely, when the oscillator remains at a low point for two consecutive periods in the negative range, consider buying.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.PrimeNumberOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.PrimeNumberOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.IndicatorException">
            <summary>
            Exception type used when a error comes in indicator calculation
            </summary>
        </member>
        <member name="M:ModulusFE.Indicators.IndicatorException.#ctor(System.String,ModulusFE.Indicators.Indicator)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="indicator">Reference to indicator with error</param>
        </member>
        <member name="P:ModulusFE.Indicators.IndicatorException.Indicator">
            <summary>
            Reference to indicator that had an error
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.FractalChaosOscillator">
            <summary>
            The chaotic nature of stock market movements explains why it is sometimes difficult to distinguish hourly charts from monthly charts if the time scale is not given. The patterns are similar regardless of the time resolution. Like the chambers of the nautilus, each level is like the one before it, but the size is different. To determine what is happening in the current level of resolution, the fractal chaos oscillator can be used to examine these patterns.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.FractalChaosOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.FractalChaosOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.ChaikinMoneyFlow">
            <summary>
            The Chaikin Money Flow oscillator is a momentum indicator that spots buying and selling by calculating price and volume together. This indicator is based upon Chaikin Accumulation/Distribution, which is in turn based upon the premise that if a stock closes above its midpoint [(high+low)/2] for the day then there was accumulation that day, and if it closes below its midpoint, then there was distribution that day.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>str Volume Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ChaikinMoneyFlow.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ChaikinMoneyFlow.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.ChartElementProperties.TextBoxPropertyPresenter">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartElementProperties.TextBoxPropertyPresenter.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.TextBoxPropertyPresenter.Value">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.TextBoxPropertyPresenter.Control">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.KeltnerChannel">
            <summary>
            Keltner Channel is a volatility based moving average envelope that shifts a moving average of the True Range indicator by a certain percentage upwards and downwards.
            </summary>
            <remarks>Prices may reverse sharply after exiting and re-entering either the top or bottom band.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            <item><term>dbl Shift</term></item>
            <item><term>int Moving Average Type</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.KeltnerChannel.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.KeltnerChannel.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.IndicatorDialog">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.IndicatorDialog.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.IndicatorDialog.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="E:ModulusFE.IndicatorDialog.OnOk">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.IndicatorDialog.OnCancel">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.IndicatorDialog.OnDelete">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.PaintObjects.ColorExtensions.SetBrightness(System.Windows.Media.Color,System.Double)">
            <summary>
            Sets the absolute brightness of a colour
            </summary>
            <param name="c">Original color</param>
            <param name="brightness">The luminance level to impose</param>
            <returns>an adjusted colour</returns>
        </member>
        <member name="M:ModulusFE.PaintObjects.ColorExtensions.ModifyBrightness(System.Windows.Media.Color,System.Double)">
             <summary>
            Modifies an existing brightness level
            </summary>
            <remarks>
            To reduce brightness use a number smaller than 1. To increase brightness use a number larger tnan 1
            </remarks>
            <param name="c">The original colour</param>
            <param name="brightness">The luminance delta</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:ModulusFE.PaintObjects.ColorExtensions.SetSaturation(System.Windows.Media.Color,System.Double)">
             <summary>
            Sets the absolute saturation level
            </summary>
            <remarks>Accepted values 0-1</remarks>
            <param name="c">An original colour</param>
            <param name="Saturation">The saturation value to impose</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:ModulusFE.PaintObjects.ColorExtensions.ModifySaturation(System.Windows.Media.Color,System.Double)">
             <summary>
            Modifies an existing Saturation level
            </summary>
            <remarks>
            To reduce Saturation use a number smaller than 1. To increase Saturation use a number larger tnan 1
            </remarks>
            <param name="c">The original colour</param>
            <param name="Saturation">The saturation delta</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:ModulusFE.PaintObjects.ColorExtensions.SetHue(System.Windows.Media.Color,System.Double)">
             <summary>
            Sets the absolute Hue level
            </summary>
            <remarks>Accepted values 0-1</remarks>
            <param name="c">An original colour</param>
            <param name="Hue">The Hue value to impose</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:ModulusFE.PaintObjects.ColorExtensions.ModifyHue(System.Windows.Media.Color,System.Double)">
             <summary>
            Modifies an existing Hue level
            </summary>
            <remarks>
            To reduce Hue use a number smaller than 1. To increase Hue use a number larger tnan 1
            </remarks>
            <param name="c">The original colour</param>
            <param name="Hue">The Hue delta</param>
            <returns>An adjusted colour</returns>
        </member>
        <member name="M:ModulusFE.PaintObjects.PanelExtensions.BringToFront(System.Windows.Controls.Panel,System.Windows.UIElement)">
            <summary>
            Assigns the element a z-index which will ensure that 
            it is in front of every other element in the Canvas.
            The z-index of every element whose z-index is between 
            the element's old and new z-index will have its z-index 
            decremented by one.
            </summary>
            <param name="canvas"></param>
            <param name="targetElement">
            The element to be sent to the front of the z-order.
            </param>
        </member>
        <member name="M:ModulusFE.PaintObjects.PanelExtensions.SendToBack(System.Windows.Controls.Panel,System.Windows.UIElement)">
            <summary>
            Assigns the element a z-index which will ensure that 
            it is behind every other element in the Canvas.
            The z-index of every element whose z-index is between 
            the element's old and new z-index will have its z-index 
            incremented by one.
            </summary>
            <param name="canvas"></param>
            <param name="targetElement">
            The element to be sent to the back of the z-order.
            </param>
        </member>
        <member name="M:ModulusFE.PaintObjects.PanelExtensions.UpdateZOrder(System.Windows.Controls.Panel,System.Windows.UIElement,System.Boolean)">
            <summary>
            Helper method used by the BringToFront and SendToBack methods.
            </summary>
            <param name="canvas"></param>
            <param name="element">
            The element to bring to the front or send to the back.
            </param>
            <param name="bringToFront">
            Pass true if calling from BringToFront, else false.
            </param>
        </member>
        <member name="F:ModulusFE.PaintObjects.CanvasExtensions.HitTestGap">
            <summary>
            gap permited for hit testing objects on the chart
            </summary>
        </member>
        <member name="T:ModulusFE.Tasdk.Bands">
            <summary>
            Bands
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.Bands.BollingerBands(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.Int32,ModulusFE.IndicatorType)">
            <summary>
            Bollinger bands
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field source</param>
            <param name="periods">Periods</param>
            <param name="StandardDeviations">Standard deviation</param>
            <param name="MAType">Moving Average Type</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Bands.MovingAverageEnvelope(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,ModulusFE.IndicatorType,System.Double)">
            <summary>
             Moving Average Enveloper
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field Source</param>
            <param name="periods">Periods</param>
            <param name="MAType">Moving Average Type</param>
            <param name="Shift">Shift</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Bands.HighLowBands(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             High Low Bands
            </summary>
            <param name="pNav">Navigator</param>
            <param name="HighPrice">Field High Price</param>
            <param name="LowPrice">Field Low Price</param>
            <param name="ClosePrice">Field ClosePrice</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Bands.FractalChaosBands(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.Int32)">
            <summary>
             Fractal Chaos bands
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV Recordset</param>
            <param name="periods">Periods</param>
            <returns>Records</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.Bands.PrimeNumberBands(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field)">
            <summary>
             Prime Number Bands
            </summary>
            <param name="pNav">Navigator</param>
            <param name="HighPrice">Field High Price</param>
            <param name="LowPrice">Field Low Price</param>
            <returns>Recordset</returns>
        </member>
        <member name="T:ModulusFE.LineStudies.RaffRegression">
            <summary>
            Raff Regression line study
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.RaffRegression.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.LineStudies.RaffRegression.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.RaffRegression.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.RaffRegression.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.RaffRegression.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.RaffRegression.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.RaffRegression.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.RaffRegression.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.FibonacciFan">
            <summary>
            Fibonacci Fan line Study
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.FibonacciFan.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciFan.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciFan.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciFan.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciFan.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciFan.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciFan.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciFan.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.SimpleMovingAverage">
            <summary>
            The Simple Moving Average is simply an average of values over a specified period of time.
            </summary>
            <remarks>A Moving Average is most often used to average values for a smoother representation of the underlying price or indicator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.SimpleMovingAverage.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.SimpleMovingAverage.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.MACDHistogram">
            <summary>
            The MACD is a moving average oscillator that shows potential overbought/oversold phases of market fluctuation. The MACD is a calculation of two moving averages of the underlying price/indicator. The histogram is simply a bar graph of the MACD minus the MACD Signal line.
            </summary>
            <remarks>Buy/Sell interpretations may be derived from crossovers (calculated from the Signal Periods parameter), overbought/oversold levels of the MACD and divergences between MACD and actual price.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Short Cycle</term></item>
            <item><term>int Long Cycle</term></item>
            <item><term>int Signal Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.MACDHistogram.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.MACDHistogram.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.LinearRegressionSlope">
            <summary>
            Linear regression is a common statistical method used to forecast values using least squares fit.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.LinearRegressionSlope.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.LinearRegressionSlope.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.MoveSeriesIndicator">
            <summary>
            Internal usage only
            </summary>
        </member>
        <member name="M:ModulusFE.MoveSeriesIndicator.#ctor">
            <summary>
             ctor
            </summary>
        </member>
        <member name="F:ModulusFE.MoveSeriesIndicator.BackgroundExProperty">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.MoveSeriesIndicator.OnBackgroundExChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.MoveSeriesIndicator.TextExProperty">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.MoveSeriesIndicator.OnTextExChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="F:ModulusFE.MoveSeriesIndicator.MoveStatusProperty">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.MoveSeriesIndicator.OnMoveStatusChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:ModulusFE.MoveSeriesIndicator.BackgroundEx">
            <summary>
             Gets or sets the Background brush
            </summary>
        </member>
        <member name="P:ModulusFE.MoveSeriesIndicator.TextEx">
            <summary>
             Gets or sets the text
            </summary>
        </member>
        <member name="P:ModulusFE.MoveSeriesIndicator.MoveStatus">
            <summary>
             Gets or sets the Move status
            </summary>
        </member>
        <member name="T:ModulusFE.MoveSeriesIndicator.MoveStatusEnum">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.MoveSeriesIndicator.MoveStatusEnum.CantMove">
            <summary>
            series can't be moved
            1. cause it is droped on same panel
            2. cause the unique series from panel is used to create a new panel
            </summary>
        </member>
        <member name="F:ModulusFE.MoveSeriesIndicator.MoveStatusEnum.MoveToNewPanel">
            <summary>
            only a series from a panel with multiple series can be used to create a new panel
            this flag also includes that series can be droped on an existing panel.
            </summary>
        </member>
        <member name="F:ModulusFE.MoveSeriesIndicator.MoveStatusEnum.MoveToExistingPanel">
            <summary>
            any series can be droped on an existing panel
            </summary>
        </member>
        <member name="T:ModulusFE.ChartPanelMoveShadow">
            <summary>
            Used when moving panel, it shows if the panel can be moved to a new place or not
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelMoveShadow.#ctor">
            <summary>
             ctor
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanelMoveShadow.BackgroundExProperty">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelMoveShadow.OnBackgroundExChanged">
            <summary>
            
            </summary>
        </member>
        <member name="F:ModulusFE.ChartPanelMoveShadow.IsOkToMoveProperty">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelMoveShadow.OnIsOkToMoveChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="P:ModulusFE.ChartPanelMoveShadow.BackgroundEx">
            <summary>
             Gets or sets the background brush
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelMoveShadow.IsOkToMove">
            <summary>
             Gets or sets whether is ok to move
            </summary>
        </member>
        <member name="T:ModulusFE.SL.Utils.ThrowHelper">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.SL.Utils.ThrowHelper.ThrowNotSupportedException(System.String)">
            <summary>
            </summary>
            <param name="message"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:ModulusFE.SL.Utils.ThrowHelper.ThrowArgumentNullException(System.String)">
            <summary>
            </summary>
            <param name="key"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:ModulusFE.SL.Utils.ThrowHelper.ThrowArgumentException(System.String)">
            <summary>
            </summary>
            <param name="argument"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:ModulusFE.SL.Utils.ThrowHelper.ThrowInvalidOperationException(System.String)">
            <summary>
            </summary>
            <param name="operation"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ModulusFE.SL.Utils.ThrowHelper.ThrowArgumentOutOfRangeException(System.String,System.String)">
            <summary>
            </summary>
            <param name="paramName"></param>
            <param name="message"></param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:ModulusFE.SL.Utils.ThrowHelper.ThrowWrongKeyTypeArgumentException(System.Object,System.Type)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="type"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ModulusFE.SL.Utils.ThrowHelper.ThrowWrongValueTypeArgumentException(System.Object,System.Type)">
            <summary>
            </summary>
            <param name="value"></param>
            <param name="type"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:ModulusFE.SL.Utils.ThrowHelper.ThrowKeyNotFoundException">
            <summary>
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:ModulusFE.SL.Utils.ExceptionResource">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Utils.ExceptionResource.ArgumentOutOfRange_SmallCapacity">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Utils.ExceptionResource.Arg_NonZeroLowerBound">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.SL.Utils.ExceptionResource.Arg_ArrayPlusOffTooSmall">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.SL.Utils.SortedList`2">
            <summary>
             Represents a collection of key/value pairs that are sorted by key based on the associated <see cref="T:System.Collections.Generic.IComparer`1"/> implementation
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/> class that is empty, has the default initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1"/>&gt;).
            </summary>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
             Initializes a new instance of the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/> class that is empty, has the default initial capacity, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1"/>). 
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
             Initializes a new instance of the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/> class that contains elements copied from the specified 
             <see cref="T:System.Collections.Generic.IDictionary`2"/>, has sufficient capacity to accommodate the number of elements copied, and uses 
             the default <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="dictionary"></param>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.#ctor(System.Int32)">
            <summary>
             Initializes a new instance of the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/> class that is empty, has the specified 
             initial capacity, and uses the default <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
             Initializes a new instance of the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/> class that contains elements copied 
             from the specified <see cref="T:System.Collections.Generic.IDictionary`2"/>, has sufficient capacity to accommodate the number 
             of elements copied, and uses the specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="dictionary"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
             Initializes a new instance of the <see cref="T:System.Collections.Generic.IDictionary`2"/> class that is empty, has the specified initial capacity, 
             and uses the specified <see cref="T:System.Collections.Generic.IComparer`1"/>.
            </summary>
            <param name="capacity"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.Add(`0,`1)">
            <summary>
            Adds an element with the specified key and value into the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.Clear">
            <summary>
            Removes all elements from the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>
            </summary>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/> contains a specific key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.ContainsValue(`1)">
            <summary>
             Determines whether the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/> contains a specific value.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.GetEnumerator">
            <summary>
             Returns an enumerator that iterates through the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.IndexOfKey(`0)">
            <summary>
             Searches for the specified key and returns the zero-based index within the entire <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.IndexOfValue(`1)">
            <summary>
             Searches for the specified value and returns the zero-based index of the first occurrence 
             within the entire <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.RemoveAt(System.Int32)">
            <summary>
             Removes the element at the specified index of the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.TrimExcess">
            <summary>
             Sets the capacity to the actual number of elements in the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>, if that 
             number is less than 90 percent of current capacity
            </summary>
        </member>
        <member name="M:ModulusFE.SL.Utils.SortedList`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:ModulusFE.SL.Utils.SortedList`2.Capacity">
            <summary>
             Gets or sets the number of elements that the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/> can contain.
            </summary>
        </member>
        <member name="P:ModulusFE.SL.Utils.SortedList`2.Comparer">
            <summary>
             Gets the <see cref="T:System.Collections.Generic.IComparer`1"/> for the sorted list. 
            </summary>
        </member>
        <member name="P:ModulusFE.SL.Utils.SortedList`2.Count">
            <summary>
             Gets the number of key/value pairs contained in the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>.
            </summary>
        </member>
        <member name="P:ModulusFE.SL.Utils.SortedList`2.Item(`0)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:ModulusFE.SL.Utils.SortedList`2.Keys">
            <summary>
             Gets a collection containing the keys in the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>.
            </summary>
        </member>
        <member name="P:ModulusFE.SL.Utils.SortedList`2.Values">
            <summary>
             Gets a collection containing the values in the <see cref="T:ModulusFE.SL.Utils.SortedList`2"/>.
            </summary>
        </member>
        <member name="T:ModulusFE.DateTimeEx">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.DateTimeEx.ToJDate(System.DateTime)">
            <summary>
             Converts a Datetime object to its julian representation
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.DateTimeEx.FromJDate(System.Double)">
            <summary>
             Converts a julian date into a DateTime
            </summary>
            <param name="julian"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.DateTimeEx.DaysFromDate(System.DateTime)">
            <summary>
            returns the number of days from the julian origin to a specific date
            or in other words, the julian date for noon that day
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.DateTimeEx.DaysToDate(System.Int32,System.Int16@,System.Int16@,System.Int16@)">
            <summary>
             computes the year month and day, given the julian date for noon that day
            </summary>
            <param name="julian_days"></param>
            <param name="year"></param>
            <param name="month"></param>
            <param name="day"></param>
        </member>
        <member name="M:ModulusFE.DateTimeEx.IsLeap(System.Int32)">
            <summary>
            returns true if year is leap
            </summary>
            <param name="year"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.DateTimeEx.IsLeap(System.DateTime)">
            <summary>
             Checks whether a DateTime object has a Leap year
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="T:ModulusFE.SeriesTickBoxValuePresenter">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.SeriesTickBoxValuePresenter.#ctor">
            <summary>
             ctor
            </summary>
        </member>
        <member name="M:ModulusFE.SeriesTickBoxValuePresenter.#ctor(ModulusFE.Series)">
            <summary>
            </summary>
            <param name="series"></param>
        </member>
        <member name="T:ModulusFE.LineStudies.SpeedLines">
            <summary>
            Speed Lines line study
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.SpeedLines.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.LineStudies.SpeedLines.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.SpeedLines.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.SpeedLines.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.SpeedLines.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.SpeedLines.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.SpeedLines.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.SpeedLines.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.VariableMovingAverage">
            <summary>
            A Variable Moving Average is an exponential moving average that adjusts to volatility.
            </summary>
            <remarks>A Moving Average is most often used to average values for a smoother representation of the underlying price or indicator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.VariableMovingAverage.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.VariableMovingAverage.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.SwingIndex">
            <summary>
            The Swing Index (Wilder) is a popular indicator that shows comparative price strength within a single security by comparing the current open, high, low and close prices with previous prices.
            </summary>
            <remarks>The Swing Index is a component of the Accumulation Swing Index
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>dbl Limit Move Value</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.SwingIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.SwingIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Controls.ColorPicker">
            <summary>
            Represents a Color Picker control which allows a user to select a color.
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ColorPicker.#ctor">
            <summary>
             Ctor
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ColorPicker.OnApplyTemplate">
            <summary>
            Ovverides <see cref="M:ModulusFE.Controls.ColorPicker.OnApplyTemplate"/>
            </summary>
        </member>
        <member name="F:ModulusFE.Controls.ColorPicker.SelectedColorProperty">
            <summary>
            SelectedColor Dependency Property.
            </summary>
        </member>
        <member name="E:ModulusFE.Controls.ColorPicker.ColorSelected">
            <summary>
            Event fired when a color is selected.
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ColorPicker.SelectedColor">
            <summary>
            Gets or sets the currently selected color in the Color Picker.
            </summary>
        </member>
        <member name="T:ModulusFE.Controls.ColorPicker.ColorSelectedHandler">
            <summary>
            </summary>
            <param name="c"></param>
        </member>
        <member name="T:ModulusFE.ChartElementProperties.SetChartElementPropertyValueHandler">
            <summary>
             Defines a delegate for <see cref="E:ModulusFE.ChartElementProperties.IChartElementProperty.SetChartElementPropertyValue"/> event
            </summary>
            <param name="valuePresenter"></param>
        </member>
        <member name="T:ModulusFE.ChartElementProperties.PropertiesDialogContent">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.ChartElementProperties.PropertiesDialogContent.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ModulusFE.ChartElementProperties.PropertiesDialogContent.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.PrettyGoodOscillator">
            <summary>
            The Pretty Good Oscillator by Mark Johnson measures the distance of the current bar's close price from a moving average, divided by the True Range.
            </summary>
            <remarks>It is considered bullish when PGO rises above 3 and it is considered bearish when PGO falls below -3.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.PrettyGoodOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.PrettyGoodOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Controls.DialogX">
            <summary>
             A Dialog
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.DialogX.Show(ModulusFE.Controls.DialogX.DialogStyle)">
            <summary>
             Show Dialog
            </summary>
            <param name="style"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:ModulusFE.Controls.DialogX.Close">
            <summary>
             Close
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.DialogX.GetContent">
            <summary>
            Override this method to add your content to the dialog
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Controls.DialogX.OnClickOutside">
            <summary>
            Override this method if you want to do something (e.g. call Close) when you click 
            outside of the content
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.DialogX.AppRoot">
            <summary>
             AppRoot for dialog.
            </summary>
        </member>
        <member name="E:ModulusFE.Controls.DialogX.OnClose">
            <summary>
             OnCLose
            </summary>
        </member>
        <member name="T:ModulusFE.Controls.DialogX.DialogStyle">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.Controls.DialogX.DialogStyle.NonModal">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.Controls.DialogX.DialogStyle.Modal">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.Controls.DialogX.DialogStyle.ModalDimmed">
            <summary>
            </summary>
        </member>
        <member name="T:ModulusFE.Tasdk.Note">
            <summary>
             Note
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.Note.#ctor">
            <summary>
             Constructor
            </summary>
        </member>
        <member name="P:ModulusFE.Tasdk.Note.Period">
            <summary>
             Period
            </summary>
        </member>
        <member name="P:ModulusFE.Tasdk.Note.Value">
            <summary>
             Value
            </summary>
        </member>
        <member name="P:ModulusFE.Tasdk.Note.Note_">
            <summary>
             Note
            </summary>
        </member>
        <member name="T:ModulusFE.Tasdk.Navigator">
            <summary>
             Class used to navigate through a recordset
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.Navigator.MoveNext">
            <summary>
             Move to next record
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.Navigator.MovePrevious">
            <summary>
             Move to previous record
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.Navigator.MoveFirst">
            <summary>
             Move to first record
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.Navigator.MoveLast">
            <summary>
             Move to last record
            </summary>
        </member>
        <member name="P:ModulusFE.Tasdk.Navigator.Recordset_">
            <summary>
            Sets/Gets the recordset associated with it
            </summary>
        </member>
        <member name="P:ModulusFE.Tasdk.Navigator.RecordCount">
            <summary>
             Record Count
            </summary>
        </member>
        <member name="P:ModulusFE.Tasdk.Navigator.Position">
            <summary>
             Current cursor position
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.RelativeStrengthIndex">
            <summary>
            The RSI (Wilder) is a popular indicator that shows comparative price strength within a single security.
            </summary>
            <remarks>9, 14 and 25 period RSI calculations are most popular. The most widely used method for interpreting the RSI is price/RSI divergence, support/resistance levels and RSI chart formations.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.RelativeStrengthIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.RelativeStrengthIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.PrimeNumberBands">
            <summary>
            Similar to the Prime Numbers Oscillator, the prime numbers oscillator was developed by Modulus Financial Engineering, Inc. This indicator finds the nearest prime number for the high and low, and plots the two series as bands.
            </summary>
            <remarks>This indicator can be used to spot market trading ranges.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.PrimeNumberBands.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.PrimeNumberBands.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.MoneyFlowIndex">
            <summary>
            The Money Flow Index measures money flow of a security, using volume and price for calculations.
            </summary>
            <remarks>Market bottoms below 20 and tops above 80. Divergence of price and Money Flow Index are also used.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>str Volume</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.MoneyFlowIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.MoneyFlowIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.MACD">
            <summary>
            The MACD is a moving average oscillator that shows potential overbought/oversold phases of market fluctuation. The MACD is a calculation of two moving averages of the underlying price/indicator.
            </summary>
            <remarks>Buy/Sell interpretations may be derived from crossovers (calculated from the Signal Periods parameter), overbought/oversold levels of the MACD and divergences between MACD and actual price.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Short Cycle</term></item>
            <item><term>int Long Cycle</term></item>
            <item><term>int Signal Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.MACD.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.MACD.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.FractalChaosBands">
            <summary>
            The chaotic nature of stock market movements explains why it is sometimes difficult to distinguish hourly charts from monthly charts if the time scale is not given. The patterns are similar regardless of the time resolution. Like the chambers of the nautilus, each level is like the one before it, but the size is different. To determine what is happening in the current level of resolution, the fractal chaos band indicator can be used to examine these patterns.
            </summary>
            <remarks>
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.FractalChaosBands.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.FractalChaosBands.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.PanelsBarButton">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.PanelsBarButton.#ctor">
            <summary>
             ctor
            </summary>
        </member>
        <member name="T:PathConverter.StringToPathGeometryConverter">
            <summary>
             Converts a valid geometry string to a <see cref="T:System.Windows.Media.PathGeometry"/> object
            </summary>
        </member>
        <member name="M:PathConverter.StringToPathGeometryConverter.Convert(System.String)">
            <summary>
            Main conversion routine - converts string path data definition to PathGeometry object
            </summary>
            <param name="path">String with path data definition</param>
            <returns>PathGeometry object created from string definition</returns>
        </member>
        <member name="M:PathConverter.StringToPathGeometryConverter.ConvertBack(System.Windows.Media.PathGeometry)">
            <summary>
            Main back conversion routine - converts PathGeometry object to its string equivalent
            </summary>
            <param name="geometry">Path Geometry object</param>
            <returns>String equivalent to PathGeometry contents</returns>
        </member>
        <member name="M:PathConverter.StringToPathGeometryConverter.parse(System.String)">
            <summary>
            Main parser routine, which loops over each char in received string, and performs actions according to command/parameter being passed
            </summary>
            <param name="path">String with path data definition</param>
            <returns>PathGeometry object created from string definition</returns>
        </member>
        <member name="M:PathConverter.StringToPathGeometryConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:PathConverter.StringToPathGeometryConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:ModulusFE.Indicators.RAVI">
            <summary>
            RAVI (Rapid Adaptive Variance Indicator) by Tushar Chande, measures trend intensity. The formula is based on VIDYA (Volatility Based Index Dynamic Average), also by Tushar Chande.
            </summary>
            <remarks>Increasing values of RAVI indicate that a trend is forming, whereas decreasing values of RAVI indicate that the current trend is ending.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Short Cycle</term></item>
            <item><term>int Long Cycle</term></item>
            <item><term>int Signal Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.RAVI.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.RAVI.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.ElderForceIndex">
            <summary>
            The Elder Force Index is calculated by the change in price from the previous to the current day, multiplied by volume.
            </summary>
            <remarks>Buy signals are generated when the two-day EMA of the Elder Force Index is negative and sell signals are generated when it is positive.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ElderForceIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ElderForceIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.LineStudies.Rectangle">
            <summary>
            Rectangle
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.Rectangle.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="M:ModulusFE.LineStudies.Rectangle.SetClipingAreaInternal(System.Nullable{System.Windows.Rect})">
            <summary>
            
            </summary>
            <param name="paintableRect"></param>
        </member>
        <member name="P:ModulusFE.LineStudies.Rectangle.Fill">
            <summary>
             Gets or sets the Brush that specifies how the shape's interior is filled
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.Rectangle.MouseDown">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.Rectangle.MouseEnter">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.Rectangle.MouseLeave">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.Rectangle.MouseMove">
            <summary>
            </summary>
        </member>
        <member name="E:ModulusFE.LineStudies.Rectangle.MouseUp">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Rectangle.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Rectangle.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Rectangle.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Rectangle.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Rectangle.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Rectangle.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.Rectangle.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.WilliamsPctR">
            <summary>
            Williams’ %R measures overbought/oversold levels.
            </summary>
            <remarks>The most widely used method for interpreting Williams’ %R is to buy when the indicator rises above 80 or sell when the indicator falls below 20.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.WilliamsPctR.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.WilliamsPctR.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.WilliamsAccumulationDistribution">
            <summary>
            The Accumulation/Distribution indicator shows a relationship of price and volume.
            </summary>
            <remarks>When the indicator is rising, the security is said to be accumulating. Conversely, when the indicator is falling, the security is said to being distributing. Prices may reverse when the indicator converges with price.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.WilliamsAccumulationDistribution.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.WilliamsAccumulationDistribution.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.VerticalHorizontalFilter">
            <summary>
            The Vertical Horizontal Filter (VHF) identifies whether a market is in a trending or choppy movement phase.
            </summary>
            <remarks>The VHF indicator is most commonly used as an indicator of market volatility. It is also frequently used as a component for other technical indicators.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.VerticalHorizontalFilter.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.VerticalHorizontalFilter.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.TriangularMovingAverage">
            <summary>
            The Triangular Moving Average is similar to a Simple Moving Average, except that more weight is given to the price in the middle of the moving average periods.
            </summary>
            <remarks>A Moving Average is most often used to average values for a smoother representation of the underlying price or indicator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.TriangularMovingAverage.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.TriangularMovingAverage.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.TimeSeriesMovingAverage">
            <summary>
            A Time Series Moving Average is similar to a Simple Moving Average, except that values are derived from linear regression forecast values instead of raw values.
            </summary>
            <remarks>A Moving Average is most often used to average values for a smoother representation of the underlying price or indicator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.TimeSeriesMovingAverage.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.TimeSeriesMovingAverage.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.StandardDeviation">
            <summary>
            Standard Deviation is a common statistical calculation that measures volatility. Other technical indicators are often calculated using standard deviations.
            </summary>
            <remarks>Major highs and lows often accompany extreme volatility. High values of standard deviations indicate that the price or indicator is more volatile than usual.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            <item><term>int Standard Deviations</term></item>
            <item><term>int Moving Average Type</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.StandardDeviation.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.StandardDeviation.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.PriceROC">
            <summary>
            The Price ROC shows the difference between the current price and the price one or more periods in the past.
            </summary>
            <remarks>A 12-day Price ROC is most often used as an overbought/oversold indicator.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.PriceROC.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.PriceROC.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.Median">
            <summary>
            A Median Price is simply an average of one period’s high and low values.
            </summary>
            <remarks>A Median Price is often used as an alternative way of viewing price action, and also as a component for calculating other indicators.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.Median.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.Median.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Controls.ChartScrollerEx">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerEx.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerEx.SetProperties(ModulusFE.Controls.ChartScrollerProperties)">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="T:ModulusFE.ChartPanelMoreIndicatorPanel">
            <summary>
             A Default apnel representation for more "sign"
            </summary>
        </member>
        <member name="T:ModulusFE.Interfaces.IChartPanelMoreIndicatorPanel">
            <summary>
             Interface used to show a panel when user click on a more indicator in any chart panel
            </summary>
        </member>
        <member name="M:ModulusFE.Interfaces.IChartPanelMoreIndicatorPanel.Init(ModulusFE.ChartPanel,System.Collections.Generic.IEnumerable{ModulusFE.LineStudies.LineStudy},ModulusFE.Interfaces.ChartPanelMoreIndicatorPosition)">
            <summary>
             Metho called to initialize the panel. 
            </summary>
            <param name="chartPanel">A reference to chart panel that has the more indicator.</param>
            <param name="lineStudies"></param>
            <param name="position"></param>
        </member>
        <member name="P:ModulusFE.Interfaces.IChartPanelMoreIndicatorPanel.ElementToShow">
            <summary>
             A reference to the element that is going to be shown
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelMoreIndicatorPanel.#ctor">
            <summary>
             Ctor
            </summary>
        </member>
        <member name="M:ModulusFE.ChartPanelMoreIndicatorPanel.Init(ModulusFE.ChartPanel,System.Collections.Generic.IEnumerable{ModulusFE.LineStudies.LineStudy},ModulusFE.Interfaces.ChartPanelMoreIndicatorPosition)">
            <summary>
            Initializes the <see cref="T:ModulusFE.ChartPanelMoreIndicatorPanel"/>
            </summary>
            <param name="chartPanel"></param>
            <param name="lineStudies"></param>
            <param name="position"></param>
        </member>
        <member name="P:ModulusFE.ChartPanelMoreIndicatorPanel.ElementToShow">
            <summary>
            Gets the element to be shown
            </summary>
        </member>
        <member name="T:ModulusFE.ChartPanelMoreIndicatorPanel.PanelItem">
            <summary>
             An item information
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelMoreIndicatorPanel.PanelItem.Name">
            <summary>
             Name
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelMoreIndicatorPanel.PanelItem.Value">
            <summary>
             Value
            </summary>
        </member>
        <member name="P:ModulusFE.ChartPanelMoreIndicatorPanel.PanelItem.LineStudy">
            <summary>
             WeakReference to a <see cref="P:ModulusFE.ChartPanelMoreIndicatorPanel.PanelItem.LineStudy"/>
            </summary>
        </member>
        <member name="M:ModulusFE.Algorithms.FirstIndexOf``1(System.Collections.Generic.IList{``0},``0)">
            <summary>
            Finds the index of the first item in a list equal to a given item.
            </summary>
            <remarks>The default sense of equality for T is used, as defined by T's
            implementation of IComparable&lt;T&gt;.Equals or object.Equals.</remarks>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <returns>The index of the first item equal to <paramref name="item"/>. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:ModulusFE.Algorithms.FirstIndexOf``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the index of the first item in a list equal to a given item. A passed
            IEqualityComparer is used to determine equality.
            </summary>
            <param name="list">The list to search.</param>
            <param name="item">The item to search for.</param>
            <param name="equalityComparer">The IEqualityComparer&lt;T&gt; used to compare items for equality. Only the Equals method will be called.</param>
            <returns>The index of the first item equal to <paramref name="item"/>. -1 if no such item exists in the list.</returns>
        </member>
        <member name="M:ModulusFE.Algorithms.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            Removes all the items in the collection that satisfy the condition
            defined by <paramref name="predicate"/>.
            </summary>
            <remarks>If the collection if an array or implements IList&lt;T&gt;, an efficient algorithm that
            compacts items is used. If not, then ICollection&lt;T&gt;.Remove is used
            to remove items from the collection. If the collection is an array or fixed-size list,
            the non-removed elements are placed, in order, at the beginning of
            the list, and the remaining list items are filled with a default value (0 or null).</remarks>
            <param name="collection">The collection to check all the items in.</param>
            <param name="predicate">A delegate that defines the condition to check for.</param>
            <returns>Returns a collection of the items that were removed. This collection contains the
            items in the same order that they orginally appeared in <paramref name="collection"/>.</returns>
        </member>
        <member name="M:ModulusFE.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds the maximum value in a collection.
            </summary>
            <remarks>Values in the collection are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <returns>The largest item in the collection. </returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:ModulusFE.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Finds the maximum value in a collection. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparer">The comparer instance used to compare items in the collection.</param>
            <returns>The largest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:ModulusFE.Algorithms.Maximum``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Finds the maximum value in a collection. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparison">The comparison used to compare items in the collection.</param>
            <returns>The largest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparison"/> is null.</exception>
        </member>
        <member name="M:ModulusFE.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Finds the minimum value in a collection.
            </summary>
            <remarks>Values in the collection are compared by using the IComparable&lt;T&gt;
            interfaces implementation on the type T.</remarks>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <returns>The smallest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is null.</exception>
        </member>
        <member name="M:ModulusFE.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Finds the minimum value in a collection. A supplied IComparer&lt;T&gt; is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparer">The comparer instance used to compare items in the collection.</param>
            <returns>The smallest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparer"/> is null.</exception>
        </member>
        <member name="M:ModulusFE.Algorithms.Minimum``1(System.Collections.Generic.IEnumerable{``0},System.Comparison{``0})">
            <summary>
            Finds the minimum value in a collection. A supplied Comparison&lt;T&gt; delegate is used
            to compare the items in the collection.
            </summary>
            <typeparam name="T">The type of items in the collection.</typeparam>
            <param name="collection">The collection to search.</param>
            <param name="comparison">The comparison used to compare items in the collection.</param>
            <returns>The smallest item in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The collection is empty.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="comparison"/> is null.</exception>
        </member>
        <member name="T:ModulusFE.ArrayWrapper`1">
            <summary>
            The class that is used to implement IList&lt;T&gt; to view an array
            in a read-write way. Insertions cause the last item in the array
            to fall off, deletions replace the last item with the default value.
            </summary>
        </member>
        <member name="M:ModulusFE.ArrayWrapper`1.#ctor(`0[])">
            <summary>
            Create a list wrapper object on an array.
            </summary>
            <param name="wrappedArray">Array to wrap.</param>
        </member>
        <member name="M:ModulusFE.ArrayWrapper`1.Remove(`0)">
            <summary>
            Searches the list for the first item that compares equal to <paramref name="item"/>.
            If one is found, it is removed. Otherwise, the list is unchanged.
            </summary>
            <remarks>Equality in the list is determined by the default sense of
            equality for T. If T implements IComparable&lt;T&gt;, the
            Equals method of that interface is used to determine equality. Otherwise, 
            Object.Equals is used to determine equality.</remarks>
            <param name="item">The item to remove from the list.</param>
            <returns>True if an item was found and removed that compared equal to
            <paramref name="item"/>. False if no such item was in the list.</returns>
        </member>
        <member name="P:ModulusFE.ArrayWrapper`1.IsFixedSize">
            <summary>
            Return true, to indicate that the list is fixed size.
            </summary>
        </member>
        <member name="T:ModulusFE.Comparers">
            <summary>
            A collection of methods to create IComparer and IEqualityComparer instances in various ways.
            </summary>
        </member>
        <member name="M:ModulusFE.Comparers.ComparerFromComparison``1(System.Comparison{``0})">
            <summary>
            Given an Comparison on a type, returns an IComparer on that type. 
            </summary>
            <typeparam name="T">T to compare.</typeparam>
            <param name="comparison">Comparison delegate on T</param>
            <returns>IComparer that uses the comparison.</returns>
        </member>
        <member name="T:ModulusFE.Comparers.ComparisonComparer`1">
            <summary>
            Class to change an Comparison&lt;T&gt; to an IComparer&lt;T&gt;.
            </summary>
        </member>
        <member name="T:ModulusFE.Tasdk.General">
            <summary>
             General type of calculations
            </summary>
        </member>
        <member name="M:ModulusFE.Tasdk.General.HighMinusLow(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset)">
            <summary>
             High Minus Low
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV RecordSet</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.HighMinusLow(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.String)">
            <summary>
             High Minus Low
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV RecordSet</param>
            <param name="Alias">Alias</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.MedianPrice(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset)">
            <summary>
             Median Price
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV RecordSet</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.MedianPrice(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.String)">
            <summary>
             Median Price
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV RecordSet</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.TypicalPrice(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset)">
            <summary>
             Typical price
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV RecordSet</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.TypicalPrice(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.String)">
            <summary>
             Typical price
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV RecordSet</param>
            <param name="Alias">Alias</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.WeightedClose(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset)">
            <summary>
             Weighted Close
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV RecordSet</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.WeightedClose(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Recordset,System.String)">
            <summary>
             Weighted Close
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pOHLCV">OHLCV RecordSet</param>
            <param name="Alias">Alias</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.VolumeROC(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Volume ROC
            </summary>
            <param name="pNav">Navigator</param>
            <param name="Volume">Field with Volume values</param>
            <param name="periods">Periods</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.VolumeROC(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Volume ROC
            </summary>
            <param name="pNav">Navigator</param>
            <param name="Volume">Field with Volume values</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.PriceROC(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             Price ROC
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field source</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.PriceROC(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             Price ROC
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field source</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.CorrelationAnalysis(ModulusFE.Tasdk.Field,ModulusFE.Tasdk.Field)">
            <summary>
             Correlation Analysis
            </summary>
            <param name="pSource1">Field source1</param>
            <param name="pSource2">Field source2</param>
            <returns>Correlated value</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.StandardDeviation(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.Double,ModulusFE.IndicatorType)">
            <summary>
             Standard deviation
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field source</param>
            <param name="periods">Periods</param>
            <param name="StandardDeviations">Standard Deviation</param>
            <param name="MAType">Moving Average Type</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.StandardDeviation(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.Double,ModulusFE.IndicatorType,System.String)">
            <summary>
             Standard deviation
            </summary>
            <param name="pNav">Navigator</param>
            <param name="pSource">Field source</param>
            <param name="periods">Periods</param>
            <param name="StandardDeviations">Standard Deviation</param>
            <param name="MAType">Moving Average Type</param>
            <param name="Alias">Alias</param>
            <returns>RecordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.MaxValue(ModulusFE.Tasdk.Field,System.Int32,System.Int32)">
            <summary>
             Max Value from an interval
            </summary>
            <param name="pSource">Field source</param>
            <param name="StartPeriod">Start Index</param>
            <param name="EndPeriod">End Index</param>
            <returns>reference to a Note object</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.MinValue(ModulusFE.Tasdk.Field,System.Int32,System.Int32)">
            <summary>
             Min Value from an interval
            </summary>
            <param name="pSource">Field Source</param>
            <param name="StartPeriod">Start Index</param>
            <param name="EndPeriod">End Index</param>
            <returns>a reference to a Note object</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.HHV(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             HHV
            </summary>
            <param name="pNav">Navigator</param>
            <param name="High">Field with high values</param>
            <param name="periods">Periods</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.HHV(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             HHV
            </summary>
            <param name="pNav">Navigator</param>
            <param name="High">Field with high values</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>Recordset</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.LLV(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32)">
            <summary>
             LLV
            </summary>
            <param name="pNav">Navigator</param>
            <param name="Low">Field woth Low values</param>
            <param name="periods">Periods</param>
            <returns>ReordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.LLV(ModulusFE.Tasdk.Navigator,ModulusFE.Tasdk.Field,System.Int32,System.String)">
            <summary>
             LLV
            </summary>
            <param name="pNav">Navigator</param>
            <param name="Low">Field woth Low values</param>
            <param name="periods">Periods</param>
            <param name="Alias">Alias</param>
            <returns>ReordSet</returns>
        </member>
        <member name="M:ModulusFE.Tasdk.General.IsPrime(System.Int64)">
            <summary>
             Check is a number is prime.
            </summary>
            <param name="number">A number to check</param>
            <returns>true or false</returns>
        </member>
        <member name="F:ModulusFE.PaintObjects.CandleHeikinAshi._xOpen">
            <summary>
            Midpoint of the previous ba
            </summary>
        </member>
        <member name="F:ModulusFE.PaintObjects.CandleHeikinAshi._xHigh">
            <summary>
            Highest value in the set 
            </summary>
        </member>
        <member name="F:ModulusFE.PaintObjects.CandleHeikinAshi._xLow">
            <summary>
            Lowest value in the set 
            </summary>
        </member>
        <member name="F:ModulusFE.PaintObjects.CandleHeikinAshi._xClose">
            <summary>
            Average price of the current bar 
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.FibonacciRetracements">
            <summary>
            Fibonacci Retracements line study
            </summary>
        </member>
        <member name="F:ModulusFE.LineStudies.FibonacciRetracements._firstY">
            <summary>
            Used to determine the direction of sorting
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.FibonacciRetracements.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="M:ModulusFE.LineStudies.FibonacciRetracements.CalculateFibonacciNumber(System.Int32)">
            <summary>
             A very efficient way to calculate Fibonacci number. Does not use recurssion, works in a linear time O(n)
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciRetracements.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciRetracements.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciRetracements.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciRetracements.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciRetracements.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciRetracements.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciRetracements.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.DirectionalMovementSystem">
             <summary>
             The Welles Wilder's Directional Movement System contains five indicators; ADX, DI+, DI-, DX, and ADXR.
            
            The ADX (Average Directional Movement Index) is an indicator of how much the market is trending, either up or down: the higher the ADX line, the more the market is trending and the more suitable it becomes for a trend-following system. This indicator consists of two lines: DI+ and DI-, the first one being a measure of uptrend and the second one a measure of downtrend.
            
            Detailed information about this indicator and formulas can be found in Welles Wilder's book, "New Concepts in Technical Trading Systems".
            The standard Directional Movement System draws a 14 period DI+ and a 14 period DI- in the same chart panel. ADX is also sometimes shown in the same chart panel.
             </summary>
             <remarks>A buy signal is given when DI+ crosses over DI-, a sell signal is given when DI- crosses over DI+.
             <list type="table">
             <listheader>
             <term>Parameters</term>
             </listheader>
             <item><term>str Symbol</term></item>
             <item><term>int Periods</term></item>
             </list>
             </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.DirectionalMovementSystem.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.DirectionalMovementSystem.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.Aroon">
            <summary>
            The Aroon indicator is often used to determine whether a stock is trending or not and how stable the trend is.
            </summary>
            <remarks>Trends are determined by extreme values (above 80) of both lines (Aroon up and Aroon down), whereas unstable prices are determined when both lines are low (less than 20).
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.Aroon.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.Aroon.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Calendar">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.Calendar.#ctor">
            <summary>
            </summary>
        </member>
        <member name="F:ModulusFE.Calendar.TEST_DATE_TIME">
            <summary>
            A date that was carfully chosen to be unusually long in most formats. This will be used as
            the default test date for how much space is going to be used for output.
            The DateTime chosen is Wednesday, December 30th, 2009 at 12:50:50 pm.
            Notes: September is slightly longer textually than December, but 12 will be longer than 8 in numeric 
            format. Also. an hour in the 20-23 range will be longer than 12, but this is only true in the 24h
            format, which is not used all that much.
            </summary>
        </member>
        <member name="F:ModulusFE.Calendar.LABLE_GAP">
            <summary>
            The amount of space that must extist between lables so that each lable is distinct from the next.
            This value can be set to just about anything, though 3.0 works best.
            This value could be made public.
            </summary>
        </member>
        <member name="F:ModulusFE.Calendar.CalendarLabelBlockOutput">
            <summary>
            Just a boolean at the moment, but should probably be an enumeration. This flag chooses which 
            datestamp to use for the output. The beginning of the calendar block or the first valid 
            data point in the block. Both are stored in the CalendarOutputData object.
            This value could be made public.
            </summary>
        </member>
        <member name="F:ModulusFE.Calendar.CurrentTimeStamp">
            <summary>
            Boolean flag to tell the system if it should display the current time stamp in the middle of 
            the vertical on the right end of the chart to have a real time update of the latest tick
            in the system. Something akin to the "realTime" flag in the previous version.
            This value could be made public (though I'd make it an ENUM first).
            </summary>
        </member>
        <member name="F:ModulusFE.Calendar.CalendarScaleDataList">
            <summary>
            Holds the list of scales that can be displayed by the calendar. There are a set of defaults
            that are created internallt, but the user could just as well supply theirs (if the object was 
            made public). Though there is a need that the list is ordered in relative size. There are
            methods available to assist in the ordering of the list.
            </summary>
        </member>
        <member name="F:ModulusFE.Calendar._verticalLablelLines">
            <summary>
            Helper for seeing where the labels really start and end on the screen (helps with layout and
            debugging, but really only useful when building application.
            </summary>
        </member>
        <member name="M:ModulusFE.Calendar.PaintVersion2">
            <summary>
            
            </summary>
        </member>
        <member name="M:ModulusFE.Calendar.GetWorkingScaleData">
            <summary>
            Quick math to figure out which scale is going to be used.
            This method uses the following assumptions.
            The CalendarScaleDataList object must already be ordered from the smallest to the largest scale.
            If the user is assigning the list, then a method will need to be written to order the list first. 
            There is a concept of stickyness in this method. There was a problem with the scale changing when
            the chart is scrolled (has to do with the mathematical imprecision). The current solution is to 
            make the chosen CalendarScaleDataIndex a bit sticky. 
            </summary>
        </member>
        <member name="M:ModulusFE.Calendar.GetPeriodsToBeLabeled(ModulusFE.CalendarScaleData,System.Collections.Generic.List{ModulusFE.CalendarOutputData},System.Collections.Generic.List{ModulusFE.CalendarOutputData})">
            <summary>
            This method decides which periods are going to get to have labels.
            This methodology is a major departure from the current way of doing things. 
            The current ModulusFE code has static(-ish) label locations with values that would
            change. This way of doing things is that specific calendar periods are going to
            keep their labels as the chart moves across the screen (at least as much as 
            possible). This method is going to do the math to decide which periods are going
            to have labels. This is done by scaning through the timeStamp data in the DataManager
            and taking a reference of each period that is going to have a label associated with it.
            </summary>
            <param name="workingScaleData">The CalendarScaleData object that will be used for calculations</param>
            <param name="periodsToBeLabeled">The list of data periods to have lables on the first line of the calendar</param>
            <param name="secondaryPeriodsToBeLabeled">The list of data periods to have lables on the first line of the calendar</param>
        </member>
        <member name="P:ModulusFE.Calendar.InfoPanelItems">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleWorkingData.LabelMaxOutputWidth">
            <summary>
            The theoretical maximum amount of space needed for output.
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleWorkingData.TheoreticalPeriodCount">
            <summary>
            The theoretical number of display periods for the current scale
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleWorkingData.TheoreticalMaxOutputWidth">
            <summary>
            The theoretical amount of space needed to display the output.
            </summary>
        </member>
        <member name="T:ModulusFE.CalendarScaleData">
            <summary>
            Information about each scale that the user wants the calendar to pass through.
            This class could be make public to the developer so that they can play with the 
            different scales visible to the user.
            </summary>
        </member>
        <member name="F:ModulusFE.CalendarScaleData.scale">
            <summary>
            The number of units in the scale 1min. 5min. etc.
            The valid combination for seconds and minutes have some rules.
            It's mostly about hitting the top of the hour or minute on each 
            loop. Therefore 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, and 30 are 
            the only values below 60. Once you crack 60 (and it's only allowed
            for minutes as there is no hour scale) only hourly values are
            valid.
            Invalid values will not throw an error, they will simply not be set.
            </summary>
        </member>
        <member name="F:ModulusFE.CalendarScaleData.scaleType">
            <summary>
            The type of units in the scale
            The valid combination for seconds and minutes have some rules.
            It's mostly about hitting the top of the hour or minute on each 
            loop. Therefore 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, and 30 are 
            the only values below 60. Once you crack 60 (and it's only allowed
            for minutes as there is no hour scale) only hourly values are
            valid.
            Invalid values will not throw an error, they will simply not be set.
            </summary>
        </member>
        <member name="M:ModulusFE.CalendarScaleData.ValidateScaleScaleType(System.Int32,ModulusFE.CalendarScaleData.ScaleTypes)">
            <summary>
            The valid combination for seconds and minutes have some rules.
            It's mostly about hitting the top of the hour or minute on each 
            loop. Therefore 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, and 30 are 
            the only values below 60. Once you crack 60 (and it's only allowed
            for minutes as there is no hour scale) only hourly values are
            valid.
            </summary>
            <param name="scale"></param>
            <param name="scaleType"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.CalendarScaleData.SecondsInScaleType(ModulusFE.CalendarScaleData.ScaleTypes)">
            <summary>
            The number of seconds in any given scale type. 
            </summary>
            <param name="scaleType"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.CalendarScaleData.SecondsInTimeSpan(System.TimeSpan)">
            <summary>
            Due to the nature of markets and how long they are actually open, the number
            of seconds in a standard time span will return an super inflated number.
            Therefore this tool will return a more reasonable number of seconds that 
            will more closely approximate the number of seconds the market is likely to be 
            open during a given time span.
            </summary>
            <param name="timeSpan"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.CalendarScaleData.TopOfScalePeriod(System.DateTime,ModulusFE.CalendarScaleData.ScaleTypes)">
            <summary>
            Given the supplied dateTime. Returns the "top" of the period for the scale supplied.
            Basically rounds-back to the top of the current period.
            </summary>
            <param name="dt"></param>
            <param name="scaleType"></param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.CalendarScaleData.AddScaleType(System.DateTime,System.Int32,ModulusFE.CalendarScaleData.ScaleTypes)">
            <summary>
            Method that will increment the given DateTime by the unit count of the given scaleType.
            Useful for advancing a reference variable to the next value.
            </summary>
            <param name="dt">DateTime to add the increment to</param>
            <param name="units">The number of increments to apply</param>
            <param name="scaleType">The size (scaleType) of the increment to apply</param>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.CalendarScaleData.DefaultCalendarScaleData">
            <summary>
            A simple default set of calendar scale data points from seconds up to years.
            </summary>
            <returns></returns>
        </member>
        <member name="P:ModulusFE.CalendarScaleData.WorkingData">
            <summary>
            Class used by the calendar class to store data for each run of the paint routine.
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleData.OutputFormat">
            <summary>
            The style that is going to be used for output 
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleData.HorozontalAlign">
            <summary>
            The alignment of the text under the tick.
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleData.SecondaryScale">
            <summary>
            Scale to be used for the second line of data.
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleData.SecondaryScaleType">
            <summary>
            Scale type to be used for the second line of data.
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleData.SecondaryOutputFormat">
            <summary>
            Style to be used for second line of data
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleData.SecondaryHorozontalAlign">
            <summary>
            The alignment of the text on the second line of data
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleData.CurrentTimeStampOutputFormat">
            <summary>
            The style that is going to be used for the current period data
            entry.
            </summary>
        </member>
        <member name="P:ModulusFE.CalendarScaleData.RelativeScaleSize">
            <summary>
            A number that gives the relative size of a scale based on plausible number of 
            seconds in the scale. Used for ordering of output scales. Also used as a good
            general (pseudo unique) reference for a list of scales.
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.QStick">
            <summary>
            QStick was developed by Tushar Chande as a quantifier for candlestick charts. QStick shows the relationship of the open and close prices.
            </summary>
            <remarks>Positive values indicate that the majority of candlesticks have been white during the previous n-periods, while negative values indicate that the majority of candlesticks have been black.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            <item><term>int Moving Average Type </term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.QStick.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.QStick.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.ObservableHelper">
            <summary>
            A small helper class that has a method to help create
            PropertyChangedEventArgs when using the INotifyPropertyChanged
            interface
            </summary>
        </member>
        <member name="M:ModulusFE.ObservableHelper.CreateArgs``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Creates PropertyChangedEventArgs
            </summary>
            <param name="propertyExpression">Expression to make 
            PropertyChangedEventArgs out of</param>
            <returns>PropertyChangedEventArgs</returns>
        </member>
        <member name="M:ModulusFE.ObservableHelper.GetPropName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            </summary>
            <param name="propertyExpression"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.ObservableHelper.NotifyIfDifferent``1(``0@,``0,System.Action{System.ComponentModel.PropertyChangedEventArgs},System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="eventChanged"></param>
            <param name="args"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ModulusFE.ObservableHelper.NotifyIfDifferent``1(``0@,``0,System.Action)">
            <summary>
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
            <param name="eventChanged"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ModulusFE.LineStudies.TrendLine">
            <summary>
             Trend line. An arbitrary line painted by the user or by the programmer.
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.TrendLine.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="M:ModulusFE.LineStudies.TrendLine.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.TrendLine.SetClipingAreaInternal(System.Nullable{System.Windows.Rect})">
            <summary>
            
            </summary>
            <param name="paintableRect"></param>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.Clip">
            <summary>
             Gets or sets whether the LineStudy will be clipsed by the paintable area of the chart.
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.WatchAble">
            <summary>
             Gets or sets the watchable attribut for current trend line
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.BarsIntersection">
            <summary>
            Gets a collection of intersections between the current TrendLine and all the
            bars that this instance of trendline intersects
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.TrendLine.BarIntersection">
            <summary>
            Represents the information about intersection of a trenlinde and a bar from chart
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.BarIntersection.Record">
            <summary>
            Gets the Record number from X axis of intersection. 0-index based.
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TrendLine.BarIntersection.Price">
            <summary>
            Gets the price value from Y axis of intersection
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.TironeLevels">
            <summary>
             Tirone Levels line study
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.TironeLevels.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.LineStudies.TironeLevels.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TironeLevels.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TironeLevels.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TironeLevels.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TironeLevels.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TironeLevels.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.TironeLevels.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.FibonacciArcs">
            <summary>
            Fibonacci Arcs line study
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.FibonacciArcs.#ctor(System.String,System.Windows.Media.Brush,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="key">Unique key for line study</param>
            <param name="stroke">Stroke brush</param>
            <param name="chartPanel">Reference to chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciArcs.Element">
            <summary>
            Element to which context line is bound
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciArcs.Segment">
            <summary>
            Segment where context line shall be shown
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciArcs.Parent">
            <summary>
            Parent where <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> belongs
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciArcs.IsSelected">
            <summary>
            Gets if <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> is selected
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciArcs.ZIndex">
            <summary>
            Z Index of <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/>
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciArcs.Chart">
            <summary>
            Gets the chart object associated with <see cref="P:ModulusFE.PaintObjects.IContextAbleLineStudy.Element"/> object
            </summary>
        </member>
        <member name="P:ModulusFE.LineStudies.FibonacciArcs.LineStudy">
            <summary>
            Gets the reference to <see cref="T:ModulusFE.LineStudies.LineStudy"/> 
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.OnBalanceVolume">
            <summary>
            The On Balance Volume indicator shows a relationship of price and volume as a momentum index.
            </summary>
            <remarks>On Balance Volume index generally precedes actual price movements. The premise is that well-informed investors are buying when the index rises and uninformed investors are buying when the index falls.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>str Volume</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.OnBalanceVolume.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.OnBalanceVolume.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.MomentumOscillator">
            <summary>
            The momentum indicator calculates change of over a specified length of time as a ratio.
            </summary>
            <remarks>Increasingly high values of the momentum oscillator may indicate that prices are trending strongly upwards. The momentum oscillator is closely related to MACD and Price Rate of Change (ROC).
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.MomentumOscillator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.MomentumOscillator.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.HistoricalVolatility">
             <summary>
             Historical volatility is the log-normal standard deviation. The Historical Volatility Index is based on the book by Don Fishback, "Odds: The Key to 90% Winners".
            
            This formula will output a 30-day historical volatility index between 1 and 0: 
            Stdev(Log(Close / Close Yesterday), 30) * Sqrt(365)
            
            Note that some traders use 252 instead of 365 for the bar history that is used in the square root calculation.
            The Log value is a natural log (ie Log10).
             </summary>
             <remarks>Similar to the coefficient of determination, the higher the value is, the more volatile the stock is. 
             <list type="table">
             <listheader>
             <term>Parameters</term>
             </listheader>
             <item><term>str Source (usually the close price)</term></item>
             <item><term>int Periods</term></item>
             <item><term>int BarHistory</term></item>
             <item><term>int StandardDeviations</term></item>
             </list>
             </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.HistoricalVolatility.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.HistoricalVolatility.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.CustomIndicator">
            <summary>
            Custom indicator is used to let user use his algorithm to calculate the indicator
            </summary>
        </member>
        <member name="M:ModulusFE.Indicators.CustomIndicator.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.CustomIndicator.TrueAction">
            <summary>
            Action executed when Indicator needs to be recalculated
            </summary>
            <returns></returns>
        </member>
        <member name="M:ModulusFE.Indicators.CustomIndicator.AddParameter(System.String,ModulusFE.ParameterType,System.Object,System.Type)">
            <summary>
            Adds a parameter that will be shown in indicators dialog
            </summary>
            <param name="parameterName">Parameter name. Is this is an empty string then the default name will be taken.</param>
            <param name="parameterType">Parameter type</param>
            <param name="defaultValue">Default value</param>
            <param name="valueType">Value type</param>
        </member>
        <member name="T:ModulusFE.Indicators.ComparativeRelativeStrength">
            <summary>
            The Comparative Relative Strength index divides one price field by another price field.
            </summary>
            <remarks>The base security is outperforming the other security when the Comparative RSI is trending upwards.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source 1</term></item>
            <item><term>str Source 2</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.ComparativeRelativeStrength.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.ComparativeRelativeStrength.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.BollingerBands">
            <summary>
            Bollinger Bands are similar in comparison to moving average envelopes. Bollinger Bands are calculated using standard deviations instead of shifting bands by a fixed percentage.
            </summary>
            <remarks>Bollinger Bands (as with most bands) can be imposed over an actual price or another indicator.
            When prices rise above the upper band or fall below the lower band, a change in direction may occur when the price penetrates the band after a small reversal from the opposite direction.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Source</term></item>
            <item><term>int Periods</term></item>
            <item><term>int Standard Deviations</term></item>
            <item><term>int Moving Average Type </term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.BollingerBands.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.BollingerBands.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Controls.ChartScrollerProperties">
            <summary>
            Properties for chart scroller
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.CreateDefault(ModulusFE.StockChartX)">
            <summary>
            Creates default properties for chart scroller
            </summary>
            <param name="chart"></param>
            <returns></returns>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerProperties.HeightProperty">
            <summary>
            Height
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.OnHeightChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.Controls.ChartScrollerProperties.Height"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerProperties.IsVisibleProperty">
            <summary>
            IsVisible
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.OnIsVisibleChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.Controls.ChartScrollerProperties.IsVisible"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerProperties.TrendBackgroundProperty">
            <summary>
            TrendBackground
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.OnTrendBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.Controls.ChartScrollerProperties.TrendBackground"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerProperties.TrendStrokeProperty">
            <summary>
            TrendStroke
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.OnTrendStrokeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.Controls.ChartScrollerProperties.TrendStroke"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerProperties.ThumbBackgroundProperty">
            <summary>
            ThumbBackground
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.OnThumbBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.Controls.ChartScrollerProperties.ThumbBackground"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerProperties.ThumbStrokeProperty">
            <summary>
            ThumbStroke
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.OnThumbStrokeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.Controls.ChartScrollerProperties.ThumbStroke"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerProperties.BackgroundProperty">
            <summary>
            Background
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.OnBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method called when <see cref="P:ModulusFE.Controls.ChartScrollerProperties.Background"/> property changes
            </summary>
            <param name="e">Arguments</param>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerProperties.HandleBackgroundProperty">
            <summary>
            Identifies the <see cref="P:ModulusFE.Controls.ChartScrollerProperties.HandleBackground"/> dependency property 
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.HandleBackgroundChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerProperties.HandleBackgroundProhibitedProperty">
            <summary>
            Identifies the <see cref="P:ModulusFE.Controls.ChartScrollerProperties.HandleBackgroundProhibited"/> dependency property 
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.HandleBackgroundProhibitedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="F:ModulusFE.Controls.ChartScrollerProperties.HandleStrokeProperty">
            <summary>
            Identifies the <see cref="P:ModulusFE.Controls.ChartScrollerProperties.HandleStroke"/> dependency property 
            </summary>
        </member>
        <member name="M:ModulusFE.Controls.ChartScrollerProperties.HandleStrokeChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.Chart">
            <summary>
            Gets the reference to the chart holding the scroller
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.Height">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.IsVisible">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.TrendBackground">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.TrendStroke">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.ThumbBackground">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.ThumbStroke">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.Background">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.HandleBackground">
            <summary>
            Gets or sets the background for handles when zooming is allowed
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.HandleBackgroundProhibited">
            <summary>
            Gets or sets the background for handles when zooming is prohibited. This happens in case when
            number if visible records in chart is greater than <see cref="P:ModulusFE.StockChartX.MaxVisibleRecords"/>
            </summary>
        </member>
        <member name="P:ModulusFE.Controls.ChartScrollerProperties.HandleStroke">
            <summary>
            Gets or sets the stroke for handles. This is a  dependency property.
            </summary>
        </member>
        <member name="T:ModulusFE.Constants">
            <summary>
            Constants used in StockChartX and internal classes
            </summary>
        </member>
        <member name="F:ModulusFE.Constants.CalendarPanelHeight">
            <summary>
            the height of the calendar
            </summary>
        </member>
        <member name="F:ModulusFE.Constants.PanelsBarHeight">
            <summary>
            the height of the panel where the minimized ChartPanels will be shown
            </summary>
        </member>
        <member name="F:ModulusFE.Constants.PanelsBarButtonWidth">
            <summary>
            the width of the button shown for panel that is minimized in panels bar
            </summary>
        </member>
        <member name="F:ModulusFE.Constants.YAxisWidth">
            <summary>
            the width of Y Axis
            </summary>
        </member>
        <member name="F:ModulusFE.Constants.PanelTitleBarHeight">
            <summary>
            The height of panel's title bar
            </summary>
        </member>
        <member name="F:ModulusFE.Constants.MaxIndicatorParamCount">
            <summary>
            Maximum number of parameters an indicator may support
            </summary>
        </member>
        <member name="F:ModulusFE.Constants.MaxParams">
            <summary>
            Maximum number of parameters a LineStudy may have
            </summary>
        </member>
        <member name="F:ModulusFE.Constants.SelectionDotSize">
            <summary>
            the diameter of selction dot
            </summary>
        </member>
        <member name="F:ModulusFE.Constants.MaxPriceStyleParams">
            <summary>
            Maximum number pf parameters a price style may have
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.RandomWalkIndex">
            <summary>
            Random Walk Index by E. Michael Poulos is shows the variability of price differs from what would be expected by a random walk.
            </summary>
            <remarks>High values suggest that the price is trending while low values indicate that the price is not trending.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.RandomWalkIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.RandomWalkIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Indicators.MarketFacilitationIndex">
            <summary>
            The Market Facilitation Index, developed by Dr. Bill Williams, shows prices changes as they relate to volume. The formula is (High - Low) / Volume.
            </summary>
            <remarks>When both the Market Facilitation Index and Volume increase at the same time, it can be said that market participants are becoming more interested.
            Likewise, when both the Market Facilitation Index and Volume decrease, it can be said that market participants are losing interest.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.MarketFacilitationIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.MarketFacilitationIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Ex">
            <summary>
            Common extentions
            </summary>
        </member>
        <member name="M:ModulusFE.Ex.Between``1(``0,``0,``0)">
            <summary>
            Checks whether a value is between two given values
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="T:ModulusFE.Standard">
            <summary>
            Standard type of series. Usually used in a group of OHLC series.
            </summary>
        </member>
        <member name="M:ModulusFE.Standard.#ctor(System.String,ModulusFE.SeriesTypeEnum,ModulusFE.SeriesTypeOHLC,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Unique series name. </param>
            <param name="seriesType">Series Type</param>
            <param name="seriesTypeOHLC">Series OHLC type</param>
            <param name="chartPanel">Reference to a chart panel where it will be placed.</param>
        </member>
        <member name="P:ModulusFE.Standard.ForceOscilatorPaint">
            <summary>
            Force the series to be painted as an oscilator (histogram)
            </summary>
        </member>
        <member name="P:ModulusFE.Standard.ForceLinearPaint">
            <summary>
             Forces the series to be painted as linear, <see cref="P:ModulusFE.Standard.ForceOscilatorPaint"/> must be set to false
            </summary>
        </member>
        <member name="T:ModulusFE.SeriesDefValueBridge">
            <summary>
            A default value bridge for Tick Box
            </summary>
        </member>
        <member name="M:ModulusFE.SeriesDefValueBridge.AttachDataSupplier(ModulusFE.Series,System.Type[])">
            <summary>
            
            </summary>
            <param name="objectDataSupplier"></param>
            <param name="parametersType"></param>
        </member>
        <member name="M:ModulusFE.SeriesDefValueBridge.NotifyDataChanged(System.Object[])">
            <summary>
            
            </summary>
            <param name="values"></param>
        </member>
        <member name="F:ModulusFE.SeriesDefValueBridge.BackgroundExChangedEventsArgs">
            <summary>
            Provides <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> for property <see cref="P:ModulusFE.SeriesDefValueBridge.BackgroundEx"/>
            </summary>
        </member>
        <member name="P:ModulusFE.SeriesDefValueBridge.UpBrush">
            <summary>
            Gets or sets the brush to represent the up-trend of the price.
            </summary>
        </member>
        <member name="P:ModulusFE.SeriesDefValueBridge.DownBrush">
            <summary>
            Gets or sets the brush to represent the down-trend of the price.
            </summary>
        </member>
        <member name="E:ModulusFE.SeriesDefValueBridge.PropertyChanged">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.SeriesDefValueBridge.Value">
            <summary>
             Value
            </summary>
        </member>
        <member name="P:ModulusFE.SeriesDefValueBridge.BackgroundEx">
            <summary>
            Gets or sets the BackgroundEx value.
            </summary>
        </member>
        <member name="T:ModulusFE.LineStudies.HorizontalLineStudyValuePresenter">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLineStudyValuePresenter.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.LineStudies.HorizontalLineStudyValuePresenter.Show(System.Boolean)">
            <summary>
             Show the control
            </summary>
            <param name="show"></param>
        </member>
        <member name="P:ModulusFE.LineStudies.HorizontalLineStudyValuePresenter.ValuePresenter">
            <summary>
             Reference to object
            </summary>
        </member>
        <member name="T:ModulusFE.Interfaces.ChartPanelMoreIndicatorPosition">
            <summary>
             Represents the position of more indicatr relative to hosting panel
            </summary>
        </member>
        <member name="F:ModulusFE.Interfaces.ChartPanelMoreIndicatorPosition.TopLeft">
            <summary>
             Top Left
            </summary>
        </member>
        <member name="F:ModulusFE.Interfaces.ChartPanelMoreIndicatorPosition.BottomLeft">
            <summary>
             Bottom Left
            </summary>
        </member>
        <member name="F:ModulusFE.Interfaces.ChartPanelMoreIndicatorPosition.TopRight">
            <summary>
             Top Right
            </summary>
        </member>
        <member name="F:ModulusFE.Interfaces.ChartPanelMoreIndicatorPosition.BottomRight">
            <summary>
             Bottom Right
            </summary>
        </member>
        <member name="T:ModulusFE.Indicators.MassIndex">
            <summary>
            The Mass Index identifies price changes by indexing the narrowing and widening change between high and low prices.
            </summary>
            <remarks>According to the inventor of the Mass Index, reversals may occur when a 25-period Mass Index rises above 27 or falls below 26.5.
            <list type="table">
            <listheader>
            <term>Parameters</term>
            </listheader>
            <item><term>str Symbol</term></item>
            <item><term>int Periods</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:ModulusFE.Indicators.MassIndex.#ctor(System.String,ModulusFE.ChartPanel)">
            <summary>
            Constructor
            </summary>
            <param name="name">Indicator name</param>
            <param name="chartPanel">Reference to a panel where it will be placed</param>
        </member>
        <member name="M:ModulusFE.Indicators.MassIndex.TrueAction">
            <summary>
            Action to be executd for calculating indicator
            </summary>
            <returns>for future usage. Must be ignored at this time.</returns>
        </member>
        <member name="T:ModulusFE.Exceptions.KeyNotUniqueException">
            <summary>
            The exception that is thrown when a key is not unique
            </summary>
        </member>
        <member name="M:ModulusFE.Exceptions.KeyNotUniqueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <seealso cref="T:ModulusFE.Exceptions.KeyNotUniqueException"/> class.
            </summary>
            <param name="key">Key that is not unique</param>
        </member>
        <member name="P:ModulusFE.Exceptions.KeyNotUniqueException.Key">
            <summary>
            Key that is not unique
            </summary>
        </member>
        <member name="T:ModulusFE.Exceptions.InvalidIndicatorException">
            <summary>
             The exception that is thrown when a given indicator type is invalid.
            </summary>
        </member>
        <member name="M:ModulusFE.Exceptions.InvalidIndicatorException.#ctor(ModulusFE.IndicatorType)">
            <summary>
             Initializes a new instance of the <seealso cref="T:ModulusFE.Exceptions.InvalidIndicatorException"/> class.
            </summary>
            <param name="indicatorType">Indicator type that is not valid</param>
        </member>
        <member name="P:ModulusFE.Exceptions.InvalidIndicatorException.IndicatorType">
            <summary>
             Indicator type that is not valid
            </summary>
        </member>
        <member name="T:ModulusFE.Exceptions.SeriesNameNotUniqueException">
            <summary>
             The exception that is thrown when a series name is not unique
            </summary>
        </member>
        <member name="M:ModulusFE.Exceptions.SeriesNameNotUniqueException.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <seealso cref="T:ModulusFE.Exceptions.SeriesNameNotUniqueException"/> class.
            </summary>
            <param name="seriesName">Series name that is not unique</param>
        </member>
        <member name="P:ModulusFE.Exceptions.SeriesNameNotUniqueException.SeriesName">
            <summary>
             Series name that is not unique
            </summary>
        </member>
        <member name="T:ModulusFE.Exceptions.SeriesDoesNotExistsException">
            <summary>
             The exception that is thrown when a given series name doesn't exist.
            </summary>
        </member>
        <member name="M:ModulusFE.Exceptions.SeriesDoesNotExistsException.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <seealso cref="T:ModulusFE.Exceptions.SeriesDoesNotExistsException"/> class.
            </summary>
            <param name="seriesName">Series name that doesn't exists</param>
        </member>
        <member name="P:ModulusFE.Exceptions.SeriesDoesNotExistsException.SeriesName">
            <summary>
             Series name that doesn't exists
            </summary>
        </member>
        <member name="T:ModulusFE.Exceptions.SymbolNotSetException">
            <summary>
             The exception that is thrown when the chart needs to be updated but <see cref="P:ModulusFE.StockChartX.Symbol"/> is not set.
            </summary>
        </member>
        <member name="M:ModulusFE.Exceptions.SymbolNotSetException.#ctor">
            <summary>
             Initializes a new instance of the <seealso cref="T:ModulusFE.Exceptions.SymbolNotSetException"/> class.
            </summary>
        </member>
        <member name="T:ModulusFE.Exceptions.ChartFileCorruptException">
            <summary>
             The exception that is thrown when a file is read and has a wrong serialization type or is corupt.
            </summary>
        </member>
        <member name="M:ModulusFE.Exceptions.ChartFileCorruptException.#ctor">
            <summary>
             Initializes a new instance of the <seealso cref="T:ModulusFE.Exceptions.ChartFileCorruptException"/> class.
            </summary>
        </member>
        <member name="T:ModulusFE.Exceptions.ChartException">
            <summary>
            </summary>
        </member>
        <member name="M:ModulusFE.Exceptions.ChartException.#ctor(System.String)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ModulusFE.ChartElementProperties.SliderPropertyPresenter">
            <summary>
             Represents a slider
            </summary>
        </member>
        <member name="M:ModulusFE.ChartElementProperties.SliderPropertyPresenter.#ctor(System.Double,System.Double)">
            <summary>
             Ctor
            </summary>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.SliderPropertyPresenter.Value">
            <summary>
            </summary>
        </member>
        <member name="P:ModulusFE.ChartElementProperties.SliderPropertyPresenter.Control">
            <summary>
            </summary>
        </member>
    </members>
</doc>
